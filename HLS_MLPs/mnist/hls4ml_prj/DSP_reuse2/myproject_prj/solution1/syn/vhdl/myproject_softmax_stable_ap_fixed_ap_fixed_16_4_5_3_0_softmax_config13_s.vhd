-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce3 : STD_LOGIC;
    signal exp_table_q3 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce4 : STD_LOGIC;
    signal exp_table_q4 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce5 : STD_LOGIC;
    signal exp_table_q5 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce6 : STD_LOGIC;
    signal exp_table_q6 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce7 : STD_LOGIC;
    signal exp_table_q7 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address8 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce8 : STD_LOGIC;
    signal exp_table_q8 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address9 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce9 : STD_LOGIC;
    signal exp_table_q9 : STD_LOGIC_VECTOR (17 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read_1_reg_1459 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_1_reg_1459_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_1_reg_1459_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_1_reg_1459_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_1466 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_1466_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_1466_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_1466_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_1473 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_1473_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_1473_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_1473_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_1479 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_1479_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_1479_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_1479_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_1485 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_1485_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_1485_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_1485_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_1491 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_1491_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_1491_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_1491_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_7_reg_1497 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_7_reg_1497_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_7_reg_1497_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_7_reg_1497_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_8_reg_1503 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_8_reg_1503_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_8_reg_1503_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_8_reg_1503_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_9_reg_1509 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_9_reg_1509_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_9_reg_1509_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_9_reg_1509_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_10_reg_1515 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_10_reg_1515_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_10_reg_1515_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_10_reg_1515_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_reg_1521 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_1_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_1_reg_1526 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_3_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_3_reg_1531 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_4_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_4_reg_1536 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_2_fu_318_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_reg_1541 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_fu_360_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_5_reg_1547 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_6_fu_378_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_6_reg_1553 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_7_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_7_reg_1559 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_410_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_V_reg_1564 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_fu_868_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_reg_1569 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_reg_1569_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_1_fu_894_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_1_reg_1574 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_2_fu_920_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_2_reg_1579 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_3_fu_946_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_3_reg_1584 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_4_fu_972_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_4_reg_1589 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_4_reg_1589_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_5_fu_998_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_5_reg_1594 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_5_reg_1594_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_6_fu_1024_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_6_reg_1599 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_6_reg_1599_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_7_fu_1050_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_7_reg_1604 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_7_reg_1604_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_8_fu_1076_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_8_reg_1609 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_8_reg_1609_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_8_reg_1609_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_9_fu_1102_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_9_reg_1614 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_9_reg_1614_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_9_reg_1614_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_V_1_reg_1639 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_1_reg_1639_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_1_reg_1639_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_1_reg_1639_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_1_reg_1639_pp0_iter10_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_1_reg_1639_pp0_iter11_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_2_reg_1645 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_2_reg_1645_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_2_reg_1645_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_2_reg_1645_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_2_reg_1645_pp0_iter10_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_2_reg_1645_pp0_iter11_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_3_reg_1651 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_3_reg_1651_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_3_reg_1651_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_3_reg_1651_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_3_reg_1651_pp0_iter10_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_3_reg_1651_pp0_iter11_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_0_reg_1677 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_0_reg_1677_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_0_reg_1677_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_0_reg_1677_pp0_iter10_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_0_reg_1677_pp0_iter11_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_4_reg_1683 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_4_reg_1683_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_4_reg_1683_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_4_reg_1683_pp0_iter10_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_4_reg_1683_pp0_iter11_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_5_reg_1689 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_5_reg_1689_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_5_reg_1689_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_5_reg_1689_pp0_iter10_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_5_reg_1689_pp0_iter11_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_6_reg_1695 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_6_reg_1695_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_6_reg_1695_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_6_reg_1695_pp0_iter10_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_6_reg_1695_pp0_iter11_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_7_reg_1701 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_7_reg_1701_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_7_reg_1701_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_7_reg_1701_pp0_iter10_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_7_reg_1701_pp0_iter11_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_6_fu_1154_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_6_reg_1717 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_8_reg_1722 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_8_reg_1722_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_8_reg_1722_pp0_iter10_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_8_reg_1722_pp0_iter11_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_9_reg_1727 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_9_reg_1727_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_9_reg_1727_pp0_iter10_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_9_reg_1727_pp0_iter11_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_fu_1159_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_reg_1732 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_2_fu_1169_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_2_reg_1737 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_7_fu_1178_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_7_reg_1742 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_10_reg_1747 : STD_LOGIC_VECTOR (9 downto 0);
    signal inv_exp_sum_V_reg_1757 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1171_fu_1206_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln255_1_fu_1110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_2_fu_1114_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_3_fu_1118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_fu_1122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_4_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_5_fu_1130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_6_fu_1134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_7_fu_1138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_8_fu_1142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_9_fu_1146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_1202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1549_fu_260_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_fu_260_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_1_fu_266_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_1_fu_266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_3_fu_272_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_3_fu_272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_4_fu_278_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_4_fu_278_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln1549_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_1_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_289_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_300_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_2_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_2_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_3_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_4_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_3_fu_331_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_4_fu_342_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_5_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_5_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_6_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_6_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_7_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_7_fu_393_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_8_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_8_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_fu_417_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1246_1_fu_420_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_423_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_11_fu_429_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_437_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_2_fu_463_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_466_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_13_fu_472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_480_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_1_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_3_fu_506_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_fu_509_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_15_fu_515_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_523_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_2_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_4_fu_549_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_552_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_17_fu_558_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_566_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_3_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_5_fu_592_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_4_fu_595_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_19_fu_601_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_4_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_6_fu_635_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_5_fu_638_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_21_fu_644_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_22_fu_652_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_5_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_7_fu_678_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_6_fu_681_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_23_fu_687_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_695_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_6_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_8_fu_721_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_7_fu_724_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_25_fu_730_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_26_fu_738_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_7_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_9_fu_764_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_8_fu_767_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_27_fu_773_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_28_fu_781_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_8_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_10_fu_807_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_9_fu_810_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_29_fu_816_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_fu_824_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_9_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_fu_850_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_858_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_1_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_1_fu_876_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_884_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_2_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_2_fu_902_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_910_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_3_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_3_fu_928_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_936_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_4_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_4_fu_954_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_962_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_5_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_5_fu_980_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_988_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_6_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_6_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_6_fu_1006_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_1014_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_7_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_7_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_7_fu_1032_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_1040_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_8_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_8_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_8_fu_1058_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_1066_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_9_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_9_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_9_fu_1084_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_1092_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln712_5_fu_1150_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_fu_1159_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_fu_1159_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_1_fu_1165_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_4_fu_1174_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_3_fu_1183_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_sum_V_fu_1187_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1389_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1396_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1403_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1410_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1417_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1424_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1431_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1438_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1445_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1452_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1389_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1396_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1403_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1410_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1417_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1424_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1431_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1438_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1445_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1452_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to13 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_mul_18s_18s_28_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s_exp_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address8 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address9 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s_invert_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s_exp_table
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2,
        address3 => exp_table_address3,
        ce3 => exp_table_ce3,
        q3 => exp_table_q3,
        address4 => exp_table_address4,
        ce4 => exp_table_ce4,
        q4 => exp_table_q4,
        address5 => exp_table_address5,
        ce5 => exp_table_ce5,
        q5 => exp_table_q5,
        address6 => exp_table_address6,
        ce6 => exp_table_ce6,
        q6 => exp_table_q6,
        address7 => exp_table_address7,
        ce7 => exp_table_ce7,
        q7 => exp_table_q7,
        address8 => exp_table_address8,
        ce8 => exp_table_ce8,
        q8 => exp_table_q8,
        address9 => exp_table_address9,
        ce9 => exp_table_ce9,
        q9 => exp_table_q9);

    invert_table_U : component myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s_invert_table
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_mul_18s_18s_28_3_1_U962 : component myproject_mul_mul_18s_18s_28_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1389_p0,
        din1 => exp_res_V_0_reg_1677_pp0_iter11_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1389_p2);

    mul_mul_18s_18s_28_3_1_U963 : component myproject_mul_mul_18s_18s_28_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1396_p0,
        din1 => exp_res_V_1_reg_1639_pp0_iter11_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1396_p2);

    mul_mul_18s_18s_28_3_1_U964 : component myproject_mul_mul_18s_18s_28_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1403_p0,
        din1 => exp_res_V_2_reg_1645_pp0_iter11_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1403_p2);

    mul_mul_18s_18s_28_3_1_U965 : component myproject_mul_mul_18s_18s_28_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1410_p0,
        din1 => exp_res_V_3_reg_1651_pp0_iter11_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1410_p2);

    mul_mul_18s_18s_28_3_1_U966 : component myproject_mul_mul_18s_18s_28_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1417_p0,
        din1 => exp_res_V_4_reg_1683_pp0_iter11_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1417_p2);

    mul_mul_18s_18s_28_3_1_U967 : component myproject_mul_mul_18s_18s_28_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1424_p0,
        din1 => exp_res_V_5_reg_1689_pp0_iter11_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1424_p2);

    mul_mul_18s_18s_28_3_1_U968 : component myproject_mul_mul_18s_18s_28_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1431_p0,
        din1 => exp_res_V_6_reg_1695_pp0_iter11_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1431_p2);

    mul_mul_18s_18s_28_3_1_U969 : component myproject_mul_mul_18s_18s_28_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1438_p0,
        din1 => exp_res_V_7_reg_1701_pp0_iter11_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1438_p2);

    mul_mul_18s_18s_28_3_1_U970 : component myproject_mul_mul_18s_18s_28_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1445_p0,
        din1 => exp_res_V_8_reg_1722_pp0_iter11_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1445_p2);

    mul_mul_18s_18s_28_3_1_U971 : component myproject_mul_mul_18s_18s_28_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1452_p0,
        din1 => exp_res_V_9_reg_1727_pp0_iter11_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1452_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln712_2_reg_1737 <= add_ln712_2_fu_1169_p2;
                add_ln712_6_reg_1717 <= add_ln712_6_fu_1154_p2;
                add_ln712_7_reg_1742 <= add_ln712_7_fu_1178_p2;
                add_ln712_reg_1732 <= add_ln712_fu_1159_p2;
                exp_res_V_0_reg_1677_pp0_iter10_reg <= exp_res_V_0_reg_1677_pp0_iter9_reg;
                exp_res_V_0_reg_1677_pp0_iter11_reg <= exp_res_V_0_reg_1677_pp0_iter10_reg;
                exp_res_V_0_reg_1677_pp0_iter8_reg <= exp_res_V_0_reg_1677;
                exp_res_V_0_reg_1677_pp0_iter9_reg <= exp_res_V_0_reg_1677_pp0_iter8_reg;
                exp_res_V_1_reg_1639_pp0_iter10_reg <= exp_res_V_1_reg_1639_pp0_iter9_reg;
                exp_res_V_1_reg_1639_pp0_iter11_reg <= exp_res_V_1_reg_1639_pp0_iter10_reg;
                exp_res_V_1_reg_1639_pp0_iter7_reg <= exp_res_V_1_reg_1639;
                exp_res_V_1_reg_1639_pp0_iter8_reg <= exp_res_V_1_reg_1639_pp0_iter7_reg;
                exp_res_V_1_reg_1639_pp0_iter9_reg <= exp_res_V_1_reg_1639_pp0_iter8_reg;
                exp_res_V_2_reg_1645_pp0_iter10_reg <= exp_res_V_2_reg_1645_pp0_iter9_reg;
                exp_res_V_2_reg_1645_pp0_iter11_reg <= exp_res_V_2_reg_1645_pp0_iter10_reg;
                exp_res_V_2_reg_1645_pp0_iter7_reg <= exp_res_V_2_reg_1645;
                exp_res_V_2_reg_1645_pp0_iter8_reg <= exp_res_V_2_reg_1645_pp0_iter7_reg;
                exp_res_V_2_reg_1645_pp0_iter9_reg <= exp_res_V_2_reg_1645_pp0_iter8_reg;
                exp_res_V_3_reg_1651_pp0_iter10_reg <= exp_res_V_3_reg_1651_pp0_iter9_reg;
                exp_res_V_3_reg_1651_pp0_iter11_reg <= exp_res_V_3_reg_1651_pp0_iter10_reg;
                exp_res_V_3_reg_1651_pp0_iter7_reg <= exp_res_V_3_reg_1651;
                exp_res_V_3_reg_1651_pp0_iter8_reg <= exp_res_V_3_reg_1651_pp0_iter7_reg;
                exp_res_V_3_reg_1651_pp0_iter9_reg <= exp_res_V_3_reg_1651_pp0_iter8_reg;
                exp_res_V_4_reg_1683_pp0_iter10_reg <= exp_res_V_4_reg_1683_pp0_iter9_reg;
                exp_res_V_4_reg_1683_pp0_iter11_reg <= exp_res_V_4_reg_1683_pp0_iter10_reg;
                exp_res_V_4_reg_1683_pp0_iter8_reg <= exp_res_V_4_reg_1683;
                exp_res_V_4_reg_1683_pp0_iter9_reg <= exp_res_V_4_reg_1683_pp0_iter8_reg;
                exp_res_V_5_reg_1689_pp0_iter10_reg <= exp_res_V_5_reg_1689_pp0_iter9_reg;
                exp_res_V_5_reg_1689_pp0_iter11_reg <= exp_res_V_5_reg_1689_pp0_iter10_reg;
                exp_res_V_5_reg_1689_pp0_iter8_reg <= exp_res_V_5_reg_1689;
                exp_res_V_5_reg_1689_pp0_iter9_reg <= exp_res_V_5_reg_1689_pp0_iter8_reg;
                exp_res_V_6_reg_1695_pp0_iter10_reg <= exp_res_V_6_reg_1695_pp0_iter9_reg;
                exp_res_V_6_reg_1695_pp0_iter11_reg <= exp_res_V_6_reg_1695_pp0_iter10_reg;
                exp_res_V_6_reg_1695_pp0_iter8_reg <= exp_res_V_6_reg_1695;
                exp_res_V_6_reg_1695_pp0_iter9_reg <= exp_res_V_6_reg_1695_pp0_iter8_reg;
                exp_res_V_7_reg_1701_pp0_iter10_reg <= exp_res_V_7_reg_1701_pp0_iter9_reg;
                exp_res_V_7_reg_1701_pp0_iter11_reg <= exp_res_V_7_reg_1701_pp0_iter10_reg;
                exp_res_V_7_reg_1701_pp0_iter8_reg <= exp_res_V_7_reg_1701;
                exp_res_V_7_reg_1701_pp0_iter9_reg <= exp_res_V_7_reg_1701_pp0_iter8_reg;
                exp_res_V_8_reg_1722_pp0_iter10_reg <= exp_res_V_8_reg_1722_pp0_iter9_reg;
                exp_res_V_8_reg_1722_pp0_iter11_reg <= exp_res_V_8_reg_1722_pp0_iter10_reg;
                exp_res_V_8_reg_1722_pp0_iter9_reg <= exp_res_V_8_reg_1722;
                exp_res_V_9_reg_1727_pp0_iter10_reg <= exp_res_V_9_reg_1727_pp0_iter9_reg;
                exp_res_V_9_reg_1727_pp0_iter11_reg <= exp_res_V_9_reg_1727_pp0_iter10_reg;
                exp_res_V_9_reg_1727_pp0_iter9_reg <= exp_res_V_9_reg_1727;
                icmp_ln1549_7_reg_1559 <= icmp_ln1549_7_fu_384_p2;
                inv_exp_sum_V_reg_1757 <= invert_table_q0;
                p_read_10_reg_1515_pp0_iter2_reg <= p_read_10_reg_1515_pp0_iter1_reg;
                p_read_10_reg_1515_pp0_iter3_reg <= p_read_10_reg_1515_pp0_iter2_reg;
                p_read_1_reg_1459_pp0_iter2_reg <= p_read_1_reg_1459_pp0_iter1_reg;
                p_read_1_reg_1459_pp0_iter3_reg <= p_read_1_reg_1459_pp0_iter2_reg;
                p_read_2_reg_1466_pp0_iter2_reg <= p_read_2_reg_1466_pp0_iter1_reg;
                p_read_2_reg_1466_pp0_iter3_reg <= p_read_2_reg_1466_pp0_iter2_reg;
                p_read_3_reg_1473_pp0_iter2_reg <= p_read_3_reg_1473_pp0_iter1_reg;
                p_read_3_reg_1473_pp0_iter3_reg <= p_read_3_reg_1473_pp0_iter2_reg;
                p_read_4_reg_1479_pp0_iter2_reg <= p_read_4_reg_1479_pp0_iter1_reg;
                p_read_4_reg_1479_pp0_iter3_reg <= p_read_4_reg_1479_pp0_iter2_reg;
                p_read_5_reg_1485_pp0_iter2_reg <= p_read_5_reg_1485_pp0_iter1_reg;
                p_read_5_reg_1485_pp0_iter3_reg <= p_read_5_reg_1485_pp0_iter2_reg;
                p_read_6_reg_1491_pp0_iter2_reg <= p_read_6_reg_1491_pp0_iter1_reg;
                p_read_6_reg_1491_pp0_iter3_reg <= p_read_6_reg_1491_pp0_iter2_reg;
                p_read_7_reg_1497_pp0_iter2_reg <= p_read_7_reg_1497_pp0_iter1_reg;
                p_read_7_reg_1497_pp0_iter3_reg <= p_read_7_reg_1497_pp0_iter2_reg;
                p_read_8_reg_1503_pp0_iter2_reg <= p_read_8_reg_1503_pp0_iter1_reg;
                p_read_8_reg_1503_pp0_iter3_reg <= p_read_8_reg_1503_pp0_iter2_reg;
                p_read_9_reg_1509_pp0_iter2_reg <= p_read_9_reg_1509_pp0_iter1_reg;
                p_read_9_reg_1509_pp0_iter3_reg <= p_read_9_reg_1509_pp0_iter2_reg;
                select_ln65_6_reg_1553 <= select_ln65_6_fu_378_p3;
                x_max_V_reg_1564 <= x_max_V_fu_410_p3;
                y_10_reg_1747 <= exp_sum_V_fu_1187_p2(17 downto 8);
                y_1_reg_1574 <= y_1_fu_894_p3;
                y_2_reg_1579 <= y_2_fu_920_p3;
                y_3_reg_1584 <= y_3_fu_946_p3;
                y_4_reg_1589 <= y_4_fu_972_p3;
                y_4_reg_1589_pp0_iter5_reg <= y_4_reg_1589;
                y_5_reg_1594 <= y_5_fu_998_p3;
                y_5_reg_1594_pp0_iter5_reg <= y_5_reg_1594;
                y_6_reg_1599 <= y_6_fu_1024_p3;
                y_6_reg_1599_pp0_iter5_reg <= y_6_reg_1599;
                y_7_reg_1604 <= y_7_fu_1050_p3;
                y_7_reg_1604_pp0_iter5_reg <= y_7_reg_1604;
                y_8_reg_1609 <= y_8_fu_1076_p3;
                y_8_reg_1609_pp0_iter5_reg <= y_8_reg_1609;
                y_8_reg_1609_pp0_iter6_reg <= y_8_reg_1609_pp0_iter5_reg;
                y_9_reg_1614 <= y_9_fu_1102_p3;
                y_9_reg_1614_pp0_iter5_reg <= y_9_reg_1614;
                y_9_reg_1614_pp0_iter6_reg <= y_9_reg_1614_pp0_iter5_reg;
                y_reg_1569 <= y_fu_868_p3;
                y_reg_1569_pp0_iter5_reg <= y_reg_1569;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                exp_res_V_0_reg_1677 <= exp_table_q6;
                exp_res_V_4_reg_1683 <= exp_table_q5;
                exp_res_V_5_reg_1689 <= exp_table_q4;
                exp_res_V_6_reg_1695 <= exp_table_q3;
                exp_res_V_7_reg_1701 <= exp_table_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                exp_res_V_1_reg_1639 <= exp_table_q9;
                exp_res_V_2_reg_1645 <= exp_table_q8;
                exp_res_V_3_reg_1651 <= exp_table_q7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                exp_res_V_8_reg_1722 <= exp_table_q1;
                exp_res_V_9_reg_1727 <= exp_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1549_1_reg_1526 <= icmp_ln1549_1_fu_266_p2;
                icmp_ln1549_3_reg_1531 <= icmp_ln1549_3_fu_272_p2;
                icmp_ln1549_4_reg_1536 <= icmp_ln1549_4_fu_278_p2;
                icmp_ln1549_reg_1521 <= icmp_ln1549_fu_260_p2;
                p_read_10_reg_1515 <= p_read;
                p_read_10_reg_1515_pp0_iter1_reg <= p_read_10_reg_1515;
                p_read_1_reg_1459 <= p_read9;
                p_read_1_reg_1459_pp0_iter1_reg <= p_read_1_reg_1459;
                p_read_2_reg_1466 <= p_read8;
                p_read_2_reg_1466_pp0_iter1_reg <= p_read_2_reg_1466;
                p_read_3_reg_1473 <= p_read7;
                p_read_3_reg_1473_pp0_iter1_reg <= p_read_3_reg_1473;
                p_read_4_reg_1479 <= p_read6;
                p_read_4_reg_1479_pp0_iter1_reg <= p_read_4_reg_1479;
                p_read_5_reg_1485 <= p_read5;
                p_read_5_reg_1485_pp0_iter1_reg <= p_read_5_reg_1485;
                p_read_6_reg_1491 <= p_read4;
                p_read_6_reg_1491_pp0_iter1_reg <= p_read_6_reg_1491;
                p_read_7_reg_1497 <= p_read3;
                p_read_7_reg_1497_pp0_iter1_reg <= p_read_7_reg_1497;
                p_read_8_reg_1503 <= p_read2;
                p_read_8_reg_1503_pp0_iter1_reg <= p_read_8_reg_1503;
                p_read_9_reg_1509 <= p_read1;
                p_read_9_reg_1509_pp0_iter1_reg <= p_read_9_reg_1509;
                select_ln65_2_reg_1541 <= select_ln65_2_fu_318_p3;
                select_ln65_5_reg_1547 <= select_ln65_5_fu_360_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln712_1_fu_1165_p2 <= std_logic_vector(signed(exp_res_V_5_reg_1689) + signed(exp_res_V_6_reg_1695));
    add_ln712_2_fu_1169_p2 <= std_logic_vector(unsigned(add_ln712_1_fu_1165_p2) + unsigned(exp_res_V_4_reg_1683));
    add_ln712_3_fu_1183_p2 <= std_logic_vector(unsigned(add_ln712_2_reg_1737) + unsigned(add_ln712_reg_1732));
    add_ln712_4_fu_1174_p2 <= std_logic_vector(signed(exp_res_V_7_reg_1701) + signed(exp_res_V_0_reg_1677));
    add_ln712_5_fu_1150_p2 <= std_logic_vector(signed(exp_res_V_2_reg_1645) + signed(exp_res_V_3_reg_1651));
    add_ln712_6_fu_1154_p2 <= std_logic_vector(unsigned(add_ln712_5_fu_1150_p2) + unsigned(exp_res_V_1_reg_1639));
    add_ln712_7_fu_1178_p2 <= std_logic_vector(unsigned(add_ln712_6_reg_1717) + unsigned(add_ln712_4_fu_1174_p2));
    add_ln712_fu_1159_p0 <= exp_table_q0;
    add_ln712_fu_1159_p1 <= exp_table_q1;
    add_ln712_fu_1159_p2 <= std_logic_vector(signed(add_ln712_fu_1159_p0) + signed(add_ln712_fu_1159_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to13_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to13 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to13)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= grp_fu_1389_p2(27 downto 12);
    ap_return_1 <= grp_fu_1396_p2(27 downto 12);
    ap_return_2 <= grp_fu_1403_p2(27 downto 12);
    ap_return_3 <= grp_fu_1410_p2(27 downto 12);
    ap_return_4 <= grp_fu_1417_p2(27 downto 12);
    ap_return_5 <= grp_fu_1424_p2(27 downto 12);
    ap_return_6 <= grp_fu_1431_p2(27 downto 12);
    ap_return_7 <= grp_fu_1438_p2(27 downto 12);
    ap_return_8 <= grp_fu_1445_p2(27 downto 12);
    ap_return_9 <= grp_fu_1452_p2(27 downto 12);
    exp_sum_V_fu_1187_p2 <= std_logic_vector(unsigned(add_ln712_7_reg_1742) + unsigned(add_ln712_3_fu_1183_p2));
    exp_table_address0 <= zext_ln255_9_fu_1146_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln255_8_fu_1142_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln255_7_fu_1138_p1(10 - 1 downto 0);
    exp_table_address3 <= zext_ln255_6_fu_1134_p1(10 - 1 downto 0);
    exp_table_address4 <= zext_ln255_5_fu_1130_p1(10 - 1 downto 0);
    exp_table_address5 <= zext_ln255_4_fu_1126_p1(10 - 1 downto 0);
    exp_table_address6 <= zext_ln255_fu_1122_p1(10 - 1 downto 0);
    exp_table_address7 <= zext_ln255_3_fu_1118_p1(10 - 1 downto 0);
    exp_table_address8 <= zext_ln255_2_fu_1114_p1(10 - 1 downto 0);
    exp_table_address9 <= zext_ln255_1_fu_1110_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce3_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            exp_table_ce3 <= ap_const_logic_1;
        else 
            exp_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce4_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            exp_table_ce4 <= ap_const_logic_1;
        else 
            exp_table_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce5_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            exp_table_ce5 <= ap_const_logic_1;
        else 
            exp_table_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce6_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            exp_table_ce6 <= ap_const_logic_1;
        else 
            exp_table_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce7_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce7 <= ap_const_logic_1;
        else 
            exp_table_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce8_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce8 <= ap_const_logic_1;
        else 
            exp_table_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce9_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce9 <= ap_const_logic_1;
        else 
            exp_table_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1389_p0 <= sext_ln1171_fu_1206_p1(18 - 1 downto 0);
    grp_fu_1396_p0 <= sext_ln1171_fu_1206_p1(18 - 1 downto 0);
    grp_fu_1403_p0 <= sext_ln1171_fu_1206_p1(18 - 1 downto 0);
    grp_fu_1410_p0 <= sext_ln1171_fu_1206_p1(18 - 1 downto 0);
    grp_fu_1417_p0 <= sext_ln1171_fu_1206_p1(18 - 1 downto 0);
    grp_fu_1424_p0 <= sext_ln1171_fu_1206_p1(18 - 1 downto 0);
    grp_fu_1431_p0 <= sext_ln1171_fu_1206_p1(18 - 1 downto 0);
    grp_fu_1438_p0 <= sext_ln1171_fu_1206_p1(18 - 1 downto 0);
    grp_fu_1445_p0 <= sext_ln1171_fu_1206_p1(18 - 1 downto 0);
    grp_fu_1452_p0 <= sext_ln1171_fu_1206_p1(18 - 1 downto 0);
    icmp_ln1549_1_fu_266_p0 <= p_read2;
    icmp_ln1549_1_fu_266_p1 <= p_read3;
    icmp_ln1549_1_fu_266_p2 <= "1" when (signed(icmp_ln1549_1_fu_266_p0) < signed(icmp_ln1549_1_fu_266_p1)) else "0";
    icmp_ln1549_2_fu_306_p2 <= "1" when (signed(select_ln65_fu_289_p3) < signed(select_ln65_1_fu_300_p3)) else "0";
    icmp_ln1549_3_fu_272_p0 <= p_read4;
    icmp_ln1549_3_fu_272_p1 <= p_read5;
    icmp_ln1549_3_fu_272_p2 <= "1" when (signed(icmp_ln1549_3_fu_272_p0) < signed(icmp_ln1549_3_fu_272_p1)) else "0";
    icmp_ln1549_4_fu_278_p0 <= p_read6;
    icmp_ln1549_4_fu_278_p1 <= p_read7;
    icmp_ln1549_4_fu_278_p2 <= "1" when (signed(icmp_ln1549_4_fu_278_p0) < signed(icmp_ln1549_4_fu_278_p1)) else "0";
    icmp_ln1549_5_fu_348_p2 <= "1" when (signed(select_ln65_3_fu_331_p3) < signed(select_ln65_4_fu_342_p3)) else "0";
    icmp_ln1549_6_fu_368_p2 <= "1" when (signed(select_ln65_2_reg_1541) < signed(select_ln65_5_reg_1547)) else "0";
    icmp_ln1549_7_fu_384_p2 <= "1" when (signed(p_read_2_reg_1466_pp0_iter1_reg) < signed(p_read_1_reg_1459_pp0_iter1_reg)) else "0";
    icmp_ln1549_8_fu_399_p2 <= "1" when (signed(select_ln65_6_reg_1553) < signed(select_ln65_7_fu_393_p3)) else "0";
    icmp_ln1549_fu_260_p0 <= p_read;
    icmp_ln1549_fu_260_p1 <= p_read1;
    icmp_ln1549_fu_260_p2 <= "1" when (signed(icmp_ln1549_fu_260_p0) < signed(icmp_ln1549_fu_260_p1)) else "0";
    invert_table_address0 <= zext_ln265_fu_1202_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_1_fu_494_p2 <= (xor_ln794_1_fu_488_p2 and p_Result_14_fu_480_p3);
    overflow_2_fu_537_p2 <= (xor_ln794_2_fu_531_p2 and p_Result_16_fu_523_p3);
    overflow_3_fu_580_p2 <= (xor_ln794_3_fu_574_p2 and p_Result_18_fu_566_p3);
    overflow_4_fu_623_p2 <= (xor_ln794_4_fu_617_p2 and p_Result_20_fu_609_p3);
    overflow_5_fu_666_p2 <= (xor_ln794_5_fu_660_p2 and p_Result_22_fu_652_p3);
    overflow_6_fu_709_p2 <= (xor_ln794_6_fu_703_p2 and p_Result_24_fu_695_p3);
    overflow_7_fu_752_p2 <= (xor_ln794_7_fu_746_p2 and p_Result_26_fu_738_p3);
    overflow_8_fu_795_p2 <= (xor_ln794_8_fu_789_p2 and p_Result_28_fu_781_p3);
    overflow_9_fu_838_p2 <= (xor_ln794_9_fu_832_p2 and p_Result_30_fu_824_p3);
    overflow_fu_451_p2 <= (xor_ln794_fu_445_p2 and p_Result_12_fu_437_p3);
    p_Result_11_fu_429_p3 <= ret_V_fu_423_p2(16 downto 16);
    p_Result_12_fu_437_p3 <= ret_V_fu_423_p2(15 downto 15);
    p_Result_13_fu_472_p3 <= ret_V_1_fu_466_p2(16 downto 16);
    p_Result_14_fu_480_p3 <= ret_V_1_fu_466_p2(15 downto 15);
    p_Result_15_fu_515_p3 <= ret_V_2_fu_509_p2(16 downto 16);
    p_Result_16_fu_523_p3 <= ret_V_2_fu_509_p2(15 downto 15);
    p_Result_17_fu_558_p3 <= ret_V_3_fu_552_p2(16 downto 16);
    p_Result_18_fu_566_p3 <= ret_V_3_fu_552_p2(15 downto 15);
    p_Result_19_fu_601_p3 <= ret_V_4_fu_595_p2(16 downto 16);
    p_Result_20_fu_609_p3 <= ret_V_4_fu_595_p2(15 downto 15);
    p_Result_21_fu_644_p3 <= ret_V_5_fu_638_p2(16 downto 16);
    p_Result_22_fu_652_p3 <= ret_V_5_fu_638_p2(15 downto 15);
    p_Result_23_fu_687_p3 <= ret_V_6_fu_681_p2(16 downto 16);
    p_Result_24_fu_695_p3 <= ret_V_6_fu_681_p2(15 downto 15);
    p_Result_25_fu_730_p3 <= ret_V_7_fu_724_p2(16 downto 16);
    p_Result_26_fu_738_p3 <= ret_V_7_fu_724_p2(15 downto 15);
    p_Result_27_fu_773_p3 <= ret_V_8_fu_767_p2(16 downto 16);
    p_Result_28_fu_781_p3 <= ret_V_8_fu_767_p2(15 downto 15);
    p_Result_29_fu_816_p3 <= ret_V_9_fu_810_p2(16 downto 16);
    p_Result_30_fu_824_p3 <= ret_V_9_fu_810_p2(15 downto 15);
    ret_V_1_fu_466_p2 <= std_logic_vector(signed(sext_ln1246_2_fu_463_p1) - signed(sext_ln1246_1_fu_420_p1));
    ret_V_2_fu_509_p2 <= std_logic_vector(signed(sext_ln1246_3_fu_506_p1) - signed(sext_ln1246_1_fu_420_p1));
    ret_V_3_fu_552_p2 <= std_logic_vector(signed(sext_ln1246_4_fu_549_p1) - signed(sext_ln1246_1_fu_420_p1));
    ret_V_4_fu_595_p2 <= std_logic_vector(signed(sext_ln1246_5_fu_592_p1) - signed(sext_ln1246_1_fu_420_p1));
    ret_V_5_fu_638_p2 <= std_logic_vector(signed(sext_ln1246_6_fu_635_p1) - signed(sext_ln1246_1_fu_420_p1));
    ret_V_6_fu_681_p2 <= std_logic_vector(signed(sext_ln1246_7_fu_678_p1) - signed(sext_ln1246_1_fu_420_p1));
    ret_V_7_fu_724_p2 <= std_logic_vector(signed(sext_ln1246_8_fu_721_p1) - signed(sext_ln1246_1_fu_420_p1));
    ret_V_8_fu_767_p2 <= std_logic_vector(signed(sext_ln1246_9_fu_764_p1) - signed(sext_ln1246_1_fu_420_p1));
    ret_V_9_fu_810_p2 <= std_logic_vector(signed(sext_ln1246_10_fu_807_p1) - signed(sext_ln1246_1_fu_420_p1));
    ret_V_fu_423_p2 <= std_logic_vector(signed(sext_ln1246_fu_417_p1) - signed(sext_ln1246_1_fu_420_p1));
    select_ln384_1_fu_876_p3 <= 
        ap_const_lv10_1FF when (overflow_1_fu_494_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_2_fu_902_p3 <= 
        ap_const_lv10_1FF when (overflow_2_fu_537_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_3_fu_928_p3 <= 
        ap_const_lv10_1FF when (overflow_3_fu_580_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_4_fu_954_p3 <= 
        ap_const_lv10_1FF when (overflow_4_fu_623_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_5_fu_980_p3 <= 
        ap_const_lv10_1FF when (overflow_5_fu_666_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_6_fu_1006_p3 <= 
        ap_const_lv10_1FF when (overflow_6_fu_709_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_7_fu_1032_p3 <= 
        ap_const_lv10_1FF when (overflow_7_fu_752_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_8_fu_1058_p3 <= 
        ap_const_lv10_1FF when (overflow_8_fu_795_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_9_fu_1084_p3 <= 
        ap_const_lv10_1FF when (overflow_9_fu_838_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_fu_850_p3 <= 
        ap_const_lv10_1FF when (overflow_fu_451_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln65_1_fu_300_p3 <= 
        p_read_8_reg_1503 when (xor_ln1549_1_fu_295_p2(0) = '1') else 
        p_read_7_reg_1497;
    select_ln65_2_fu_318_p3 <= 
        select_ln65_fu_289_p3 when (xor_ln1549_2_fu_312_p2(0) = '1') else 
        select_ln65_1_fu_300_p3;
    select_ln65_3_fu_331_p3 <= 
        p_read_6_reg_1491 when (xor_ln1549_3_fu_326_p2(0) = '1') else 
        p_read_5_reg_1485;
    select_ln65_4_fu_342_p3 <= 
        p_read_4_reg_1479 when (xor_ln1549_4_fu_337_p2(0) = '1') else 
        p_read_3_reg_1473;
    select_ln65_5_fu_360_p3 <= 
        select_ln65_3_fu_331_p3 when (xor_ln1549_5_fu_354_p2(0) = '1') else 
        select_ln65_4_fu_342_p3;
    select_ln65_6_fu_378_p3 <= 
        select_ln65_2_reg_1541 when (xor_ln1549_6_fu_372_p2(0) = '1') else 
        select_ln65_5_reg_1547;
    select_ln65_7_fu_393_p3 <= 
        p_read_2_reg_1466_pp0_iter2_reg when (xor_ln1549_7_fu_388_p2(0) = '1') else 
        p_read_1_reg_1459_pp0_iter2_reg;
    select_ln65_fu_289_p3 <= 
        p_read_10_reg_1515 when (xor_ln1549_fu_284_p2(0) = '1') else 
        p_read_9_reg_1509;
        sext_ln1171_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_1757),28));

        sext_ln1246_10_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_1_reg_1459_pp0_iter3_reg),17));

        sext_ln1246_1_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_reg_1564),17));

        sext_ln1246_2_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_9_reg_1509_pp0_iter3_reg),17));

        sext_ln1246_3_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_8_reg_1503_pp0_iter3_reg),17));

        sext_ln1246_4_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_7_reg_1497_pp0_iter3_reg),17));

        sext_ln1246_5_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_6_reg_1491_pp0_iter3_reg),17));

        sext_ln1246_6_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_5_reg_1485_pp0_iter3_reg),17));

        sext_ln1246_7_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_4_reg_1479_pp0_iter3_reg),17));

        sext_ln1246_8_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_3_reg_1473_pp0_iter3_reg),17));

        sext_ln1246_9_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_2_reg_1466_pp0_iter3_reg),17));

        sext_ln1246_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_10_reg_1515_pp0_iter3_reg),17));

    tmp_1_fu_884_p4 <= ret_V_1_fu_466_p2(15 downto 6);
    tmp_2_fu_910_p4 <= ret_V_2_fu_509_p2(15 downto 6);
    tmp_3_fu_936_p4 <= ret_V_3_fu_552_p2(15 downto 6);
    tmp_4_fu_962_p4 <= ret_V_4_fu_595_p2(15 downto 6);
    tmp_5_fu_988_p4 <= ret_V_5_fu_638_p2(15 downto 6);
    tmp_6_fu_1014_p4 <= ret_V_6_fu_681_p2(15 downto 6);
    tmp_7_fu_1040_p4 <= ret_V_7_fu_724_p2(15 downto 6);
    tmp_8_fu_1066_p4 <= ret_V_8_fu_767_p2(15 downto 6);
    tmp_9_fu_1092_p4 <= ret_V_9_fu_810_p2(15 downto 6);
    tmp_fu_858_p4 <= ret_V_fu_423_p2(15 downto 6);
    x_max_V_fu_410_p3 <= 
        select_ln65_6_reg_1553 when (xor_ln1549_8_fu_404_p2(0) = '1') else 
        select_ln65_7_fu_393_p3;
    xor_ln1549_1_fu_295_p2 <= (icmp_ln1549_1_reg_1526 xor ap_const_lv1_1);
    xor_ln1549_2_fu_312_p2 <= (icmp_ln1549_2_fu_306_p2 xor ap_const_lv1_1);
    xor_ln1549_3_fu_326_p2 <= (icmp_ln1549_3_reg_1531 xor ap_const_lv1_1);
    xor_ln1549_4_fu_337_p2 <= (icmp_ln1549_4_reg_1536 xor ap_const_lv1_1);
    xor_ln1549_5_fu_354_p2 <= (icmp_ln1549_5_fu_348_p2 xor ap_const_lv1_1);
    xor_ln1549_6_fu_372_p2 <= (icmp_ln1549_6_fu_368_p2 xor ap_const_lv1_1);
    xor_ln1549_7_fu_388_p2 <= (icmp_ln1549_7_reg_1559 xor ap_const_lv1_1);
    xor_ln1549_8_fu_404_p2 <= (icmp_ln1549_8_fu_399_p2 xor ap_const_lv1_1);
    xor_ln1549_fu_284_p2 <= (icmp_ln1549_reg_1521 xor ap_const_lv1_1);
    xor_ln340_1_fu_500_p2 <= (p_Result_14_fu_480_p3 xor p_Result_13_fu_472_p3);
    xor_ln340_2_fu_543_p2 <= (p_Result_16_fu_523_p3 xor p_Result_15_fu_515_p3);
    xor_ln340_3_fu_586_p2 <= (p_Result_18_fu_566_p3 xor p_Result_17_fu_558_p3);
    xor_ln340_4_fu_629_p2 <= (p_Result_20_fu_609_p3 xor p_Result_19_fu_601_p3);
    xor_ln340_5_fu_672_p2 <= (p_Result_22_fu_652_p3 xor p_Result_21_fu_644_p3);
    xor_ln340_6_fu_715_p2 <= (p_Result_24_fu_695_p3 xor p_Result_23_fu_687_p3);
    xor_ln340_7_fu_758_p2 <= (p_Result_26_fu_738_p3 xor p_Result_25_fu_730_p3);
    xor_ln340_8_fu_801_p2 <= (p_Result_28_fu_781_p3 xor p_Result_27_fu_773_p3);
    xor_ln340_9_fu_844_p2 <= (p_Result_30_fu_824_p3 xor p_Result_29_fu_816_p3);
    xor_ln340_fu_457_p2 <= (p_Result_12_fu_437_p3 xor p_Result_11_fu_429_p3);
    xor_ln794_1_fu_488_p2 <= (p_Result_13_fu_472_p3 xor ap_const_lv1_1);
    xor_ln794_2_fu_531_p2 <= (p_Result_15_fu_515_p3 xor ap_const_lv1_1);
    xor_ln794_3_fu_574_p2 <= (p_Result_17_fu_558_p3 xor ap_const_lv1_1);
    xor_ln794_4_fu_617_p2 <= (p_Result_19_fu_601_p3 xor ap_const_lv1_1);
    xor_ln794_5_fu_660_p2 <= (p_Result_21_fu_644_p3 xor ap_const_lv1_1);
    xor_ln794_6_fu_703_p2 <= (p_Result_23_fu_687_p3 xor ap_const_lv1_1);
    xor_ln794_7_fu_746_p2 <= (p_Result_25_fu_730_p3 xor ap_const_lv1_1);
    xor_ln794_8_fu_789_p2 <= (p_Result_27_fu_773_p3 xor ap_const_lv1_1);
    xor_ln794_9_fu_832_p2 <= (p_Result_29_fu_816_p3 xor ap_const_lv1_1);
    xor_ln794_fu_445_p2 <= (p_Result_11_fu_429_p3 xor ap_const_lv1_1);
    y_1_fu_894_p3 <= 
        select_ln384_1_fu_876_p3 when (xor_ln340_1_fu_500_p2(0) = '1') else 
        tmp_1_fu_884_p4;
    y_2_fu_920_p3 <= 
        select_ln384_2_fu_902_p3 when (xor_ln340_2_fu_543_p2(0) = '1') else 
        tmp_2_fu_910_p4;
    y_3_fu_946_p3 <= 
        select_ln384_3_fu_928_p3 when (xor_ln340_3_fu_586_p2(0) = '1') else 
        tmp_3_fu_936_p4;
    y_4_fu_972_p3 <= 
        select_ln384_4_fu_954_p3 when (xor_ln340_4_fu_629_p2(0) = '1') else 
        tmp_4_fu_962_p4;
    y_5_fu_998_p3 <= 
        select_ln384_5_fu_980_p3 when (xor_ln340_5_fu_672_p2(0) = '1') else 
        tmp_5_fu_988_p4;
    y_6_fu_1024_p3 <= 
        select_ln384_6_fu_1006_p3 when (xor_ln340_6_fu_715_p2(0) = '1') else 
        tmp_6_fu_1014_p4;
    y_7_fu_1050_p3 <= 
        select_ln384_7_fu_1032_p3 when (xor_ln340_7_fu_758_p2(0) = '1') else 
        tmp_7_fu_1040_p4;
    y_8_fu_1076_p3 <= 
        select_ln384_8_fu_1058_p3 when (xor_ln340_8_fu_801_p2(0) = '1') else 
        tmp_8_fu_1066_p4;
    y_9_fu_1102_p3 <= 
        select_ln384_9_fu_1084_p3 when (xor_ln340_9_fu_844_p2(0) = '1') else 
        tmp_9_fu_1092_p4;
    y_fu_868_p3 <= 
        select_ln384_fu_850_p3 when (xor_ln340_fu_457_p2(0) = '1') else 
        tmp_fu_858_p4;
    zext_ln255_1_fu_1110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_reg_1574),64));
    zext_ln255_2_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_2_reg_1579),64));
    zext_ln255_3_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_3_reg_1584),64));
    zext_ln255_4_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_4_reg_1589_pp0_iter5_reg),64));
    zext_ln255_5_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_5_reg_1594_pp0_iter5_reg),64));
    zext_ln255_6_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_6_reg_1599_pp0_iter5_reg),64));
    zext_ln255_7_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_7_reg_1604_pp0_iter5_reg),64));
    zext_ln255_8_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_8_reg_1609_pp0_iter6_reg),64));
    zext_ln255_9_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_9_reg_1614_pp0_iter6_reg),64));
    zext_ln255_fu_1122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_1569_pp0_iter5_reg),64));
    zext_ln265_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_10_reg_1747),64));
end behav;
