-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce3 : STD_LOGIC;
    signal exp_table_q3 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce4 : STD_LOGIC;
    signal exp_table_q4 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce5 : STD_LOGIC;
    signal exp_table_q5 : STD_LOGIC_VECTOR (17 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read_1_reg_899 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_1_reg_899_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_1_reg_899_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_906 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_906_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_2_reg_906_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_913 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_913_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_913_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_919 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_919_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_919_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_925 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_925_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_5_reg_925_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_931 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_931_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_6_reg_931_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_reg_937 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_1_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_1_reg_942 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_2_fu_226_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_reg_947 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_3_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_3_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_260_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_V_reg_958 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_fu_546_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_reg_963 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_reg_963_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_1_fu_572_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_1_reg_968 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_1_reg_968_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_2_fu_598_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_2_reg_973 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_2_reg_973_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_3_fu_624_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_3_reg_978 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_4_fu_650_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_4_reg_983 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_5_fu_676_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_5_reg_988 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_3_reg_1023 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3_reg_1023_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3_reg_1023_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3_reg_1023_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3_reg_1023_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_reg_1029 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_reg_1029_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_reg_1029_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_reg_1029_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_reg_1029_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_5_reg_1035 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_5_reg_1035_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_5_reg_1035_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_5_reg_1035_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_5_reg_1035_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_reg_1041 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_reg_1041_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_reg_1041_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_reg_1041_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_reg_1046 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_reg_1046_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_reg_1046_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_reg_1046_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_2_reg_1052 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_2_reg_1052_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_2_reg_1052_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_2_reg_1052_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_fu_708_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_reg_1057 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_3_fu_718_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_3_reg_1062 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_6_reg_1067 : STD_LOGIC_VECTOR (9 downto 0);
    signal inv_exp_sum_V_reg_1077 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln255_3_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_4_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_5_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_1_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1549_fu_180_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_fu_180_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_1_fu_186_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_1_fu_186_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln1549_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_1_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_197_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_208_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_2_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_2_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_3_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_3_fu_243_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_4_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_4_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_fu_267_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1246_1_fu_270_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_273_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_7_fu_279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_2_fu_313_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_316_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_9_fu_322_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_fu_330_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_1_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_3_fu_356_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_fu_359_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_11_fu_365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_2_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_4_fu_399_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_402_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_13_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_416_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_3_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_5_fu_442_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_4_fu_445_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_15_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_4_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1246_6_fu_485_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_5_fu_488_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_17_fu_494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_502_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln794_5_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_fu_528_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_536_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_1_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_1_fu_554_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_562_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_2_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_2_fu_580_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_588_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_3_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_3_fu_606_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_614_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_4_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_4_fu_632_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_640_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_5_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln384_5_fu_658_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_666_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln712_fu_708_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_fu_708_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_2_fu_714_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln712_1_fu_723_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_sum_V_fu_727_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1168_fu_752_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1171_fu_746_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1168_fu_752_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1168_1_fu_771_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1168_1_fu_771_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1168_2_fu_790_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1168_2_fu_790_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1168_3_fu_809_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1168_3_fu_809_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1168_4_fu_828_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1168_4_fu_828_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1168_5_fu_847_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1168_5_fu_847_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_18s_18s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s_exp_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s_invert_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s_exp_table
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2,
        address3 => exp_table_address3,
        ce3 => exp_table_ce3,
        q3 => exp_table_q3,
        address4 => exp_table_address4,
        ce4 => exp_table_ce4,
        q4 => exp_table_q4,
        address5 => exp_table_address5,
        ce5 => exp_table_ce5,
        q5 => exp_table_q5);

    invert_table_U : component myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s_invert_table
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_18s_18s_28_1_1_U331 : component myproject_mul_18s_18s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1168_fu_752_p0,
        din1 => r_V_reg_1041_pp0_iter9_reg,
        dout => mul_ln1168_fu_752_p2);

    mul_18s_18s_28_1_1_U332 : component myproject_mul_18s_18s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1168_1_fu_771_p0,
        din1 => r_V_1_reg_1046_pp0_iter9_reg,
        dout => mul_ln1168_1_fu_771_p2);

    mul_18s_18s_28_1_1_U333 : component myproject_mul_18s_18s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1168_2_fu_790_p0,
        din1 => r_V_2_reg_1052_pp0_iter9_reg,
        dout => mul_ln1168_2_fu_790_p2);

    mul_18s_18s_28_1_1_U334 : component myproject_mul_18s_18s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1168_3_fu_809_p0,
        din1 => r_V_3_reg_1023_pp0_iter9_reg,
        dout => mul_ln1168_3_fu_809_p2);

    mul_18s_18s_28_1_1_U335 : component myproject_mul_18s_18s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1168_4_fu_828_p0,
        din1 => r_V_4_reg_1029_pp0_iter9_reg,
        dout => mul_ln1168_4_fu_828_p2);

    mul_18s_18s_28_1_1_U336 : component myproject_mul_18s_18s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1168_5_fu_847_p0,
        din1 => r_V_5_reg_1035_pp0_iter9_reg,
        dout => mul_ln1168_5_fu_847_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln712_3_reg_1062 <= add_ln712_3_fu_718_p2;
                add_ln712_reg_1057 <= add_ln712_fu_708_p2;
                inv_exp_sum_V_reg_1077 <= invert_table_q0;
                p_read_1_reg_899_pp0_iter2_reg <= p_read_1_reg_899_pp0_iter1_reg;
                p_read_2_reg_906_pp0_iter2_reg <= p_read_2_reg_906_pp0_iter1_reg;
                p_read_3_reg_913_pp0_iter2_reg <= p_read_3_reg_913_pp0_iter1_reg;
                p_read_4_reg_919_pp0_iter2_reg <= p_read_4_reg_919_pp0_iter1_reg;
                p_read_5_reg_925_pp0_iter2_reg <= p_read_5_reg_925_pp0_iter1_reg;
                p_read_6_reg_931_pp0_iter2_reg <= p_read_6_reg_931_pp0_iter1_reg;
                r_V_1_reg_1046_pp0_iter7_reg <= r_V_1_reg_1046;
                r_V_1_reg_1046_pp0_iter8_reg <= r_V_1_reg_1046_pp0_iter7_reg;
                r_V_1_reg_1046_pp0_iter9_reg <= r_V_1_reg_1046_pp0_iter8_reg;
                r_V_2_reg_1052_pp0_iter7_reg <= r_V_2_reg_1052;
                r_V_2_reg_1052_pp0_iter8_reg <= r_V_2_reg_1052_pp0_iter7_reg;
                r_V_2_reg_1052_pp0_iter9_reg <= r_V_2_reg_1052_pp0_iter8_reg;
                r_V_3_reg_1023_pp0_iter6_reg <= r_V_3_reg_1023;
                r_V_3_reg_1023_pp0_iter7_reg <= r_V_3_reg_1023_pp0_iter6_reg;
                r_V_3_reg_1023_pp0_iter8_reg <= r_V_3_reg_1023_pp0_iter7_reg;
                r_V_3_reg_1023_pp0_iter9_reg <= r_V_3_reg_1023_pp0_iter8_reg;
                r_V_4_reg_1029_pp0_iter6_reg <= r_V_4_reg_1029;
                r_V_4_reg_1029_pp0_iter7_reg <= r_V_4_reg_1029_pp0_iter6_reg;
                r_V_4_reg_1029_pp0_iter8_reg <= r_V_4_reg_1029_pp0_iter7_reg;
                r_V_4_reg_1029_pp0_iter9_reg <= r_V_4_reg_1029_pp0_iter8_reg;
                r_V_5_reg_1035_pp0_iter6_reg <= r_V_5_reg_1035;
                r_V_5_reg_1035_pp0_iter7_reg <= r_V_5_reg_1035_pp0_iter6_reg;
                r_V_5_reg_1035_pp0_iter8_reg <= r_V_5_reg_1035_pp0_iter7_reg;
                r_V_5_reg_1035_pp0_iter9_reg <= r_V_5_reg_1035_pp0_iter8_reg;
                r_V_reg_1041_pp0_iter7_reg <= r_V_reg_1041;
                r_V_reg_1041_pp0_iter8_reg <= r_V_reg_1041_pp0_iter7_reg;
                r_V_reg_1041_pp0_iter9_reg <= r_V_reg_1041_pp0_iter8_reg;
                x_max_V_reg_958 <= x_max_V_fu_260_p3;
                y_1_reg_968 <= y_1_fu_572_p3;
                y_1_reg_968_pp0_iter4_reg <= y_1_reg_968;
                y_2_reg_973 <= y_2_fu_598_p3;
                y_2_reg_973_pp0_iter4_reg <= y_2_reg_973;
                y_3_reg_978 <= y_3_fu_624_p3;
                y_4_reg_983 <= y_4_fu_650_p3;
                y_5_reg_988 <= y_5_fu_676_p3;
                y_6_reg_1067 <= exp_sum_V_fu_727_p2(17 downto 8);
                y_reg_963 <= y_fu_546_p3;
                y_reg_963_pp0_iter4_reg <= y_reg_963;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1549_1_reg_942 <= icmp_ln1549_1_fu_186_p2;
                icmp_ln1549_3_reg_953 <= icmp_ln1549_3_fu_234_p2;
                icmp_ln1549_reg_937 <= icmp_ln1549_fu_180_p2;
                p_read_1_reg_899 <= p_read5;
                p_read_1_reg_899_pp0_iter1_reg <= p_read_1_reg_899;
                p_read_2_reg_906 <= p_read4;
                p_read_2_reg_906_pp0_iter1_reg <= p_read_2_reg_906;
                p_read_3_reg_913 <= p_read3;
                p_read_3_reg_913_pp0_iter1_reg <= p_read_3_reg_913;
                p_read_4_reg_919 <= p_read2;
                p_read_4_reg_919_pp0_iter1_reg <= p_read_4_reg_919;
                p_read_5_reg_925 <= p_read1;
                p_read_5_reg_925_pp0_iter1_reg <= p_read_5_reg_925;
                p_read_6_reg_931 <= p_read;
                p_read_6_reg_931_pp0_iter1_reg <= p_read_6_reg_931;
                select_ln65_2_reg_947 <= select_ln65_2_fu_226_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                r_V_1_reg_1046 <= exp_table_q1;
                r_V_2_reg_1052 <= exp_table_q0;
                r_V_reg_1041 <= exp_table_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                r_V_3_reg_1023 <= exp_table_q5;
                r_V_4_reg_1029 <= exp_table_q4;
                r_V_5_reg_1035 <= exp_table_q3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln712_1_fu_723_p2 <= std_logic_vector(unsigned(add_ln712_reg_1057) + unsigned(r_V_1_reg_1046));
    add_ln712_2_fu_714_p2 <= std_logic_vector(signed(r_V_4_reg_1029) + signed(r_V_5_reg_1035));
    add_ln712_3_fu_718_p2 <= std_logic_vector(unsigned(add_ln712_2_fu_714_p2) + unsigned(r_V_3_reg_1023));
    add_ln712_fu_708_p0 <= exp_table_q2;
    add_ln712_fu_708_p1 <= exp_table_q0;
    add_ln712_fu_708_p2 <= std_logic_vector(signed(add_ln712_fu_708_p0) + signed(add_ln712_fu_708_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to9)
    begin
        if (((ap_idle_pp0_0to9 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_ln1168_fu_752_p2(27 downto 12);
    ap_return_1 <= mul_ln1168_1_fu_771_p2(27 downto 12);
    ap_return_2 <= mul_ln1168_2_fu_790_p2(27 downto 12);
    ap_return_3 <= mul_ln1168_3_fu_809_p2(27 downto 12);
    ap_return_4 <= mul_ln1168_4_fu_828_p2(27 downto 12);
    ap_return_5 <= mul_ln1168_5_fu_847_p2(27 downto 12);
    exp_sum_V_fu_727_p2 <= std_logic_vector(unsigned(add_ln712_3_reg_1062) + unsigned(add_ln712_1_fu_723_p2));
    exp_table_address0 <= zext_ln255_2_fu_704_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln255_1_fu_700_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln255_fu_696_p1(10 - 1 downto 0);
    exp_table_address3 <= zext_ln255_5_fu_692_p1(10 - 1 downto 0);
    exp_table_address4 <= zext_ln255_4_fu_688_p1(10 - 1 downto 0);
    exp_table_address5 <= zext_ln255_3_fu_684_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce3_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table_ce3 <= ap_const_logic_1;
        else 
            exp_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce4_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table_ce4 <= ap_const_logic_1;
        else 
            exp_table_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce5_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table_ce5 <= ap_const_logic_1;
        else 
            exp_table_ce5 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1549_1_fu_186_p0 <= p_read2;
    icmp_ln1549_1_fu_186_p1 <= p_read3;
    icmp_ln1549_1_fu_186_p2 <= "1" when (signed(icmp_ln1549_1_fu_186_p0) < signed(icmp_ln1549_1_fu_186_p1)) else "0";
    icmp_ln1549_2_fu_214_p2 <= "1" when (signed(select_ln65_fu_197_p3) < signed(select_ln65_1_fu_208_p3)) else "0";
    icmp_ln1549_3_fu_234_p2 <= "1" when (signed(p_read_2_reg_906) < signed(p_read_1_reg_899)) else "0";
    icmp_ln1549_4_fu_249_p2 <= "1" when (signed(select_ln65_2_reg_947) < signed(select_ln65_3_fu_243_p3)) else "0";
    icmp_ln1549_fu_180_p0 <= p_read;
    icmp_ln1549_fu_180_p1 <= p_read1;
    icmp_ln1549_fu_180_p2 <= "1" when (signed(icmp_ln1549_fu_180_p0) < signed(icmp_ln1549_fu_180_p1)) else "0";
    invert_table_address0 <= zext_ln265_fu_742_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1168_1_fu_771_p0 <= sext_ln1171_fu_746_p1(18 - 1 downto 0);
    mul_ln1168_2_fu_790_p0 <= sext_ln1171_fu_746_p1(18 - 1 downto 0);
    mul_ln1168_3_fu_809_p0 <= sext_ln1171_fu_746_p1(18 - 1 downto 0);
    mul_ln1168_4_fu_828_p0 <= sext_ln1171_fu_746_p1(18 - 1 downto 0);
    mul_ln1168_5_fu_847_p0 <= sext_ln1171_fu_746_p1(18 - 1 downto 0);
    mul_ln1168_fu_752_p0 <= sext_ln1171_fu_746_p1(18 - 1 downto 0);
    overflow_1_fu_344_p2 <= (xor_ln794_1_fu_338_p2 and p_Result_10_fu_330_p3);
    overflow_2_fu_387_p2 <= (xor_ln794_2_fu_381_p2 and p_Result_12_fu_373_p3);
    overflow_3_fu_430_p2 <= (xor_ln794_3_fu_424_p2 and p_Result_14_fu_416_p3);
    overflow_4_fu_473_p2 <= (xor_ln794_4_fu_467_p2 and p_Result_16_fu_459_p3);
    overflow_5_fu_516_p2 <= (xor_ln794_5_fu_510_p2 and p_Result_18_fu_502_p3);
    overflow_fu_301_p2 <= (xor_ln794_fu_295_p2 and p_Result_8_fu_287_p3);
    p_Result_10_fu_330_p3 <= ret_V_1_fu_316_p2(15 downto 15);
    p_Result_11_fu_365_p3 <= ret_V_2_fu_359_p2(16 downto 16);
    p_Result_12_fu_373_p3 <= ret_V_2_fu_359_p2(15 downto 15);
    p_Result_13_fu_408_p3 <= ret_V_3_fu_402_p2(16 downto 16);
    p_Result_14_fu_416_p3 <= ret_V_3_fu_402_p2(15 downto 15);
    p_Result_15_fu_451_p3 <= ret_V_4_fu_445_p2(16 downto 16);
    p_Result_16_fu_459_p3 <= ret_V_4_fu_445_p2(15 downto 15);
    p_Result_17_fu_494_p3 <= ret_V_5_fu_488_p2(16 downto 16);
    p_Result_18_fu_502_p3 <= ret_V_5_fu_488_p2(15 downto 15);
    p_Result_7_fu_279_p3 <= ret_V_fu_273_p2(16 downto 16);
    p_Result_8_fu_287_p3 <= ret_V_fu_273_p2(15 downto 15);
    p_Result_9_fu_322_p3 <= ret_V_1_fu_316_p2(16 downto 16);
    ret_V_1_fu_316_p2 <= std_logic_vector(signed(sext_ln1246_2_fu_313_p1) - signed(sext_ln1246_1_fu_270_p1));
    ret_V_2_fu_359_p2 <= std_logic_vector(signed(sext_ln1246_3_fu_356_p1) - signed(sext_ln1246_1_fu_270_p1));
    ret_V_3_fu_402_p2 <= std_logic_vector(signed(sext_ln1246_4_fu_399_p1) - signed(sext_ln1246_1_fu_270_p1));
    ret_V_4_fu_445_p2 <= std_logic_vector(signed(sext_ln1246_5_fu_442_p1) - signed(sext_ln1246_1_fu_270_p1));
    ret_V_5_fu_488_p2 <= std_logic_vector(signed(sext_ln1246_6_fu_485_p1) - signed(sext_ln1246_1_fu_270_p1));
    ret_V_fu_273_p2 <= std_logic_vector(signed(sext_ln1246_fu_267_p1) - signed(sext_ln1246_1_fu_270_p1));
    select_ln384_1_fu_554_p3 <= 
        ap_const_lv10_1FF when (overflow_1_fu_344_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_2_fu_580_p3 <= 
        ap_const_lv10_1FF when (overflow_2_fu_387_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_3_fu_606_p3 <= 
        ap_const_lv10_1FF when (overflow_3_fu_430_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_4_fu_632_p3 <= 
        ap_const_lv10_1FF when (overflow_4_fu_473_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_5_fu_658_p3 <= 
        ap_const_lv10_1FF when (overflow_5_fu_516_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln384_fu_528_p3 <= 
        ap_const_lv10_1FF when (overflow_fu_301_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln65_1_fu_208_p3 <= 
        p_read_4_reg_919 when (xor_ln1549_1_fu_203_p2(0) = '1') else 
        p_read_3_reg_913;
    select_ln65_2_fu_226_p3 <= 
        select_ln65_fu_197_p3 when (xor_ln1549_2_fu_220_p2(0) = '1') else 
        select_ln65_1_fu_208_p3;
    select_ln65_3_fu_243_p3 <= 
        p_read_2_reg_906_pp0_iter1_reg when (xor_ln1549_3_fu_238_p2(0) = '1') else 
        p_read_1_reg_899_pp0_iter1_reg;
    select_ln65_fu_197_p3 <= 
        p_read_6_reg_931 when (xor_ln1549_fu_192_p2(0) = '1') else 
        p_read_5_reg_925;
        sext_ln1171_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_1077),28));

        sext_ln1246_1_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_reg_958),17));

        sext_ln1246_2_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_5_reg_925_pp0_iter2_reg),17));

        sext_ln1246_3_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_4_reg_919_pp0_iter2_reg),17));

        sext_ln1246_4_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_3_reg_913_pp0_iter2_reg),17));

        sext_ln1246_5_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_2_reg_906_pp0_iter2_reg),17));

        sext_ln1246_6_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_1_reg_899_pp0_iter2_reg),17));

        sext_ln1246_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_6_reg_931_pp0_iter2_reg),17));

    tmp_1_fu_562_p4 <= ret_V_1_fu_316_p2(15 downto 6);
    tmp_2_fu_588_p4 <= ret_V_2_fu_359_p2(15 downto 6);
    tmp_3_fu_614_p4 <= ret_V_3_fu_402_p2(15 downto 6);
    tmp_4_fu_640_p4 <= ret_V_4_fu_445_p2(15 downto 6);
    tmp_5_fu_666_p4 <= ret_V_5_fu_488_p2(15 downto 6);
    tmp_fu_536_p4 <= ret_V_fu_273_p2(15 downto 6);
    x_max_V_fu_260_p3 <= 
        select_ln65_2_reg_947 when (xor_ln1549_4_fu_254_p2(0) = '1') else 
        select_ln65_3_fu_243_p3;
    xor_ln1549_1_fu_203_p2 <= (icmp_ln1549_1_reg_942 xor ap_const_lv1_1);
    xor_ln1549_2_fu_220_p2 <= (icmp_ln1549_2_fu_214_p2 xor ap_const_lv1_1);
    xor_ln1549_3_fu_238_p2 <= (icmp_ln1549_3_reg_953 xor ap_const_lv1_1);
    xor_ln1549_4_fu_254_p2 <= (icmp_ln1549_4_fu_249_p2 xor ap_const_lv1_1);
    xor_ln1549_fu_192_p2 <= (icmp_ln1549_reg_937 xor ap_const_lv1_1);
    xor_ln340_1_fu_350_p2 <= (p_Result_9_fu_322_p3 xor p_Result_10_fu_330_p3);
    xor_ln340_2_fu_393_p2 <= (p_Result_12_fu_373_p3 xor p_Result_11_fu_365_p3);
    xor_ln340_3_fu_436_p2 <= (p_Result_14_fu_416_p3 xor p_Result_13_fu_408_p3);
    xor_ln340_4_fu_479_p2 <= (p_Result_16_fu_459_p3 xor p_Result_15_fu_451_p3);
    xor_ln340_5_fu_522_p2 <= (p_Result_18_fu_502_p3 xor p_Result_17_fu_494_p3);
    xor_ln340_fu_307_p2 <= (p_Result_8_fu_287_p3 xor p_Result_7_fu_279_p3);
    xor_ln794_1_fu_338_p2 <= (p_Result_9_fu_322_p3 xor ap_const_lv1_1);
    xor_ln794_2_fu_381_p2 <= (p_Result_11_fu_365_p3 xor ap_const_lv1_1);
    xor_ln794_3_fu_424_p2 <= (p_Result_13_fu_408_p3 xor ap_const_lv1_1);
    xor_ln794_4_fu_467_p2 <= (p_Result_15_fu_451_p3 xor ap_const_lv1_1);
    xor_ln794_5_fu_510_p2 <= (p_Result_17_fu_494_p3 xor ap_const_lv1_1);
    xor_ln794_fu_295_p2 <= (p_Result_7_fu_279_p3 xor ap_const_lv1_1);
    y_1_fu_572_p3 <= 
        select_ln384_1_fu_554_p3 when (xor_ln340_1_fu_350_p2(0) = '1') else 
        tmp_1_fu_562_p4;
    y_2_fu_598_p3 <= 
        select_ln384_2_fu_580_p3 when (xor_ln340_2_fu_393_p2(0) = '1') else 
        tmp_2_fu_588_p4;
    y_3_fu_624_p3 <= 
        select_ln384_3_fu_606_p3 when (xor_ln340_3_fu_436_p2(0) = '1') else 
        tmp_3_fu_614_p4;
    y_4_fu_650_p3 <= 
        select_ln384_4_fu_632_p3 when (xor_ln340_4_fu_479_p2(0) = '1') else 
        tmp_4_fu_640_p4;
    y_5_fu_676_p3 <= 
        select_ln384_5_fu_658_p3 when (xor_ln340_5_fu_522_p2(0) = '1') else 
        tmp_5_fu_666_p4;
    y_fu_546_p3 <= 
        select_ln384_fu_528_p3 when (xor_ln340_fu_307_p2(0) = '1') else 
        tmp_fu_536_p4;
    zext_ln255_1_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_reg_968_pp0_iter4_reg),64));
    zext_ln255_2_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_2_reg_973_pp0_iter4_reg),64));
    zext_ln255_3_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_3_reg_978),64));
    zext_ln255_4_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_4_reg_983),64));
    zext_ln255_5_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_5_reg_988),64));
    zext_ln255_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_963_pp0_iter4_reg),64));
    zext_ln265_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_6_reg_1067),64));
end behav;
