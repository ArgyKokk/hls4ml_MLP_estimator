// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
input  [15:0] p_read3;
input  [15:0] p_read4;
input  [15:0] p_read5;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;
output  [15:0] ap_return_5;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_subdone;
wire   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [17:0] exp_table_q0;
wire   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [17:0] exp_table_q1;
wire   [9:0] exp_table_address2;
reg    exp_table_ce2;
wire   [17:0] exp_table_q2;
wire   [9:0] exp_table_address3;
reg    exp_table_ce3;
wire   [17:0] exp_table_q3;
wire   [9:0] exp_table_address4;
reg    exp_table_ce4;
wire   [17:0] exp_table_q4;
wire   [9:0] exp_table_address5;
reg    exp_table_ce5;
wire   [17:0] exp_table_q5;
wire   [9:0] invert_table_address0;
reg    invert_table_ce0;
wire   [17:0] invert_table_q0;
reg  signed [15:0] p_read_1_reg_899;
wire    ap_block_pp0_stage0_11001;
reg  signed [15:0] p_read_1_reg_899_pp0_iter1_reg;
reg  signed [15:0] p_read_1_reg_899_pp0_iter2_reg;
reg  signed [15:0] p_read_2_reg_906;
reg  signed [15:0] p_read_2_reg_906_pp0_iter1_reg;
reg  signed [15:0] p_read_2_reg_906_pp0_iter2_reg;
reg  signed [15:0] p_read_3_reg_913;
reg  signed [15:0] p_read_3_reg_913_pp0_iter1_reg;
reg  signed [15:0] p_read_3_reg_913_pp0_iter2_reg;
reg  signed [15:0] p_read_4_reg_919;
reg  signed [15:0] p_read_4_reg_919_pp0_iter1_reg;
reg  signed [15:0] p_read_4_reg_919_pp0_iter2_reg;
reg  signed [15:0] p_read_5_reg_925;
reg  signed [15:0] p_read_5_reg_925_pp0_iter1_reg;
reg  signed [15:0] p_read_5_reg_925_pp0_iter2_reg;
reg  signed [15:0] p_read_6_reg_931;
reg  signed [15:0] p_read_6_reg_931_pp0_iter1_reg;
reg  signed [15:0] p_read_6_reg_931_pp0_iter2_reg;
wire   [0:0] icmp_ln1549_fu_180_p2;
reg   [0:0] icmp_ln1549_reg_937;
wire   [0:0] icmp_ln1549_1_fu_186_p2;
reg   [0:0] icmp_ln1549_1_reg_942;
wire   [15:0] select_ln65_2_fu_226_p3;
reg   [15:0] select_ln65_2_reg_947;
wire   [0:0] icmp_ln1549_3_fu_234_p2;
reg   [0:0] icmp_ln1549_3_reg_953;
wire   [15:0] x_max_V_fu_260_p3;
reg   [15:0] x_max_V_reg_958;
wire   [9:0] y_fu_546_p3;
reg   [9:0] y_reg_963;
reg   [9:0] y_reg_963_pp0_iter4_reg;
wire   [9:0] y_1_fu_572_p3;
reg   [9:0] y_1_reg_968;
reg   [9:0] y_1_reg_968_pp0_iter4_reg;
wire   [9:0] y_2_fu_598_p3;
reg   [9:0] y_2_reg_973;
reg   [9:0] y_2_reg_973_pp0_iter4_reg;
wire   [9:0] y_3_fu_624_p3;
reg   [9:0] y_3_reg_978;
wire   [9:0] y_4_fu_650_p3;
reg   [9:0] y_4_reg_983;
wire   [9:0] y_5_fu_676_p3;
reg   [9:0] y_5_reg_988;
reg  signed [17:0] r_V_3_reg_1023;
reg  signed [17:0] r_V_3_reg_1023_pp0_iter6_reg;
reg  signed [17:0] r_V_3_reg_1023_pp0_iter7_reg;
reg  signed [17:0] r_V_3_reg_1023_pp0_iter8_reg;
reg  signed [17:0] r_V_3_reg_1023_pp0_iter9_reg;
reg  signed [17:0] r_V_4_reg_1029;
reg  signed [17:0] r_V_4_reg_1029_pp0_iter6_reg;
reg  signed [17:0] r_V_4_reg_1029_pp0_iter7_reg;
reg  signed [17:0] r_V_4_reg_1029_pp0_iter8_reg;
reg  signed [17:0] r_V_4_reg_1029_pp0_iter9_reg;
reg  signed [17:0] r_V_5_reg_1035;
reg  signed [17:0] r_V_5_reg_1035_pp0_iter6_reg;
reg  signed [17:0] r_V_5_reg_1035_pp0_iter7_reg;
reg  signed [17:0] r_V_5_reg_1035_pp0_iter8_reg;
reg  signed [17:0] r_V_5_reg_1035_pp0_iter9_reg;
reg  signed [17:0] r_V_reg_1041;
reg  signed [17:0] r_V_reg_1041_pp0_iter7_reg;
reg  signed [17:0] r_V_reg_1041_pp0_iter8_reg;
reg  signed [17:0] r_V_reg_1041_pp0_iter9_reg;
reg  signed [17:0] r_V_1_reg_1046;
reg  signed [17:0] r_V_1_reg_1046_pp0_iter7_reg;
reg  signed [17:0] r_V_1_reg_1046_pp0_iter8_reg;
reg  signed [17:0] r_V_1_reg_1046_pp0_iter9_reg;
reg  signed [17:0] r_V_2_reg_1052;
reg  signed [17:0] r_V_2_reg_1052_pp0_iter7_reg;
reg  signed [17:0] r_V_2_reg_1052_pp0_iter8_reg;
reg  signed [17:0] r_V_2_reg_1052_pp0_iter9_reg;
wire   [17:0] add_ln712_fu_708_p2;
reg   [17:0] add_ln712_reg_1057;
wire   [17:0] add_ln712_3_fu_718_p2;
reg   [17:0] add_ln712_3_reg_1062;
reg   [9:0] y_6_reg_1067;
reg   [17:0] inv_exp_sum_V_reg_1077;
wire   [63:0] zext_ln255_3_fu_684_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln255_4_fu_688_p1;
wire   [63:0] zext_ln255_5_fu_692_p1;
wire   [63:0] zext_ln255_fu_696_p1;
wire   [63:0] zext_ln255_1_fu_700_p1;
wire   [63:0] zext_ln255_2_fu_704_p1;
wire   [63:0] zext_ln265_fu_742_p1;
wire  signed [15:0] icmp_ln1549_fu_180_p0;
wire  signed [15:0] icmp_ln1549_fu_180_p1;
wire  signed [15:0] icmp_ln1549_1_fu_186_p0;
wire  signed [15:0] icmp_ln1549_1_fu_186_p1;
wire   [0:0] xor_ln1549_fu_192_p2;
wire   [0:0] xor_ln1549_1_fu_203_p2;
wire   [15:0] select_ln65_fu_197_p3;
wire   [15:0] select_ln65_1_fu_208_p3;
wire   [0:0] icmp_ln1549_2_fu_214_p2;
wire   [0:0] xor_ln1549_2_fu_220_p2;
wire   [0:0] xor_ln1549_3_fu_238_p2;
wire   [15:0] select_ln65_3_fu_243_p3;
wire   [0:0] icmp_ln1549_4_fu_249_p2;
wire   [0:0] xor_ln1549_4_fu_254_p2;
wire  signed [16:0] sext_ln1246_fu_267_p1;
wire  signed [16:0] sext_ln1246_1_fu_270_p1;
wire   [16:0] ret_V_fu_273_p2;
wire   [0:0] p_Result_7_fu_279_p3;
wire   [0:0] p_Result_8_fu_287_p3;
wire   [0:0] xor_ln794_fu_295_p2;
wire  signed [16:0] sext_ln1246_2_fu_313_p1;
wire   [16:0] ret_V_1_fu_316_p2;
wire   [0:0] p_Result_9_fu_322_p3;
wire   [0:0] p_Result_10_fu_330_p3;
wire   [0:0] xor_ln794_1_fu_338_p2;
wire  signed [16:0] sext_ln1246_3_fu_356_p1;
wire   [16:0] ret_V_2_fu_359_p2;
wire   [0:0] p_Result_11_fu_365_p3;
wire   [0:0] p_Result_12_fu_373_p3;
wire   [0:0] xor_ln794_2_fu_381_p2;
wire  signed [16:0] sext_ln1246_4_fu_399_p1;
wire   [16:0] ret_V_3_fu_402_p2;
wire   [0:0] p_Result_13_fu_408_p3;
wire   [0:0] p_Result_14_fu_416_p3;
wire   [0:0] xor_ln794_3_fu_424_p2;
wire  signed [16:0] sext_ln1246_5_fu_442_p1;
wire   [16:0] ret_V_4_fu_445_p2;
wire   [0:0] p_Result_15_fu_451_p3;
wire   [0:0] p_Result_16_fu_459_p3;
wire   [0:0] xor_ln794_4_fu_467_p2;
wire  signed [16:0] sext_ln1246_6_fu_485_p1;
wire   [16:0] ret_V_5_fu_488_p2;
wire   [0:0] p_Result_17_fu_494_p3;
wire   [0:0] p_Result_18_fu_502_p3;
wire   [0:0] xor_ln794_5_fu_510_p2;
wire   [0:0] overflow_fu_301_p2;
wire   [0:0] xor_ln340_fu_307_p2;
wire   [9:0] select_ln384_fu_528_p3;
wire   [9:0] tmp_fu_536_p4;
wire   [0:0] overflow_1_fu_344_p2;
wire   [0:0] xor_ln340_1_fu_350_p2;
wire   [9:0] select_ln384_1_fu_554_p3;
wire   [9:0] tmp_1_fu_562_p4;
wire   [0:0] overflow_2_fu_387_p2;
wire   [0:0] xor_ln340_2_fu_393_p2;
wire   [9:0] select_ln384_2_fu_580_p3;
wire   [9:0] tmp_2_fu_588_p4;
wire   [0:0] overflow_3_fu_430_p2;
wire   [0:0] xor_ln340_3_fu_436_p2;
wire   [9:0] select_ln384_3_fu_606_p3;
wire   [9:0] tmp_3_fu_614_p4;
wire   [0:0] overflow_4_fu_473_p2;
wire   [0:0] xor_ln340_4_fu_479_p2;
wire   [9:0] select_ln384_4_fu_632_p3;
wire   [9:0] tmp_4_fu_640_p4;
wire   [0:0] overflow_5_fu_516_p2;
wire   [0:0] xor_ln340_5_fu_522_p2;
wire   [9:0] select_ln384_5_fu_658_p3;
wire   [9:0] tmp_5_fu_666_p4;
wire  signed [17:0] add_ln712_fu_708_p0;
wire  signed [17:0] add_ln712_fu_708_p1;
wire   [17:0] add_ln712_2_fu_714_p2;
wire   [17:0] add_ln712_1_fu_723_p2;
wire   [17:0] exp_sum_V_fu_727_p2;
wire  signed [17:0] mul_ln1168_fu_752_p0;
wire  signed [27:0] sext_ln1171_fu_746_p1;
wire   [27:0] mul_ln1168_fu_752_p2;
wire  signed [17:0] mul_ln1168_1_fu_771_p0;
wire   [27:0] mul_ln1168_1_fu_771_p2;
wire  signed [17:0] mul_ln1168_2_fu_790_p0;
wire   [27:0] mul_ln1168_2_fu_790_p2;
wire  signed [17:0] mul_ln1168_3_fu_809_p0;
wire   [27:0] mul_ln1168_3_fu_809_p2;
wire  signed [17:0] mul_ln1168_4_fu_828_p0;
wire   [27:0] mul_ln1168_4_fu_828_p2;
wire  signed [17:0] mul_ln1168_5_fu_847_p0;
wire   [27:0] mul_ln1168_5_fu_847_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to9;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s_exp_table #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1),
    .address2(exp_table_address2),
    .ce2(exp_table_ce2),
    .q2(exp_table_q2),
    .address3(exp_table_address3),
    .ce3(exp_table_ce3),
    .q3(exp_table_q3),
    .address4(exp_table_address4),
    .ce4(exp_table_ce4),
    .q4(exp_table_q4),
    .address5(exp_table_address5),
    .ce5(exp_table_ce5),
    .q5(exp_table_q5)
);

myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s_invert_table #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table_address0),
    .ce0(invert_table_ce0),
    .q0(invert_table_q0)
);

myproject_mul_18s_18s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 28 ))
mul_18s_18s_28_1_1_U331(
    .din0(mul_ln1168_fu_752_p0),
    .din1(r_V_reg_1041_pp0_iter9_reg),
    .dout(mul_ln1168_fu_752_p2)
);

myproject_mul_18s_18s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 28 ))
mul_18s_18s_28_1_1_U332(
    .din0(mul_ln1168_1_fu_771_p0),
    .din1(r_V_1_reg_1046_pp0_iter9_reg),
    .dout(mul_ln1168_1_fu_771_p2)
);

myproject_mul_18s_18s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 28 ))
mul_18s_18s_28_1_1_U333(
    .din0(mul_ln1168_2_fu_790_p0),
    .din1(r_V_2_reg_1052_pp0_iter9_reg),
    .dout(mul_ln1168_2_fu_790_p2)
);

myproject_mul_18s_18s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 28 ))
mul_18s_18s_28_1_1_U334(
    .din0(mul_ln1168_3_fu_809_p0),
    .din1(r_V_3_reg_1023_pp0_iter9_reg),
    .dout(mul_ln1168_3_fu_809_p2)
);

myproject_mul_18s_18s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 28 ))
mul_18s_18s_28_1_1_U335(
    .din0(mul_ln1168_4_fu_828_p0),
    .din1(r_V_4_reg_1029_pp0_iter9_reg),
    .dout(mul_ln1168_4_fu_828_p2)
);

myproject_mul_18s_18s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 28 ))
mul_18s_18s_28_1_1_U336(
    .din0(mul_ln1168_5_fu_847_p0),
    .din1(r_V_5_reg_1035_pp0_iter9_reg),
    .dout(mul_ln1168_5_fu_847_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln712_3_reg_1062 <= add_ln712_3_fu_718_p2;
        add_ln712_reg_1057 <= add_ln712_fu_708_p2;
        inv_exp_sum_V_reg_1077 <= invert_table_q0;
        p_read_1_reg_899_pp0_iter2_reg <= p_read_1_reg_899_pp0_iter1_reg;
        p_read_2_reg_906_pp0_iter2_reg <= p_read_2_reg_906_pp0_iter1_reg;
        p_read_3_reg_913_pp0_iter2_reg <= p_read_3_reg_913_pp0_iter1_reg;
        p_read_4_reg_919_pp0_iter2_reg <= p_read_4_reg_919_pp0_iter1_reg;
        p_read_5_reg_925_pp0_iter2_reg <= p_read_5_reg_925_pp0_iter1_reg;
        p_read_6_reg_931_pp0_iter2_reg <= p_read_6_reg_931_pp0_iter1_reg;
        r_V_1_reg_1046_pp0_iter7_reg <= r_V_1_reg_1046;
        r_V_1_reg_1046_pp0_iter8_reg <= r_V_1_reg_1046_pp0_iter7_reg;
        r_V_1_reg_1046_pp0_iter9_reg <= r_V_1_reg_1046_pp0_iter8_reg;
        r_V_2_reg_1052_pp0_iter7_reg <= r_V_2_reg_1052;
        r_V_2_reg_1052_pp0_iter8_reg <= r_V_2_reg_1052_pp0_iter7_reg;
        r_V_2_reg_1052_pp0_iter9_reg <= r_V_2_reg_1052_pp0_iter8_reg;
        r_V_3_reg_1023_pp0_iter6_reg <= r_V_3_reg_1023;
        r_V_3_reg_1023_pp0_iter7_reg <= r_V_3_reg_1023_pp0_iter6_reg;
        r_V_3_reg_1023_pp0_iter8_reg <= r_V_3_reg_1023_pp0_iter7_reg;
        r_V_3_reg_1023_pp0_iter9_reg <= r_V_3_reg_1023_pp0_iter8_reg;
        r_V_4_reg_1029_pp0_iter6_reg <= r_V_4_reg_1029;
        r_V_4_reg_1029_pp0_iter7_reg <= r_V_4_reg_1029_pp0_iter6_reg;
        r_V_4_reg_1029_pp0_iter8_reg <= r_V_4_reg_1029_pp0_iter7_reg;
        r_V_4_reg_1029_pp0_iter9_reg <= r_V_4_reg_1029_pp0_iter8_reg;
        r_V_5_reg_1035_pp0_iter6_reg <= r_V_5_reg_1035;
        r_V_5_reg_1035_pp0_iter7_reg <= r_V_5_reg_1035_pp0_iter6_reg;
        r_V_5_reg_1035_pp0_iter8_reg <= r_V_5_reg_1035_pp0_iter7_reg;
        r_V_5_reg_1035_pp0_iter9_reg <= r_V_5_reg_1035_pp0_iter8_reg;
        r_V_reg_1041_pp0_iter7_reg <= r_V_reg_1041;
        r_V_reg_1041_pp0_iter8_reg <= r_V_reg_1041_pp0_iter7_reg;
        r_V_reg_1041_pp0_iter9_reg <= r_V_reg_1041_pp0_iter8_reg;
        x_max_V_reg_958 <= x_max_V_fu_260_p3;
        y_1_reg_968 <= y_1_fu_572_p3;
        y_1_reg_968_pp0_iter4_reg <= y_1_reg_968;
        y_2_reg_973 <= y_2_fu_598_p3;
        y_2_reg_973_pp0_iter4_reg <= y_2_reg_973;
        y_3_reg_978 <= y_3_fu_624_p3;
        y_4_reg_983 <= y_4_fu_650_p3;
        y_5_reg_988 <= y_5_fu_676_p3;
        y_6_reg_1067 <= {{exp_sum_V_fu_727_p2[17:8]}};
        y_reg_963 <= y_fu_546_p3;
        y_reg_963_pp0_iter4_reg <= y_reg_963;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1549_1_reg_942 <= icmp_ln1549_1_fu_186_p2;
        icmp_ln1549_3_reg_953 <= icmp_ln1549_3_fu_234_p2;
        icmp_ln1549_reg_937 <= icmp_ln1549_fu_180_p2;
        p_read_1_reg_899 <= p_read5;
        p_read_1_reg_899_pp0_iter1_reg <= p_read_1_reg_899;
        p_read_2_reg_906 <= p_read4;
        p_read_2_reg_906_pp0_iter1_reg <= p_read_2_reg_906;
        p_read_3_reg_913 <= p_read3;
        p_read_3_reg_913_pp0_iter1_reg <= p_read_3_reg_913;
        p_read_4_reg_919 <= p_read2;
        p_read_4_reg_919_pp0_iter1_reg <= p_read_4_reg_919;
        p_read_5_reg_925 <= p_read1;
        p_read_5_reg_925_pp0_iter1_reg <= p_read_5_reg_925;
        p_read_6_reg_931 <= p_read;
        p_read_6_reg_931_pp0_iter1_reg <= p_read_6_reg_931;
        select_ln65_2_reg_947 <= select_ln65_2_fu_226_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        r_V_1_reg_1046 <= exp_table_q1;
        r_V_2_reg_1052 <= exp_table_q0;
        r_V_reg_1041 <= exp_table_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        r_V_3_reg_1023 <= exp_table_q5;
        r_V_4_reg_1029 <= exp_table_q4;
        r_V_5_reg_1035 <= exp_table_q3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to9 = 1'b1;
    end else begin
        ap_idle_pp0_0to9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to9 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce2 = 1'b1;
    end else begin
        exp_table_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table_ce3 = 1'b1;
    end else begin
        exp_table_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table_ce4 = 1'b1;
    end else begin
        exp_table_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exp_table_ce5 = 1'b1;
    end else begin
        exp_table_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        invert_table_ce0 = 1'b1;
    end else begin
        invert_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln712_1_fu_723_p2 = ($signed(add_ln712_reg_1057) + $signed(r_V_1_reg_1046));

assign add_ln712_2_fu_714_p2 = ($signed(r_V_4_reg_1029) + $signed(r_V_5_reg_1035));

assign add_ln712_3_fu_718_p2 = ($signed(add_ln712_2_fu_714_p2) + $signed(r_V_3_reg_1023));

assign add_ln712_fu_708_p0 = exp_table_q2;

assign add_ln712_fu_708_p1 = exp_table_q0;

assign add_ln712_fu_708_p2 = ($signed(add_ln712_fu_708_p0) + $signed(add_ln712_fu_708_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{mul_ln1168_fu_752_p2[27:12]}};

assign ap_return_1 = {{mul_ln1168_1_fu_771_p2[27:12]}};

assign ap_return_2 = {{mul_ln1168_2_fu_790_p2[27:12]}};

assign ap_return_3 = {{mul_ln1168_3_fu_809_p2[27:12]}};

assign ap_return_4 = {{mul_ln1168_4_fu_828_p2[27:12]}};

assign ap_return_5 = {{mul_ln1168_5_fu_847_p2[27:12]}};

assign exp_sum_V_fu_727_p2 = (add_ln712_3_reg_1062 + add_ln712_1_fu_723_p2);

assign exp_table_address0 = zext_ln255_2_fu_704_p1;

assign exp_table_address1 = zext_ln255_1_fu_700_p1;

assign exp_table_address2 = zext_ln255_fu_696_p1;

assign exp_table_address3 = zext_ln255_5_fu_692_p1;

assign exp_table_address4 = zext_ln255_4_fu_688_p1;

assign exp_table_address5 = zext_ln255_3_fu_684_p1;

assign icmp_ln1549_1_fu_186_p0 = p_read2;

assign icmp_ln1549_1_fu_186_p1 = p_read3;

assign icmp_ln1549_1_fu_186_p2 = (($signed(icmp_ln1549_1_fu_186_p0) < $signed(icmp_ln1549_1_fu_186_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1549_2_fu_214_p2 = (($signed(select_ln65_fu_197_p3) < $signed(select_ln65_1_fu_208_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1549_3_fu_234_p2 = (($signed(p_read_2_reg_906) < $signed(p_read_1_reg_899)) ? 1'b1 : 1'b0);

assign icmp_ln1549_4_fu_249_p2 = (($signed(select_ln65_2_reg_947) < $signed(select_ln65_3_fu_243_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1549_fu_180_p0 = p_read;

assign icmp_ln1549_fu_180_p1 = p_read1;

assign icmp_ln1549_fu_180_p2 = (($signed(icmp_ln1549_fu_180_p0) < $signed(icmp_ln1549_fu_180_p1)) ? 1'b1 : 1'b0);

assign invert_table_address0 = zext_ln265_fu_742_p1;

assign mul_ln1168_1_fu_771_p0 = sext_ln1171_fu_746_p1;

assign mul_ln1168_2_fu_790_p0 = sext_ln1171_fu_746_p1;

assign mul_ln1168_3_fu_809_p0 = sext_ln1171_fu_746_p1;

assign mul_ln1168_4_fu_828_p0 = sext_ln1171_fu_746_p1;

assign mul_ln1168_5_fu_847_p0 = sext_ln1171_fu_746_p1;

assign mul_ln1168_fu_752_p0 = sext_ln1171_fu_746_p1;

assign overflow_1_fu_344_p2 = (xor_ln794_1_fu_338_p2 & p_Result_10_fu_330_p3);

assign overflow_2_fu_387_p2 = (xor_ln794_2_fu_381_p2 & p_Result_12_fu_373_p3);

assign overflow_3_fu_430_p2 = (xor_ln794_3_fu_424_p2 & p_Result_14_fu_416_p3);

assign overflow_4_fu_473_p2 = (xor_ln794_4_fu_467_p2 & p_Result_16_fu_459_p3);

assign overflow_5_fu_516_p2 = (xor_ln794_5_fu_510_p2 & p_Result_18_fu_502_p3);

assign overflow_fu_301_p2 = (xor_ln794_fu_295_p2 & p_Result_8_fu_287_p3);

assign p_Result_10_fu_330_p3 = ret_V_1_fu_316_p2[32'd15];

assign p_Result_11_fu_365_p3 = ret_V_2_fu_359_p2[32'd16];

assign p_Result_12_fu_373_p3 = ret_V_2_fu_359_p2[32'd15];

assign p_Result_13_fu_408_p3 = ret_V_3_fu_402_p2[32'd16];

assign p_Result_14_fu_416_p3 = ret_V_3_fu_402_p2[32'd15];

assign p_Result_15_fu_451_p3 = ret_V_4_fu_445_p2[32'd16];

assign p_Result_16_fu_459_p3 = ret_V_4_fu_445_p2[32'd15];

assign p_Result_17_fu_494_p3 = ret_V_5_fu_488_p2[32'd16];

assign p_Result_18_fu_502_p3 = ret_V_5_fu_488_p2[32'd15];

assign p_Result_7_fu_279_p3 = ret_V_fu_273_p2[32'd16];

assign p_Result_8_fu_287_p3 = ret_V_fu_273_p2[32'd15];

assign p_Result_9_fu_322_p3 = ret_V_1_fu_316_p2[32'd16];

assign ret_V_1_fu_316_p2 = ($signed(sext_ln1246_2_fu_313_p1) - $signed(sext_ln1246_1_fu_270_p1));

assign ret_V_2_fu_359_p2 = ($signed(sext_ln1246_3_fu_356_p1) - $signed(sext_ln1246_1_fu_270_p1));

assign ret_V_3_fu_402_p2 = ($signed(sext_ln1246_4_fu_399_p1) - $signed(sext_ln1246_1_fu_270_p1));

assign ret_V_4_fu_445_p2 = ($signed(sext_ln1246_5_fu_442_p1) - $signed(sext_ln1246_1_fu_270_p1));

assign ret_V_5_fu_488_p2 = ($signed(sext_ln1246_6_fu_485_p1) - $signed(sext_ln1246_1_fu_270_p1));

assign ret_V_fu_273_p2 = ($signed(sext_ln1246_fu_267_p1) - $signed(sext_ln1246_1_fu_270_p1));

assign select_ln384_1_fu_554_p3 = ((overflow_1_fu_344_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln384_2_fu_580_p3 = ((overflow_2_fu_387_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln384_3_fu_606_p3 = ((overflow_3_fu_430_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln384_4_fu_632_p3 = ((overflow_4_fu_473_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln384_5_fu_658_p3 = ((overflow_5_fu_516_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln384_fu_528_p3 = ((overflow_fu_301_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln65_1_fu_208_p3 = ((xor_ln1549_1_fu_203_p2[0:0] == 1'b1) ? p_read_4_reg_919 : p_read_3_reg_913);

assign select_ln65_2_fu_226_p3 = ((xor_ln1549_2_fu_220_p2[0:0] == 1'b1) ? select_ln65_fu_197_p3 : select_ln65_1_fu_208_p3);

assign select_ln65_3_fu_243_p3 = ((xor_ln1549_3_fu_238_p2[0:0] == 1'b1) ? p_read_2_reg_906_pp0_iter1_reg : p_read_1_reg_899_pp0_iter1_reg);

assign select_ln65_fu_197_p3 = ((xor_ln1549_fu_192_p2[0:0] == 1'b1) ? p_read_6_reg_931 : p_read_5_reg_925);

assign sext_ln1171_fu_746_p1 = $signed(inv_exp_sum_V_reg_1077);

assign sext_ln1246_1_fu_270_p1 = $signed(x_max_V_reg_958);

assign sext_ln1246_2_fu_313_p1 = p_read_5_reg_925_pp0_iter2_reg;

assign sext_ln1246_3_fu_356_p1 = p_read_4_reg_919_pp0_iter2_reg;

assign sext_ln1246_4_fu_399_p1 = p_read_3_reg_913_pp0_iter2_reg;

assign sext_ln1246_5_fu_442_p1 = p_read_2_reg_906_pp0_iter2_reg;

assign sext_ln1246_6_fu_485_p1 = p_read_1_reg_899_pp0_iter2_reg;

assign sext_ln1246_fu_267_p1 = p_read_6_reg_931_pp0_iter2_reg;

assign tmp_1_fu_562_p4 = {{ret_V_1_fu_316_p2[15:6]}};

assign tmp_2_fu_588_p4 = {{ret_V_2_fu_359_p2[15:6]}};

assign tmp_3_fu_614_p4 = {{ret_V_3_fu_402_p2[15:6]}};

assign tmp_4_fu_640_p4 = {{ret_V_4_fu_445_p2[15:6]}};

assign tmp_5_fu_666_p4 = {{ret_V_5_fu_488_p2[15:6]}};

assign tmp_fu_536_p4 = {{ret_V_fu_273_p2[15:6]}};

assign x_max_V_fu_260_p3 = ((xor_ln1549_4_fu_254_p2[0:0] == 1'b1) ? select_ln65_2_reg_947 : select_ln65_3_fu_243_p3);

assign xor_ln1549_1_fu_203_p2 = (icmp_ln1549_1_reg_942 ^ 1'd1);

assign xor_ln1549_2_fu_220_p2 = (icmp_ln1549_2_fu_214_p2 ^ 1'd1);

assign xor_ln1549_3_fu_238_p2 = (icmp_ln1549_3_reg_953 ^ 1'd1);

assign xor_ln1549_4_fu_254_p2 = (icmp_ln1549_4_fu_249_p2 ^ 1'd1);

assign xor_ln1549_fu_192_p2 = (icmp_ln1549_reg_937 ^ 1'd1);

assign xor_ln340_1_fu_350_p2 = (p_Result_9_fu_322_p3 ^ p_Result_10_fu_330_p3);

assign xor_ln340_2_fu_393_p2 = (p_Result_12_fu_373_p3 ^ p_Result_11_fu_365_p3);

assign xor_ln340_3_fu_436_p2 = (p_Result_14_fu_416_p3 ^ p_Result_13_fu_408_p3);

assign xor_ln340_4_fu_479_p2 = (p_Result_16_fu_459_p3 ^ p_Result_15_fu_451_p3);

assign xor_ln340_5_fu_522_p2 = (p_Result_18_fu_502_p3 ^ p_Result_17_fu_494_p3);

assign xor_ln340_fu_307_p2 = (p_Result_8_fu_287_p3 ^ p_Result_7_fu_279_p3);

assign xor_ln794_1_fu_338_p2 = (p_Result_9_fu_322_p3 ^ 1'd1);

assign xor_ln794_2_fu_381_p2 = (p_Result_11_fu_365_p3 ^ 1'd1);

assign xor_ln794_3_fu_424_p2 = (p_Result_13_fu_408_p3 ^ 1'd1);

assign xor_ln794_4_fu_467_p2 = (p_Result_15_fu_451_p3 ^ 1'd1);

assign xor_ln794_5_fu_510_p2 = (p_Result_17_fu_494_p3 ^ 1'd1);

assign xor_ln794_fu_295_p2 = (p_Result_7_fu_279_p3 ^ 1'd1);

assign y_1_fu_572_p3 = ((xor_ln340_1_fu_350_p2[0:0] == 1'b1) ? select_ln384_1_fu_554_p3 : tmp_1_fu_562_p4);

assign y_2_fu_598_p3 = ((xor_ln340_2_fu_393_p2[0:0] == 1'b1) ? select_ln384_2_fu_580_p3 : tmp_2_fu_588_p4);

assign y_3_fu_624_p3 = ((xor_ln340_3_fu_436_p2[0:0] == 1'b1) ? select_ln384_3_fu_606_p3 : tmp_3_fu_614_p4);

assign y_4_fu_650_p3 = ((xor_ln340_4_fu_479_p2[0:0] == 1'b1) ? select_ln384_4_fu_632_p3 : tmp_4_fu_640_p4);

assign y_5_fu_676_p3 = ((xor_ln340_5_fu_522_p2[0:0] == 1'b1) ? select_ln384_5_fu_658_p3 : tmp_5_fu_666_p4);

assign y_fu_546_p3 = ((xor_ln340_fu_307_p2[0:0] == 1'b1) ? select_ln384_fu_528_p3 : tmp_fu_536_p4);

assign zext_ln255_1_fu_700_p1 = y_1_reg_968_pp0_iter4_reg;

assign zext_ln255_2_fu_704_p1 = y_2_reg_973_pp0_iter4_reg;

assign zext_ln255_3_fu_684_p1 = y_3_reg_978;

assign zext_ln255_4_fu_688_p1 = y_4_reg_983;

assign zext_ln255_5_fu_692_p1 = y_5_reg_988;

assign zext_ln255_fu_696_p1 = y_reg_963_pp0_iter4_reg;

assign zext_ln265_fu_742_p1 = y_6_reg_1067;

endmodule //myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config13_s
