-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv15_7A : STD_LOGIC_VECTOR (14 downto 0) := "000000001111010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv12_3A8 : STD_LOGIC_VECTOR (11 downto 0) := "001110101000";
    constant ap_const_lv12_E88 : STD_LOGIC_VECTOR (11 downto 0) := "111010001000";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal trunc_ln_reg_481 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln717_5_reg_486 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_6_reg_491 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_7_reg_496 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_8_reg_501 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln3_reg_506 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln712_1_reg_511 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln712_2_reg_516 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln4_reg_521 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln740_3_fu_359_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_3_reg_526 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_4_fu_365_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_4_reg_531 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_5_fu_371_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_5_reg_536 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_6_fu_377_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_6_reg_541 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_7_fu_383_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_7_reg_546 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_8_fu_389_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_8_reg_551 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1171_fu_83_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_fu_83_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal shl_ln_fu_133_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_fu_141_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_0_fu_129_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_7_fu_151_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_1_fu_167_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_1_fu_192_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_2_fu_200_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_2_fu_204_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_183_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_2_fu_230_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1171_3_fu_242_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1171_4_fu_250_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1171_3_fu_238_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_4_fu_254_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_5_fu_270_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_226_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_fu_145_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_3_fu_220_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1171_fu_83_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1171_6_fu_286_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln712_2_fu_341_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_3_fu_350_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_fu_332_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_fu_335_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_4_fu_353_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_1_fu_344_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_1_fu_338_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_2_fu_347_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln740_fu_356_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln740_1_fu_398_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln740_fu_395_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln740_fu_401_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln740_2_fu_418_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln740_1_fu_415_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln740_1_fu_421_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_427_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln740_2_fu_442_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln740_4_fu_439_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln740_2_fu_445_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_451_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1_fu_407_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln740_3_fu_435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln740_5_fu_459_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read1_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_2_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1171_fu_83_p00 : STD_LOGIC_VECTOR (14 downto 0);

    component myproject_mul_8ns_8ns_15_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    mul_8ns_8ns_15_1_0_U44 : component myproject_mul_8ns_8ns_15_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln1171_fu_83_p0,
        din1 => mul_ln1171_fu_83_p1,
        dout => mul_ln1171_fu_83_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                add_ln740_3_reg_526 <= add_ln740_3_fu_359_p2;
                add_ln740_4_reg_531 <= add_ln740_4_fu_365_p2;
                add_ln740_5_reg_536 <= add_ln740_5_fu_371_p2;
                add_ln740_6_reg_541 <= add_ln740_6_fu_377_p2;
                    add_ln740_7_reg_546(11 downto 2) <= add_ln740_7_fu_383_p2(11 downto 2);
                add_ln740_8_reg_551 <= add_ln740_8_fu_389_p2;
                trunc_ln3_reg_506 <= sub_ln1171_fu_145_p2(15 downto 5);
                trunc_ln4_reg_521 <= sub_ln1171_6_fu_286_p2(15 downto 5);
                trunc_ln712_1_reg_511 <= sub_ln1171_3_fu_220_p2(15 downto 5);
                trunc_ln712_2_reg_516 <= mul_ln1171_fu_83_p2(14 downto 5);
                trunc_ln717_5_reg_486 <= sub_ln1171_1_fu_167_p2(15 downto 5);
                trunc_ln717_6_reg_491 <= sub_ln1171_2_fu_204_p2(15 downto 5);
                trunc_ln717_7_reg_496 <= sub_ln1171_4_fu_254_p2(15 downto 5);
                trunc_ln717_8_reg_501 <= sub_ln1171_5_fu_270_p2(15 downto 5);
                trunc_ln_reg_481 <= sub_ln1171_7_fu_151_p2(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                    ap_return_0_int_reg(15 downto 2) <= shl_ln1_fu_407_p3(15 downto 2);
                    ap_return_1_int_reg(15 downto 2) <= sext_ln740_3_fu_435_p1(15 downto 2);
                    ap_return_2_int_reg(15 downto 2) <= sext_ln740_5_fu_459_p1(15 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read_int_reg <= p_read;
            end if;
        end if;
    end process;
    add_ln740_7_reg_546(1 downto 0) <= "00";
    ap_return_0_int_reg(1 downto 0) <= "00";
    ap_return_1_int_reg(1 downto 0) <= "00";
    ap_return_2_int_reg(1 downto 0) <= "00";
    add_ln740_1_fu_421_p2 <= std_logic_vector(signed(sext_ln740_2_fu_418_p1) + signed(sext_ln740_1_fu_415_p1));
    add_ln740_2_fu_445_p2 <= std_logic_vector(unsigned(zext_ln740_2_fu_442_p1) + unsigned(sext_ln740_4_fu_439_p1));
    add_ln740_3_fu_359_p2 <= std_logic_vector(signed(sext_ln712_2_fu_341_p1) + signed(sext_ln712_3_fu_350_p1));
    add_ln740_4_fu_365_p2 <= std_logic_vector(unsigned(zext_ln712_fu_332_p1) + unsigned(ap_const_lv12_3A8));
    add_ln740_5_fu_371_p2 <= std_logic_vector(signed(sext_ln712_fu_335_p1) + signed(sext_ln712_4_fu_353_p1));
    add_ln740_6_fu_377_p2 <= std_logic_vector(unsigned(zext_ln712_1_fu_344_p1) + unsigned(ap_const_lv12_E88));
    add_ln740_7_fu_383_p2 <= std_logic_vector(signed(sext_ln712_1_fu_338_p1) + signed(ap_const_lv12_C00));
    add_ln740_8_fu_389_p2 <= std_logic_vector(unsigned(zext_ln712_2_fu_347_p1) + unsigned(zext_ln740_fu_356_p1));
    add_ln740_fu_401_p2 <= std_logic_vector(unsigned(zext_ln740_1_fu_398_p1) + unsigned(sext_ln740_fu_395_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(shl_ln1_fu_407_p3, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= shl_ln1_fu_407_p3;
        else 
            ap_return_0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_1_assign_proc : process(sext_ln740_3_fu_435_p1, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= sext_ln740_3_fu_435_p1;
        else 
            ap_return_1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_2_assign_proc : process(sext_ln740_5_fu_459_p1, ap_ce_reg, ap_return_2_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_2 <= ap_return_2_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_2 <= sext_ln740_5_fu_459_p1;
        else 
            ap_return_2 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mul_ln1171_fu_83_p0 <= mul_ln1171_fu_83_p00(8 - 1 downto 0);
    mul_ln1171_fu_83_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1_int_reg),15));
    mul_ln1171_fu_83_p1 <= ap_const_lv15_7A(8 - 1 downto 0);
    r_V_0_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_int_reg),16));
    r_V_1_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1_int_reg),16));
    r_V_2_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read2_int_reg),16));
        sext_ln712_1_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_5_reg_486),12));

        sext_ln712_2_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_6_reg_491),12));

        sext_ln712_3_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_7_reg_496),12));

        sext_ln712_4_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_8_reg_501),12));

        sext_ln712_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_481),12));

        sext_ln740_1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_5_reg_536),13));

        sext_ln740_2_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_6_reg_541),13));

        sext_ln740_3_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_427_p3),16));

        sext_ln740_4_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_7_reg_546),13));

        sext_ln740_5_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_451_p3),16));

        sext_ln740_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_3_reg_526),14));

    shl_ln1171_1_fu_192_p3 <= (p_read1_int_reg & ap_const_lv7_0);
    shl_ln1171_2_fu_230_p3 <= (p_read2_int_reg & ap_const_lv7_0);
    shl_ln1171_3_fu_242_p3 <= (p_read2_int_reg & ap_const_lv1_0);
    shl_ln1_fu_407_p3 <= (add_ln740_fu_401_p2 & ap_const_lv2_0);
    shl_ln_fu_133_p3 <= (p_read_int_reg & ap_const_lv7_0);
    sub_ln1171_1_fu_167_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_fu_141_p1));
    sub_ln1171_2_fu_204_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_2_fu_200_p1));
    sub_ln1171_3_fu_220_p2 <= std_logic_vector(unsigned(zext_ln1171_2_fu_200_p1) - unsigned(r_V_1_fu_183_p1));
    sub_ln1171_4_fu_254_p2 <= std_logic_vector(unsigned(zext_ln1171_4_fu_250_p1) - unsigned(zext_ln1171_3_fu_238_p1));
    sub_ln1171_5_fu_270_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_3_fu_238_p1));
    sub_ln1171_6_fu_286_p2 <= std_logic_vector(unsigned(zext_ln1171_3_fu_238_p1) - unsigned(r_V_2_fu_226_p1));
    sub_ln1171_7_fu_151_p2 <= std_logic_vector(unsigned(r_V_0_fu_129_p1) - unsigned(zext_ln1171_fu_141_p1));
    sub_ln1171_fu_145_p2 <= std_logic_vector(unsigned(zext_ln1171_fu_141_p1) - unsigned(r_V_0_fu_129_p1));
    tmp_1_fu_427_p3 <= (add_ln740_1_fu_421_p2 & ap_const_lv2_0);
    tmp_2_fu_451_p3 <= (add_ln740_2_fu_445_p2 & ap_const_lv2_0);
    zext_ln1171_2_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_1_fu_192_p3),16));
    zext_ln1171_3_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_2_fu_230_p3),16));
    zext_ln1171_4_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_3_fu_242_p3),16));
    zext_ln1171_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_133_p3),16));
    zext_ln712_1_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln712_1_reg_511),12));
    zext_ln712_2_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln712_2_reg_516),12));
    zext_ln712_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_506),12));
    zext_ln740_1_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln740_4_reg_531),14));
    zext_ln740_2_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln740_8_reg_551),13));
    zext_ln740_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_reg_521),12));
end behav;
