// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [10:0] trunc_ln_reg_461;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [10:0] trunc_ln717_5_reg_466;
reg   [10:0] trunc_ln717_6_reg_471;
reg   [10:0] trunc_ln717_7_reg_476;
reg   [10:0] trunc_ln717_8_reg_481;
reg   [10:0] trunc_ln3_reg_486;
reg   [10:0] trunc_ln712_1_reg_491;
reg   [9:0] trunc_ln712_2_reg_496;
reg   [10:0] trunc_ln4_reg_501;
wire   [11:0] add_ln740_3_fu_339_p2;
reg   [11:0] add_ln740_3_reg_506;
wire    ap_block_pp0_stage1_11001;
wire   [11:0] add_ln740_4_fu_345_p2;
reg   [11:0] add_ln740_4_reg_511;
wire   [11:0] add_ln740_5_fu_351_p2;
reg   [11:0] add_ln740_5_reg_516;
wire   [11:0] add_ln740_6_fu_357_p2;
reg   [11:0] add_ln740_6_reg_521;
wire   [11:0] add_ln740_7_fu_363_p2;
reg   [11:0] add_ln740_7_reg_526;
wire   [11:0] add_ln740_8_fu_369_p2;
reg   [11:0] add_ln740_8_reg_531;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [7:0] mul_ln1171_fu_79_p0;
wire   [7:0] mul_ln1171_fu_79_p1;
wire    ap_block_pp0_stage0;
wire   [14:0] shl_ln_fu_113_p3;
wire   [15:0] zext_ln1171_fu_121_p1;
wire   [15:0] r_V_0_fu_109_p1;
wire   [15:0] sub_ln1171_7_fu_131_p2;
wire   [15:0] sub_ln1171_1_fu_147_p2;
wire   [14:0] shl_ln1171_1_fu_172_p3;
wire   [15:0] zext_ln1171_2_fu_180_p1;
wire   [15:0] sub_ln1171_2_fu_184_p2;
wire   [15:0] r_V_1_fu_163_p1;
wire   [14:0] shl_ln1171_2_fu_210_p3;
wire   [8:0] shl_ln1171_3_fu_222_p3;
wire   [15:0] zext_ln1171_4_fu_230_p1;
wire   [15:0] zext_ln1171_3_fu_218_p1;
wire   [15:0] sub_ln1171_4_fu_234_p2;
wire   [15:0] sub_ln1171_5_fu_250_p2;
wire   [15:0] r_V_2_fu_206_p1;
wire   [15:0] sub_ln1171_fu_125_p2;
wire   [15:0] sub_ln1171_3_fu_200_p2;
wire   [14:0] mul_ln1171_fu_79_p2;
wire   [15:0] sub_ln1171_6_fu_266_p2;
wire    ap_block_pp0_stage1;
wire  signed [11:0] sext_ln712_2_fu_321_p1;
wire  signed [11:0] sext_ln712_3_fu_330_p1;
wire   [11:0] zext_ln712_fu_312_p1;
wire  signed [11:0] sext_ln712_fu_315_p1;
wire  signed [11:0] sext_ln712_4_fu_333_p1;
wire   [11:0] zext_ln712_1_fu_324_p1;
wire  signed [11:0] sext_ln712_1_fu_318_p1;
wire   [11:0] zext_ln712_2_fu_327_p1;
wire   [11:0] zext_ln740_fu_336_p1;
wire   [13:0] zext_ln740_1_fu_378_p1;
wire  signed [13:0] sext_ln740_fu_375_p1;
wire   [13:0] add_ln740_fu_381_p2;
wire  signed [12:0] sext_ln740_2_fu_398_p1;
wire  signed [12:0] sext_ln740_1_fu_395_p1;
wire   [12:0] add_ln740_1_fu_401_p2;
wire   [14:0] tmp_1_fu_407_p3;
wire   [12:0] zext_ln740_2_fu_422_p1;
wire  signed [12:0] sext_ln740_4_fu_419_p1;
wire   [12:0] add_ln740_2_fu_425_p2;
wire   [14:0] tmp_2_fu_431_p3;
wire   [15:0] shl_ln1_fu_387_p3;
wire  signed [15:0] sext_ln740_3_fu_415_p1;
wire  signed [15:0] sext_ln740_5_fu_439_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire   [14:0] mul_ln1171_fu_79_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

myproject_mul_8ns_8ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_8ns_8ns_15_1_1_U44(
    .din0(mul_ln1171_fu_79_p0),
    .din1(mul_ln1171_fu_79_p1),
    .dout(mul_ln1171_fu_79_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln740_3_reg_506 <= add_ln740_3_fu_339_p2;
        add_ln740_4_reg_511 <= add_ln740_4_fu_345_p2;
        add_ln740_5_reg_516 <= add_ln740_5_fu_351_p2;
        add_ln740_6_reg_521 <= add_ln740_6_fu_357_p2;
        add_ln740_7_reg_526[11 : 2] <= add_ln740_7_fu_363_p2[11 : 2];
        add_ln740_8_reg_531 <= add_ln740_8_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln3_reg_486 <= {{sub_ln1171_fu_125_p2[15:5]}};
        trunc_ln4_reg_501 <= {{sub_ln1171_6_fu_266_p2[15:5]}};
        trunc_ln712_1_reg_491 <= {{sub_ln1171_3_fu_200_p2[15:5]}};
        trunc_ln712_2_reg_496 <= {{mul_ln1171_fu_79_p2[14:5]}};
        trunc_ln717_5_reg_466 <= {{sub_ln1171_1_fu_147_p2[15:5]}};
        trunc_ln717_6_reg_471 <= {{sub_ln1171_2_fu_184_p2[15:5]}};
        trunc_ln717_7_reg_476 <= {{sub_ln1171_4_fu_234_p2[15:5]}};
        trunc_ln717_8_reg_481 <= {{sub_ln1171_5_fu_250_p2[15:5]}};
        trunc_ln_reg_461 <= {{sub_ln1171_7_fu_131_p2[15:5]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln740_1_fu_401_p2 = ($signed(sext_ln740_2_fu_398_p1) + $signed(sext_ln740_1_fu_395_p1));

assign add_ln740_2_fu_425_p2 = ($signed(zext_ln740_2_fu_422_p1) + $signed(sext_ln740_4_fu_419_p1));

assign add_ln740_3_fu_339_p2 = ($signed(sext_ln712_2_fu_321_p1) + $signed(sext_ln712_3_fu_330_p1));

assign add_ln740_4_fu_345_p2 = (zext_ln712_fu_312_p1 + 12'd936);

assign add_ln740_5_fu_351_p2 = ($signed(sext_ln712_fu_315_p1) + $signed(sext_ln712_4_fu_333_p1));

assign add_ln740_6_fu_357_p2 = ($signed(zext_ln712_1_fu_324_p1) + $signed(12'd3720));

assign add_ln740_7_fu_363_p2 = ($signed(sext_ln712_1_fu_318_p1) + $signed(12'd3072));

assign add_ln740_8_fu_369_p2 = (zext_ln712_2_fu_327_p1 + zext_ln740_fu_336_p1);

assign add_ln740_fu_381_p2 = ($signed(zext_ln740_1_fu_378_p1) + $signed(sext_ln740_fu_375_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = shl_ln1_fu_387_p3;

assign ap_return_1 = sext_ln740_3_fu_415_p1;

assign ap_return_2 = sext_ln740_5_fu_439_p1;

assign mul_ln1171_fu_79_p0 = mul_ln1171_fu_79_p00;

assign mul_ln1171_fu_79_p00 = p_read1;

assign mul_ln1171_fu_79_p1 = 15'd122;

assign r_V_0_fu_109_p1 = p_read;

assign r_V_1_fu_163_p1 = p_read1;

assign r_V_2_fu_206_p1 = p_read2;

assign sext_ln712_1_fu_318_p1 = $signed(trunc_ln717_5_reg_466);

assign sext_ln712_2_fu_321_p1 = $signed(trunc_ln717_6_reg_471);

assign sext_ln712_3_fu_330_p1 = $signed(trunc_ln717_7_reg_476);

assign sext_ln712_4_fu_333_p1 = $signed(trunc_ln717_8_reg_481);

assign sext_ln712_fu_315_p1 = $signed(trunc_ln_reg_461);

assign sext_ln740_1_fu_395_p1 = $signed(add_ln740_5_reg_516);

assign sext_ln740_2_fu_398_p1 = $signed(add_ln740_6_reg_521);

assign sext_ln740_3_fu_415_p1 = $signed(tmp_1_fu_407_p3);

assign sext_ln740_4_fu_419_p1 = $signed(add_ln740_7_reg_526);

assign sext_ln740_5_fu_439_p1 = $signed(tmp_2_fu_431_p3);

assign sext_ln740_fu_375_p1 = $signed(add_ln740_3_reg_506);

assign shl_ln1171_1_fu_172_p3 = {{p_read1}, {7'd0}};

assign shl_ln1171_2_fu_210_p3 = {{p_read2}, {7'd0}};

assign shl_ln1171_3_fu_222_p3 = {{p_read2}, {1'd0}};

assign shl_ln1_fu_387_p3 = {{add_ln740_fu_381_p2}, {2'd0}};

assign shl_ln_fu_113_p3 = {{p_read}, {7'd0}};

assign sub_ln1171_1_fu_147_p2 = (16'd0 - zext_ln1171_fu_121_p1);

assign sub_ln1171_2_fu_184_p2 = (16'd0 - zext_ln1171_2_fu_180_p1);

assign sub_ln1171_3_fu_200_p2 = (zext_ln1171_2_fu_180_p1 - r_V_1_fu_163_p1);

assign sub_ln1171_4_fu_234_p2 = (zext_ln1171_4_fu_230_p1 - zext_ln1171_3_fu_218_p1);

assign sub_ln1171_5_fu_250_p2 = (16'd0 - zext_ln1171_3_fu_218_p1);

assign sub_ln1171_6_fu_266_p2 = (zext_ln1171_3_fu_218_p1 - r_V_2_fu_206_p1);

assign sub_ln1171_7_fu_131_p2 = (r_V_0_fu_109_p1 - zext_ln1171_fu_121_p1);

assign sub_ln1171_fu_125_p2 = (zext_ln1171_fu_121_p1 - r_V_0_fu_109_p1);

assign tmp_1_fu_407_p3 = {{add_ln740_1_fu_401_p2}, {2'd0}};

assign tmp_2_fu_431_p3 = {{add_ln740_2_fu_425_p2}, {2'd0}};

assign zext_ln1171_2_fu_180_p1 = shl_ln1171_1_fu_172_p3;

assign zext_ln1171_3_fu_218_p1 = shl_ln1171_2_fu_210_p3;

assign zext_ln1171_4_fu_230_p1 = shl_ln1171_3_fu_222_p3;

assign zext_ln1171_fu_121_p1 = shl_ln_fu_113_p3;

assign zext_ln712_1_fu_324_p1 = trunc_ln712_1_reg_491;

assign zext_ln712_2_fu_327_p1 = trunc_ln712_2_reg_496;

assign zext_ln712_fu_312_p1 = trunc_ln3_reg_486;

assign zext_ln740_1_fu_378_p1 = add_ln740_4_reg_511;

assign zext_ln740_2_fu_422_p1 = add_ln740_8_reg_531;

assign zext_ln740_fu_336_p1 = trunc_ln4_reg_501;

always @ (posedge ap_clk) begin
    add_ln740_7_reg_526[1:0] <= 2'b00;
end

endmodule //myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s
