-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv15_7A : STD_LOGIC_VECTOR (14 downto 0) := "000000001111010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv12_3A8 : STD_LOGIC_VECTOR (11 downto 0) := "001110101000";
    constant ap_const_lv12_E88 : STD_LOGIC_VECTOR (11 downto 0) := "111010001000";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal trunc_ln_reg_461 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln717_5_reg_466 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_6_reg_471 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_7_reg_476 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_8_reg_481 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln3_reg_486 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln712_1_reg_491 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln712_2_reg_496 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln4_reg_501 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln740_3_fu_339_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_3_reg_506 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln740_4_fu_345_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_4_reg_511 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_5_fu_351_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_5_reg_516 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_6_fu_357_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_6_reg_521 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_7_fu_363_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_7_reg_526 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_8_fu_369_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_8_reg_531 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal mul_ln1171_fu_79_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_fu_79_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal shl_ln_fu_113_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_fu_121_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_0_fu_109_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_7_fu_131_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_1_fu_147_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_1_fu_172_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_2_fu_180_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_2_fu_184_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_163_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_2_fu_210_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1171_3_fu_222_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1171_4_fu_230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1171_3_fu_218_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_4_fu_234_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_5_fu_250_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_206_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_fu_125_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_3_fu_200_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1171_fu_79_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1171_6_fu_266_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sext_ln712_2_fu_321_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_3_fu_330_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_fu_312_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_fu_315_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_4_fu_333_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_1_fu_324_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_1_fu_318_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_2_fu_327_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln740_fu_336_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln740_1_fu_378_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln740_fu_375_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln740_fu_381_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln740_2_fu_398_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln740_1_fu_395_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln740_1_fu_401_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_407_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln740_2_fu_422_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln740_4_fu_419_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln740_2_fu_425_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_431_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1_fu_387_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln740_3_fu_415_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln740_5_fu_439_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1171_fu_79_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_8ns_8ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    mul_8ns_8ns_15_1_1_U44 : component myproject_mul_8ns_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln1171_fu_79_p0,
        din1 => mul_ln1171_fu_79_p1,
        dout => mul_ln1171_fu_79_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln740_3_reg_506 <= add_ln740_3_fu_339_p2;
                add_ln740_4_reg_511 <= add_ln740_4_fu_345_p2;
                add_ln740_5_reg_516 <= add_ln740_5_fu_351_p2;
                add_ln740_6_reg_521 <= add_ln740_6_fu_357_p2;
                    add_ln740_7_reg_526(11 downto 2) <= add_ln740_7_fu_363_p2(11 downto 2);
                add_ln740_8_reg_531 <= add_ln740_8_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln3_reg_486 <= sub_ln1171_fu_125_p2(15 downto 5);
                trunc_ln4_reg_501 <= sub_ln1171_6_fu_266_p2(15 downto 5);
                trunc_ln712_1_reg_491 <= sub_ln1171_3_fu_200_p2(15 downto 5);
                trunc_ln712_2_reg_496 <= mul_ln1171_fu_79_p2(14 downto 5);
                trunc_ln717_5_reg_466 <= sub_ln1171_1_fu_147_p2(15 downto 5);
                trunc_ln717_6_reg_471 <= sub_ln1171_2_fu_184_p2(15 downto 5);
                trunc_ln717_7_reg_476 <= sub_ln1171_4_fu_234_p2(15 downto 5);
                trunc_ln717_8_reg_481 <= sub_ln1171_5_fu_250_p2(15 downto 5);
                trunc_ln_reg_461 <= sub_ln1171_7_fu_131_p2(15 downto 5);
            end if;
        end if;
    end process;
    add_ln740_7_reg_526(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln740_1_fu_401_p2 <= std_logic_vector(signed(sext_ln740_2_fu_398_p1) + signed(sext_ln740_1_fu_395_p1));
    add_ln740_2_fu_425_p2 <= std_logic_vector(unsigned(zext_ln740_2_fu_422_p1) + unsigned(sext_ln740_4_fu_419_p1));
    add_ln740_3_fu_339_p2 <= std_logic_vector(signed(sext_ln712_2_fu_321_p1) + signed(sext_ln712_3_fu_330_p1));
    add_ln740_4_fu_345_p2 <= std_logic_vector(unsigned(zext_ln712_fu_312_p1) + unsigned(ap_const_lv12_3A8));
    add_ln740_5_fu_351_p2 <= std_logic_vector(signed(sext_ln712_fu_315_p1) + signed(sext_ln712_4_fu_333_p1));
    add_ln740_6_fu_357_p2 <= std_logic_vector(unsigned(zext_ln712_1_fu_324_p1) + unsigned(ap_const_lv12_E88));
    add_ln740_7_fu_363_p2 <= std_logic_vector(signed(sext_ln712_1_fu_318_p1) + signed(ap_const_lv12_C00));
    add_ln740_8_fu_369_p2 <= std_logic_vector(unsigned(zext_ln712_2_fu_327_p1) + unsigned(zext_ln740_fu_336_p1));
    add_ln740_fu_381_p2 <= std_logic_vector(unsigned(zext_ln740_1_fu_378_p1) + unsigned(sext_ln740_fu_375_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= shl_ln1_fu_387_p3;
    ap_return_1 <= sext_ln740_3_fu_415_p1;
    ap_return_2 <= sext_ln740_5_fu_439_p1;
    mul_ln1171_fu_79_p0 <= mul_ln1171_fu_79_p00(8 - 1 downto 0);
    mul_ln1171_fu_79_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),15));
    mul_ln1171_fu_79_p1 <= ap_const_lv15_7A(8 - 1 downto 0);
    r_V_0_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),16));
    r_V_1_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),16));
    r_V_2_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read2),16));
        sext_ln712_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_5_reg_466),12));

        sext_ln712_2_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_6_reg_471),12));

        sext_ln712_3_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_7_reg_476),12));

        sext_ln712_4_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_8_reg_481),12));

        sext_ln712_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_461),12));

        sext_ln740_1_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_5_reg_516),13));

        sext_ln740_2_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_6_reg_521),13));

        sext_ln740_3_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_407_p3),16));

        sext_ln740_4_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_7_reg_526),13));

        sext_ln740_5_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_431_p3),16));

        sext_ln740_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_3_reg_506),14));

    shl_ln1171_1_fu_172_p3 <= (p_read1 & ap_const_lv7_0);
    shl_ln1171_2_fu_210_p3 <= (p_read2 & ap_const_lv7_0);
    shl_ln1171_3_fu_222_p3 <= (p_read2 & ap_const_lv1_0);
    shl_ln1_fu_387_p3 <= (add_ln740_fu_381_p2 & ap_const_lv2_0);
    shl_ln_fu_113_p3 <= (p_read & ap_const_lv7_0);
    sub_ln1171_1_fu_147_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_fu_121_p1));
    sub_ln1171_2_fu_184_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_2_fu_180_p1));
    sub_ln1171_3_fu_200_p2 <= std_logic_vector(unsigned(zext_ln1171_2_fu_180_p1) - unsigned(r_V_1_fu_163_p1));
    sub_ln1171_4_fu_234_p2 <= std_logic_vector(unsigned(zext_ln1171_4_fu_230_p1) - unsigned(zext_ln1171_3_fu_218_p1));
    sub_ln1171_5_fu_250_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_3_fu_218_p1));
    sub_ln1171_6_fu_266_p2 <= std_logic_vector(unsigned(zext_ln1171_3_fu_218_p1) - unsigned(r_V_2_fu_206_p1));
    sub_ln1171_7_fu_131_p2 <= std_logic_vector(unsigned(r_V_0_fu_109_p1) - unsigned(zext_ln1171_fu_121_p1));
    sub_ln1171_fu_125_p2 <= std_logic_vector(unsigned(zext_ln1171_fu_121_p1) - unsigned(r_V_0_fu_109_p1));
    tmp_1_fu_407_p3 <= (add_ln740_1_fu_401_p2 & ap_const_lv2_0);
    tmp_2_fu_431_p3 <= (add_ln740_2_fu_425_p2 & ap_const_lv2_0);
    zext_ln1171_2_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_1_fu_172_p3),16));
    zext_ln1171_3_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_2_fu_210_p3),16));
    zext_ln1171_4_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_3_fu_222_p3),16));
    zext_ln1171_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_113_p3),16));
    zext_ln712_1_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln712_1_reg_491),12));
    zext_ln712_2_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln712_2_reg_496),12));
    zext_ln712_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_486),12));
    zext_ln740_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln740_4_reg_511),14));
    zext_ln740_2_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln740_8_reg_531),13));
    zext_ln740_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_reg_501),12));
end behav;
