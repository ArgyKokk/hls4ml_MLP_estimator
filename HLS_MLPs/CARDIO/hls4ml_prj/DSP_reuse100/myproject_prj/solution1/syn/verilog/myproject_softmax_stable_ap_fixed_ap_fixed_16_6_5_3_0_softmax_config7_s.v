// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config7_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_pp0_stage0_subdone;
wire   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [17:0] exp_table_q0;
wire   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [17:0] exp_table_q1;
wire   [9:0] exp_table_address2;
reg    exp_table_ce2;
wire   [17:0] exp_table_q2;
wire   [9:0] invert_table_address0;
reg    invert_table_ce0;
wire   [17:0] invert_table_q0;
reg  signed [15:0] p_read_1_reg_475;
wire    ap_block_pp0_stage0_11001;
reg  signed [15:0] p_read_1_reg_475_pp0_iter1_reg;
reg  signed [15:0] p_read_1_reg_475_pp0_iter2_reg;
reg  signed [15:0] p_read_1_reg_475_pp0_iter3_reg;
reg  signed [15:0] p_read_2_reg_482;
reg  signed [15:0] p_read_2_reg_482_pp0_iter1_reg;
reg  signed [15:0] p_read_2_reg_482_pp0_iter2_reg;
reg  signed [15:0] p_read_2_reg_482_pp0_iter3_reg;
reg  signed [15:0] p_read_3_reg_488;
reg  signed [15:0] p_read_3_reg_488_pp0_iter1_reg;
reg  signed [15:0] p_read_3_reg_488_pp0_iter2_reg;
reg  signed [15:0] p_read_3_reg_488_pp0_iter3_reg;
wire   [0:0] icmp_ln1549_fu_120_p2;
reg   [0:0] icmp_ln1549_reg_494;
wire   [15:0] select_ln65_fu_131_p3;
reg   [15:0] select_ln65_reg_499;
reg   [15:0] select_ln65_reg_499_pp0_iter2_reg;
wire   [0:0] icmp_ln1549_1_fu_137_p2;
reg   [0:0] icmp_ln1549_1_reg_505;
wire   [15:0] x_max_V_fu_146_p3;
reg   [15:0] x_max_V_reg_510;
wire   [9:0] y_fu_302_p3;
reg   [9:0] y_reg_515;
wire   [9:0] y_1_fu_328_p3;
reg   [9:0] y_1_reg_520;
wire   [9:0] y_2_fu_354_p3;
reg   [9:0] y_2_reg_525;
reg  signed [17:0] r_V_reg_545;
reg  signed [17:0] r_V_reg_545_pp0_iter7_reg;
reg  signed [17:0] r_V_reg_545_pp0_iter8_reg;
reg  signed [17:0] r_V_reg_545_pp0_iter9_reg;
reg  signed [17:0] r_V_1_reg_551;
reg  signed [17:0] r_V_1_reg_551_pp0_iter7_reg;
reg  signed [17:0] r_V_1_reg_551_pp0_iter8_reg;
reg  signed [17:0] r_V_1_reg_551_pp0_iter9_reg;
reg  signed [17:0] r_V_2_reg_557;
reg  signed [17:0] r_V_2_reg_557_pp0_iter7_reg;
reg  signed [17:0] r_V_2_reg_557_pp0_iter8_reg;
reg  signed [17:0] r_V_2_reg_557_pp0_iter9_reg;
reg   [9:0] y_3_reg_563;
reg   [17:0] inv_exp_sum_V_reg_573;
wire  signed [29:0] sext_ln1171_fu_397_p1;
wire   [63:0] zext_ln255_fu_362_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln255_1_fu_366_p1;
wire   [63:0] zext_ln255_2_fu_370_p1;
wire   [63:0] zext_ln265_fu_393_p1;
wire  signed [15:0] icmp_ln1549_fu_120_p0;
wire  signed [15:0] icmp_ln1549_fu_120_p1;
wire   [0:0] xor_ln1549_fu_126_p2;
wire   [0:0] xor_ln1549_1_fu_141_p2;
wire  signed [16:0] sext_ln1246_fu_152_p1;
wire  signed [16:0] sext_ln1246_1_fu_155_p1;
wire   [16:0] ret_V_fu_158_p2;
wire   [0:0] p_Result_4_fu_164_p3;
wire   [0:0] p_Result_5_fu_172_p3;
wire   [0:0] xor_ln794_fu_180_p2;
wire  signed [16:0] sext_ln1246_2_fu_198_p1;
wire   [16:0] ret_V_1_fu_201_p2;
wire   [0:0] p_Result_6_fu_207_p3;
wire   [0:0] p_Result_7_fu_215_p3;
wire   [0:0] xor_ln794_1_fu_223_p2;
wire  signed [16:0] sext_ln1246_3_fu_241_p1;
wire   [16:0] ret_V_2_fu_244_p2;
wire   [0:0] p_Result_8_fu_250_p3;
wire   [0:0] p_Result_9_fu_258_p3;
wire   [0:0] xor_ln794_2_fu_266_p2;
wire   [0:0] overflow_fu_186_p2;
wire   [0:0] xor_ln340_fu_192_p2;
wire   [9:0] select_ln384_fu_284_p3;
wire   [9:0] tmp_fu_292_p4;
wire   [0:0] overflow_1_fu_229_p2;
wire   [0:0] xor_ln340_1_fu_235_p2;
wire   [9:0] select_ln384_1_fu_310_p3;
wire   [9:0] tmp_1_fu_318_p4;
wire   [0:0] overflow_2_fu_272_p2;
wire   [0:0] xor_ln340_2_fu_278_p2;
wire   [9:0] select_ln384_2_fu_336_p3;
wire   [9:0] tmp_2_fu_344_p4;
wire   [17:0] add_ln712_fu_374_p2;
wire   [17:0] exp_sum_V_fu_378_p2;
wire  signed [29:0] grp_fu_454_p2;
wire  signed [29:0] grp_fu_461_p2;
wire  signed [29:0] grp_fu_468_p2;
wire  signed [17:0] grp_fu_454_p0;
wire  signed [17:0] grp_fu_461_p0;
wire  signed [17:0] grp_fu_468_p0;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to12;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
end

myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config7_s_exp_table #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1),
    .address2(exp_table_address2),
    .ce2(exp_table_ce2),
    .q2(exp_table_q2)
);

myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config7_s_invert_table #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table_address0),
    .ce0(invert_table_ce0),
    .q0(invert_table_q0)
);

myproject_mul_mul_18s_18s_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
mul_mul_18s_18s_30_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_454_p0),
    .din1(r_V_reg_545_pp0_iter9_reg),
    .ce(1'b1),
    .dout(grp_fu_454_p2)
);

myproject_mul_mul_18s_18s_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
mul_mul_18s_18s_30_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_461_p0),
    .din1(r_V_1_reg_551_pp0_iter9_reg),
    .ce(1'b1),
    .dout(grp_fu_461_p2)
);

myproject_mul_mul_18s_18s_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
mul_mul_18s_18s_30_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_468_p0),
    .din1(r_V_2_reg_557_pp0_iter9_reg),
    .ce(1'b1),
    .dout(grp_fu_468_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln1549_1_reg_505 <= icmp_ln1549_1_fu_137_p2;
        inv_exp_sum_V_reg_573 <= invert_table_q0;
        p_read_1_reg_475_pp0_iter2_reg <= p_read_1_reg_475_pp0_iter1_reg;
        p_read_1_reg_475_pp0_iter3_reg <= p_read_1_reg_475_pp0_iter2_reg;
        p_read_2_reg_482_pp0_iter2_reg <= p_read_2_reg_482_pp0_iter1_reg;
        p_read_2_reg_482_pp0_iter3_reg <= p_read_2_reg_482_pp0_iter2_reg;
        p_read_3_reg_488_pp0_iter2_reg <= p_read_3_reg_488_pp0_iter1_reg;
        p_read_3_reg_488_pp0_iter3_reg <= p_read_3_reg_488_pp0_iter2_reg;
        r_V_1_reg_551_pp0_iter7_reg <= r_V_1_reg_551;
        r_V_1_reg_551_pp0_iter8_reg <= r_V_1_reg_551_pp0_iter7_reg;
        r_V_1_reg_551_pp0_iter9_reg <= r_V_1_reg_551_pp0_iter8_reg;
        r_V_2_reg_557_pp0_iter7_reg <= r_V_2_reg_557;
        r_V_2_reg_557_pp0_iter8_reg <= r_V_2_reg_557_pp0_iter7_reg;
        r_V_2_reg_557_pp0_iter9_reg <= r_V_2_reg_557_pp0_iter8_reg;
        r_V_reg_545_pp0_iter7_reg <= r_V_reg_545;
        r_V_reg_545_pp0_iter8_reg <= r_V_reg_545_pp0_iter7_reg;
        r_V_reg_545_pp0_iter9_reg <= r_V_reg_545_pp0_iter8_reg;
        select_ln65_reg_499_pp0_iter2_reg <= select_ln65_reg_499;
        x_max_V_reg_510 <= x_max_V_fu_146_p3;
        y_1_reg_520 <= y_1_fu_328_p3;
        y_2_reg_525 <= y_2_fu_354_p3;
        y_3_reg_563 <= {{exp_sum_V_fu_378_p2[17:8]}};
        y_reg_515 <= y_fu_302_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1549_reg_494 <= icmp_ln1549_fu_120_p2;
        p_read_1_reg_475 <= p_read2;
        p_read_1_reg_475_pp0_iter1_reg <= p_read_1_reg_475;
        p_read_2_reg_482 <= p_read1;
        p_read_2_reg_482_pp0_iter1_reg <= p_read_2_reg_482;
        p_read_3_reg_488 <= p_read;
        p_read_3_reg_488_pp0_iter1_reg <= p_read_3_reg_488;
        select_ln65_reg_499 <= select_ln65_fu_131_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        r_V_1_reg_551 <= exp_table_q1;
        r_V_2_reg_557 <= exp_table_q0;
        r_V_reg_545 <= exp_table_q2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to12 = 1'b1;
    end else begin
        ap_idle_pp0_0to12 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to12 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        exp_table_ce2 = 1'b1;
    end else begin
        exp_table_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        invert_table_ce0 = 1'b1;
    end else begin
        invert_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln712_fu_374_p2 = ($signed(r_V_reg_545) + $signed(r_V_2_reg_557));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{grp_fu_454_p2[29:14]}};

assign ap_return_1 = {{grp_fu_461_p2[29:14]}};

assign ap_return_2 = {{grp_fu_468_p2[29:14]}};

assign exp_sum_V_fu_378_p2 = ($signed(add_ln712_fu_374_p2) + $signed(r_V_1_reg_551));

assign exp_table_address0 = zext_ln255_2_fu_370_p1;

assign exp_table_address1 = zext_ln255_1_fu_366_p1;

assign exp_table_address2 = zext_ln255_fu_362_p1;

assign grp_fu_454_p0 = sext_ln1171_fu_397_p1;

assign grp_fu_461_p0 = sext_ln1171_fu_397_p1;

assign grp_fu_468_p0 = sext_ln1171_fu_397_p1;

assign icmp_ln1549_1_fu_137_p2 = (($signed(select_ln65_reg_499) < $signed(p_read_1_reg_475_pp0_iter1_reg)) ? 1'b1 : 1'b0);

assign icmp_ln1549_fu_120_p0 = p_read;

assign icmp_ln1549_fu_120_p1 = p_read1;

assign icmp_ln1549_fu_120_p2 = (($signed(icmp_ln1549_fu_120_p0) < $signed(icmp_ln1549_fu_120_p1)) ? 1'b1 : 1'b0);

assign invert_table_address0 = zext_ln265_fu_393_p1;

assign overflow_1_fu_229_p2 = (xor_ln794_1_fu_223_p2 & p_Result_7_fu_215_p3);

assign overflow_2_fu_272_p2 = (xor_ln794_2_fu_266_p2 & p_Result_9_fu_258_p3);

assign overflow_fu_186_p2 = (xor_ln794_fu_180_p2 & p_Result_5_fu_172_p3);

assign p_Result_4_fu_164_p3 = ret_V_fu_158_p2[32'd16];

assign p_Result_5_fu_172_p3 = ret_V_fu_158_p2[32'd15];

assign p_Result_6_fu_207_p3 = ret_V_1_fu_201_p2[32'd16];

assign p_Result_7_fu_215_p3 = ret_V_1_fu_201_p2[32'd15];

assign p_Result_8_fu_250_p3 = ret_V_2_fu_244_p2[32'd16];

assign p_Result_9_fu_258_p3 = ret_V_2_fu_244_p2[32'd15];

assign ret_V_1_fu_201_p2 = ($signed(sext_ln1246_2_fu_198_p1) - $signed(sext_ln1246_1_fu_155_p1));

assign ret_V_2_fu_244_p2 = ($signed(sext_ln1246_3_fu_241_p1) - $signed(sext_ln1246_1_fu_155_p1));

assign ret_V_fu_158_p2 = ($signed(sext_ln1246_fu_152_p1) - $signed(sext_ln1246_1_fu_155_p1));

assign select_ln384_1_fu_310_p3 = ((overflow_1_fu_229_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln384_2_fu_336_p3 = ((overflow_2_fu_272_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln384_fu_284_p3 = ((overflow_fu_186_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln65_fu_131_p3 = ((xor_ln1549_fu_126_p2[0:0] == 1'b1) ? p_read_3_reg_488 : p_read_2_reg_482);

assign sext_ln1171_fu_397_p1 = $signed(inv_exp_sum_V_reg_573);

assign sext_ln1246_1_fu_155_p1 = $signed(x_max_V_reg_510);

assign sext_ln1246_2_fu_198_p1 = p_read_2_reg_482_pp0_iter3_reg;

assign sext_ln1246_3_fu_241_p1 = p_read_1_reg_475_pp0_iter3_reg;

assign sext_ln1246_fu_152_p1 = p_read_3_reg_488_pp0_iter3_reg;

assign tmp_1_fu_318_p4 = {{ret_V_1_fu_201_p2[15:6]}};

assign tmp_2_fu_344_p4 = {{ret_V_2_fu_244_p2[15:6]}};

assign tmp_fu_292_p4 = {{ret_V_fu_158_p2[15:6]}};

assign x_max_V_fu_146_p3 = ((xor_ln1549_1_fu_141_p2[0:0] == 1'b1) ? select_ln65_reg_499_pp0_iter2_reg : p_read_1_reg_475_pp0_iter2_reg);

assign xor_ln1549_1_fu_141_p2 = (icmp_ln1549_1_reg_505 ^ 1'd1);

assign xor_ln1549_fu_126_p2 = (icmp_ln1549_reg_494 ^ 1'd1);

assign xor_ln340_1_fu_235_p2 = (p_Result_7_fu_215_p3 ^ p_Result_6_fu_207_p3);

assign xor_ln340_2_fu_278_p2 = (p_Result_9_fu_258_p3 ^ p_Result_8_fu_250_p3);

assign xor_ln340_fu_192_p2 = (p_Result_5_fu_172_p3 ^ p_Result_4_fu_164_p3);

assign xor_ln794_1_fu_223_p2 = (p_Result_6_fu_207_p3 ^ 1'd1);

assign xor_ln794_2_fu_266_p2 = (p_Result_8_fu_250_p3 ^ 1'd1);

assign xor_ln794_fu_180_p2 = (p_Result_4_fu_164_p3 ^ 1'd1);

assign y_1_fu_328_p3 = ((xor_ln340_1_fu_235_p2[0:0] == 1'b1) ? select_ln384_1_fu_310_p3 : tmp_1_fu_318_p4);

assign y_2_fu_354_p3 = ((xor_ln340_2_fu_278_p2[0:0] == 1'b1) ? select_ln384_2_fu_336_p3 : tmp_2_fu_344_p4);

assign y_fu_302_p3 = ((xor_ln340_fu_192_p2[0:0] == 1'b1) ? select_ln384_fu_284_p3 : tmp_fu_292_p4);

assign zext_ln255_1_fu_366_p1 = y_1_reg_520;

assign zext_ln255_2_fu_370_p1 = y_2_reg_525;

assign zext_ln255_fu_362_p1 = y_reg_515;

assign zext_ln265_fu_393_p1 = y_3_reg_563;

endmodule //myproject_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config7_s
