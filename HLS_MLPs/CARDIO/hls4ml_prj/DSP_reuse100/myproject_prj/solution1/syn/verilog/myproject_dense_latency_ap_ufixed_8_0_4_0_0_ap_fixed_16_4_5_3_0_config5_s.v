// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] p_read14_reg_439;
reg   [10:0] trunc_ln_reg_450;
wire    ap_CS_fsm_state3;
reg   [10:0] trunc_ln717_5_reg_455;
reg   [10:0] trunc_ln717_6_reg_460;
reg   [10:0] trunc_ln717_7_reg_465;
reg   [10:0] trunc_ln717_8_reg_470;
reg   [10:0] trunc_ln3_reg_475;
reg   [10:0] trunc_ln712_1_reg_480;
reg   [9:0] trunc_ln712_2_reg_485;
reg   [10:0] trunc_ln4_reg_490;
wire   [11:0] add_ln740_3_fu_317_p2;
reg   [11:0] add_ln740_3_reg_495;
wire    ap_CS_fsm_state4;
wire   [11:0] add_ln740_4_fu_323_p2;
reg   [11:0] add_ln740_4_reg_500;
wire   [11:0] add_ln740_5_fu_329_p2;
reg   [11:0] add_ln740_5_reg_505;
wire   [11:0] add_ln740_6_fu_335_p2;
reg   [11:0] add_ln740_6_reg_510;
wire   [11:0] add_ln740_7_fu_341_p2;
reg   [11:0] add_ln740_7_reg_515;
wire   [11:0] add_ln740_8_fu_347_p2;
reg   [11:0] add_ln740_8_reg_520;
reg   [7:0] ap_port_reg_p_read;
reg   [7:0] ap_port_reg_p_read2;
wire   [7:0] grp_fu_76_p0;
wire   [7:0] grp_fu_76_p1;
wire   [14:0] shl_ln_fu_98_p3;
wire   [15:0] zext_ln1171_fu_106_p1;
wire   [15:0] r_V_0_fu_94_p1;
wire   [15:0] sub_ln1171_7_fu_116_p2;
wire   [15:0] sub_ln1171_1_fu_132_p2;
wire   [14:0] shl_ln1171_1_fu_151_p3;
wire   [15:0] zext_ln1171_2_fu_158_p1;
wire   [15:0] sub_ln1171_2_fu_162_p2;
wire   [15:0] r_V_1_fu_148_p1;
wire   [14:0] shl_ln1171_2_fu_188_p3;
wire   [8:0] shl_ln1171_3_fu_200_p3;
wire   [15:0] zext_ln1171_4_fu_208_p1;
wire   [15:0] zext_ln1171_3_fu_196_p1;
wire   [15:0] sub_ln1171_4_fu_212_p2;
wire   [15:0] sub_ln1171_5_fu_228_p2;
wire   [15:0] r_V_2_fu_184_p1;
wire   [15:0] sub_ln1171_fu_110_p2;
wire   [15:0] sub_ln1171_3_fu_178_p2;
wire   [14:0] grp_fu_76_p2;
wire   [15:0] sub_ln1171_6_fu_244_p2;
wire  signed [11:0] sext_ln712_2_fu_299_p1;
wire  signed [11:0] sext_ln712_3_fu_308_p1;
wire   [11:0] zext_ln712_fu_290_p1;
wire  signed [11:0] sext_ln712_fu_293_p1;
wire  signed [11:0] sext_ln712_4_fu_311_p1;
wire   [11:0] zext_ln712_1_fu_302_p1;
wire  signed [11:0] sext_ln712_1_fu_296_p1;
wire   [11:0] zext_ln712_2_fu_305_p1;
wire   [11:0] zext_ln740_fu_314_p1;
wire    ap_CS_fsm_state5;
wire   [13:0] zext_ln740_1_fu_356_p1;
wire  signed [13:0] sext_ln740_fu_353_p1;
wire   [13:0] add_ln740_fu_359_p2;
wire  signed [12:0] sext_ln740_2_fu_376_p1;
wire  signed [12:0] sext_ln740_1_fu_373_p1;
wire   [12:0] add_ln740_1_fu_379_p2;
wire   [14:0] tmp_1_fu_385_p3;
wire   [12:0] zext_ln740_2_fu_400_p1;
wire  signed [12:0] sext_ln740_4_fu_397_p1;
wire   [12:0] add_ln740_2_fu_403_p2;
wire   [14:0] tmp_2_fu_409_p3;
wire   [15:0] shl_ln1_fu_365_p3;
wire  signed [15:0] sext_ln740_3_fu_393_p1;
wire  signed [15:0] sext_ln740_5_fu_417_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire   [14:0] grp_fu_76_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

myproject_mul_8ns_8ns_15_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_8ns_8ns_15_3_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_76_p0),
    .din1(grp_fu_76_p1),
    .ce(1'b1),
    .dout(grp_fu_76_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln740_3_reg_495 <= add_ln740_3_fu_317_p2;
        add_ln740_4_reg_500 <= add_ln740_4_fu_323_p2;
        add_ln740_5_reg_505 <= add_ln740_5_fu_329_p2;
        add_ln740_6_reg_510 <= add_ln740_6_fu_335_p2;
        add_ln740_7_reg_515[11 : 2] <= add_ln740_7_fu_341_p2[11 : 2];
        add_ln740_8_reg_520 <= add_ln740_8_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ap_port_reg_p_read <= p_read;
        ap_port_reg_p_read2 <= p_read2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        p_read14_reg_439 <= p_read1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln3_reg_475 <= {{sub_ln1171_fu_110_p2[15:5]}};
        trunc_ln4_reg_490 <= {{sub_ln1171_6_fu_244_p2[15:5]}};
        trunc_ln712_1_reg_480 <= {{sub_ln1171_3_fu_178_p2[15:5]}};
        trunc_ln712_2_reg_485 <= {{grp_fu_76_p2[14:5]}};
        trunc_ln717_5_reg_455 <= {{sub_ln1171_1_fu_132_p2[15:5]}};
        trunc_ln717_6_reg_460 <= {{sub_ln1171_2_fu_162_p2[15:5]}};
        trunc_ln717_7_reg_465 <= {{sub_ln1171_4_fu_212_p2[15:5]}};
        trunc_ln717_8_reg_470 <= {{sub_ln1171_5_fu_228_p2[15:5]}};
        trunc_ln_reg_450 <= {{sub_ln1171_7_fu_116_p2[15:5]}};
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln740_1_fu_379_p2 = ($signed(sext_ln740_2_fu_376_p1) + $signed(sext_ln740_1_fu_373_p1));

assign add_ln740_2_fu_403_p2 = ($signed(zext_ln740_2_fu_400_p1) + $signed(sext_ln740_4_fu_397_p1));

assign add_ln740_3_fu_317_p2 = ($signed(sext_ln712_2_fu_299_p1) + $signed(sext_ln712_3_fu_308_p1));

assign add_ln740_4_fu_323_p2 = (zext_ln712_fu_290_p1 + 12'd936);

assign add_ln740_5_fu_329_p2 = ($signed(sext_ln712_fu_293_p1) + $signed(sext_ln712_4_fu_311_p1));

assign add_ln740_6_fu_335_p2 = ($signed(zext_ln712_1_fu_302_p1) + $signed(12'd3720));

assign add_ln740_7_fu_341_p2 = ($signed(sext_ln712_1_fu_296_p1) + $signed(12'd3072));

assign add_ln740_8_fu_347_p2 = (zext_ln712_2_fu_305_p1 + zext_ln740_fu_314_p1);

assign add_ln740_fu_359_p2 = ($signed(zext_ln740_1_fu_356_p1) + $signed(sext_ln740_fu_353_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return_0 = shl_ln1_fu_365_p3;

assign ap_return_1 = sext_ln740_3_fu_393_p1;

assign ap_return_2 = sext_ln740_5_fu_417_p1;

assign grp_fu_76_p0 = grp_fu_76_p00;

assign grp_fu_76_p00 = p_read1;

assign grp_fu_76_p1 = 15'd122;

assign r_V_0_fu_94_p1 = ap_port_reg_p_read;

assign r_V_1_fu_148_p1 = p_read14_reg_439;

assign r_V_2_fu_184_p1 = ap_port_reg_p_read2;

assign sext_ln712_1_fu_296_p1 = $signed(trunc_ln717_5_reg_455);

assign sext_ln712_2_fu_299_p1 = $signed(trunc_ln717_6_reg_460);

assign sext_ln712_3_fu_308_p1 = $signed(trunc_ln717_7_reg_465);

assign sext_ln712_4_fu_311_p1 = $signed(trunc_ln717_8_reg_470);

assign sext_ln712_fu_293_p1 = $signed(trunc_ln_reg_450);

assign sext_ln740_1_fu_373_p1 = $signed(add_ln740_5_reg_505);

assign sext_ln740_2_fu_376_p1 = $signed(add_ln740_6_reg_510);

assign sext_ln740_3_fu_393_p1 = $signed(tmp_1_fu_385_p3);

assign sext_ln740_4_fu_397_p1 = $signed(add_ln740_7_reg_515);

assign sext_ln740_5_fu_417_p1 = $signed(tmp_2_fu_409_p3);

assign sext_ln740_fu_353_p1 = $signed(add_ln740_3_reg_495);

assign shl_ln1171_1_fu_151_p3 = {{p_read14_reg_439}, {7'd0}};

assign shl_ln1171_2_fu_188_p3 = {{ap_port_reg_p_read2}, {7'd0}};

assign shl_ln1171_3_fu_200_p3 = {{ap_port_reg_p_read2}, {1'd0}};

assign shl_ln1_fu_365_p3 = {{add_ln740_fu_359_p2}, {2'd0}};

assign shl_ln_fu_98_p3 = {{ap_port_reg_p_read}, {7'd0}};

assign sub_ln1171_1_fu_132_p2 = (16'd0 - zext_ln1171_fu_106_p1);

assign sub_ln1171_2_fu_162_p2 = (16'd0 - zext_ln1171_2_fu_158_p1);

assign sub_ln1171_3_fu_178_p2 = (zext_ln1171_2_fu_158_p1 - r_V_1_fu_148_p1);

assign sub_ln1171_4_fu_212_p2 = (zext_ln1171_4_fu_208_p1 - zext_ln1171_3_fu_196_p1);

assign sub_ln1171_5_fu_228_p2 = (16'd0 - zext_ln1171_3_fu_196_p1);

assign sub_ln1171_6_fu_244_p2 = (zext_ln1171_3_fu_196_p1 - r_V_2_fu_184_p1);

assign sub_ln1171_7_fu_116_p2 = (r_V_0_fu_94_p1 - zext_ln1171_fu_106_p1);

assign sub_ln1171_fu_110_p2 = (zext_ln1171_fu_106_p1 - r_V_0_fu_94_p1);

assign tmp_1_fu_385_p3 = {{add_ln740_1_fu_379_p2}, {2'd0}};

assign tmp_2_fu_409_p3 = {{add_ln740_2_fu_403_p2}, {2'd0}};

assign zext_ln1171_2_fu_158_p1 = shl_ln1171_1_fu_151_p3;

assign zext_ln1171_3_fu_196_p1 = shl_ln1171_2_fu_188_p3;

assign zext_ln1171_4_fu_208_p1 = shl_ln1171_3_fu_200_p3;

assign zext_ln1171_fu_106_p1 = shl_ln_fu_98_p3;

assign zext_ln712_1_fu_302_p1 = trunc_ln712_1_reg_480;

assign zext_ln712_2_fu_305_p1 = trunc_ln712_2_reg_485;

assign zext_ln712_fu_290_p1 = trunc_ln3_reg_475;

assign zext_ln740_1_fu_356_p1 = add_ln740_4_reg_500;

assign zext_ln740_2_fu_400_p1 = add_ln740_8_reg_520;

assign zext_ln740_fu_314_p1 = trunc_ln4_reg_490;

always @ (posedge ap_clk) begin
    add_ln740_7_reg_515[1:0] <= 2'b00;
end

endmodule //myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s
