-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv15_7A : STD_LOGIC_VECTOR (14 downto 0) := "000000001111010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv12_3A8 : STD_LOGIC_VECTOR (11 downto 0) := "001110101000";
    constant ap_const_lv12_E88 : STD_LOGIC_VECTOR (11 downto 0) := "111010001000";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_read14_reg_439 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_450 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln717_5_reg_455 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_6_reg_460 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_7_reg_465 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_8_reg_470 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln3_reg_475 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln712_1_reg_480 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln712_2_reg_485 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln4_reg_490 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln740_3_fu_317_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_3_reg_495 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln740_4_fu_323_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_4_reg_500 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_5_fu_329_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_5_reg_505 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_6_fu_335_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_6_reg_510 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_7_fu_341_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_7_reg_515 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_8_fu_347_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_8_reg_520 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_port_reg_p_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_76_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_76_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_98_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_fu_106_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_0_fu_94_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_7_fu_116_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_1_fu_132_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_1_fu_151_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_2_fu_158_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_2_fu_162_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_148_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_2_fu_188_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1171_3_fu_200_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1171_4_fu_208_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1171_3_fu_196_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_4_fu_212_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_5_fu_228_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_184_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_fu_110_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_3_fu_178_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_76_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1171_6_fu_244_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln712_2_fu_299_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_3_fu_308_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_fu_290_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_fu_293_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_4_fu_311_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_1_fu_302_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_1_fu_296_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_2_fu_305_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln740_fu_314_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln740_1_fu_356_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln740_fu_353_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln740_fu_359_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln740_2_fu_376_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln740_1_fu_373_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln740_1_fu_379_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_385_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln740_2_fu_400_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln740_4_fu_397_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln740_2_fu_403_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_409_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1_fu_365_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln740_3_fu_393_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln740_5_fu_417_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal grp_fu_76_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_8ns_8ns_15_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    mul_8ns_8ns_15_3_1_U7 : component myproject_mul_8ns_8ns_15_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_76_p0,
        din1 => grp_fu_76_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_76_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln740_3_reg_495 <= add_ln740_3_fu_317_p2;
                add_ln740_4_reg_500 <= add_ln740_4_fu_323_p2;
                add_ln740_5_reg_505 <= add_ln740_5_fu_329_p2;
                add_ln740_6_reg_510 <= add_ln740_6_fu_335_p2;
                    add_ln740_7_reg_515(11 downto 2) <= add_ln740_7_fu_341_p2(11 downto 2);
                add_ln740_8_reg_520 <= add_ln740_8_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ap_port_reg_p_read <= p_read;
                ap_port_reg_p_read2 <= p_read2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                p_read14_reg_439 <= p_read1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln3_reg_475 <= sub_ln1171_fu_110_p2(15 downto 5);
                trunc_ln4_reg_490 <= sub_ln1171_6_fu_244_p2(15 downto 5);
                trunc_ln712_1_reg_480 <= sub_ln1171_3_fu_178_p2(15 downto 5);
                trunc_ln712_2_reg_485 <= grp_fu_76_p2(14 downto 5);
                trunc_ln717_5_reg_455 <= sub_ln1171_1_fu_132_p2(15 downto 5);
                trunc_ln717_6_reg_460 <= sub_ln1171_2_fu_162_p2(15 downto 5);
                trunc_ln717_7_reg_465 <= sub_ln1171_4_fu_212_p2(15 downto 5);
                trunc_ln717_8_reg_470 <= sub_ln1171_5_fu_228_p2(15 downto 5);
                trunc_ln_reg_450 <= sub_ln1171_7_fu_116_p2(15 downto 5);
            end if;
        end if;
    end process;
    add_ln740_7_reg_515(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln740_1_fu_379_p2 <= std_logic_vector(signed(sext_ln740_2_fu_376_p1) + signed(sext_ln740_1_fu_373_p1));
    add_ln740_2_fu_403_p2 <= std_logic_vector(unsigned(zext_ln740_2_fu_400_p1) + unsigned(sext_ln740_4_fu_397_p1));
    add_ln740_3_fu_317_p2 <= std_logic_vector(signed(sext_ln712_2_fu_299_p1) + signed(sext_ln712_3_fu_308_p1));
    add_ln740_4_fu_323_p2 <= std_logic_vector(unsigned(zext_ln712_fu_290_p1) + unsigned(ap_const_lv12_3A8));
    add_ln740_5_fu_329_p2 <= std_logic_vector(signed(sext_ln712_fu_293_p1) + signed(sext_ln712_4_fu_311_p1));
    add_ln740_6_fu_335_p2 <= std_logic_vector(unsigned(zext_ln712_1_fu_302_p1) + unsigned(ap_const_lv12_E88));
    add_ln740_7_fu_341_p2 <= std_logic_vector(signed(sext_ln712_1_fu_296_p1) + signed(ap_const_lv12_C00));
    add_ln740_8_fu_347_p2 <= std_logic_vector(unsigned(zext_ln712_2_fu_305_p1) + unsigned(zext_ln740_fu_314_p1));
    add_ln740_fu_359_p2 <= std_logic_vector(unsigned(zext_ln740_1_fu_356_p1) + unsigned(sext_ln740_fu_353_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= shl_ln1_fu_365_p3;
    ap_return_1 <= sext_ln740_3_fu_393_p1;
    ap_return_2 <= sext_ln740_5_fu_417_p1;
    grp_fu_76_p0 <= grp_fu_76_p00(8 - 1 downto 0);
    grp_fu_76_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),15));
    grp_fu_76_p1 <= ap_const_lv15_7A(8 - 1 downto 0);
    r_V_0_fu_94_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_p_read),16));
    r_V_1_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read14_reg_439),16));
    r_V_2_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_p_read2),16));
        sext_ln712_1_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_5_reg_455),12));

        sext_ln712_2_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_6_reg_460),12));

        sext_ln712_3_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_7_reg_465),12));

        sext_ln712_4_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_8_reg_470),12));

        sext_ln712_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_450),12));

        sext_ln740_1_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_5_reg_505),13));

        sext_ln740_2_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_6_reg_510),13));

        sext_ln740_3_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_385_p3),16));

        sext_ln740_4_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_7_reg_515),13));

        sext_ln740_5_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_409_p3),16));

        sext_ln740_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_3_reg_495),14));

    shl_ln1171_1_fu_151_p3 <= (p_read14_reg_439 & ap_const_lv7_0);
    shl_ln1171_2_fu_188_p3 <= (ap_port_reg_p_read2 & ap_const_lv7_0);
    shl_ln1171_3_fu_200_p3 <= (ap_port_reg_p_read2 & ap_const_lv1_0);
    shl_ln1_fu_365_p3 <= (add_ln740_fu_359_p2 & ap_const_lv2_0);
    shl_ln_fu_98_p3 <= (ap_port_reg_p_read & ap_const_lv7_0);
    sub_ln1171_1_fu_132_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_fu_106_p1));
    sub_ln1171_2_fu_162_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_2_fu_158_p1));
    sub_ln1171_3_fu_178_p2 <= std_logic_vector(unsigned(zext_ln1171_2_fu_158_p1) - unsigned(r_V_1_fu_148_p1));
    sub_ln1171_4_fu_212_p2 <= std_logic_vector(unsigned(zext_ln1171_4_fu_208_p1) - unsigned(zext_ln1171_3_fu_196_p1));
    sub_ln1171_5_fu_228_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_3_fu_196_p1));
    sub_ln1171_6_fu_244_p2 <= std_logic_vector(unsigned(zext_ln1171_3_fu_196_p1) - unsigned(r_V_2_fu_184_p1));
    sub_ln1171_7_fu_116_p2 <= std_logic_vector(unsigned(r_V_0_fu_94_p1) - unsigned(zext_ln1171_fu_106_p1));
    sub_ln1171_fu_110_p2 <= std_logic_vector(unsigned(zext_ln1171_fu_106_p1) - unsigned(r_V_0_fu_94_p1));
    tmp_1_fu_385_p3 <= (add_ln740_1_fu_379_p2 & ap_const_lv2_0);
    tmp_2_fu_409_p3 <= (add_ln740_2_fu_403_p2 & ap_const_lv2_0);
    zext_ln1171_2_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_1_fu_151_p3),16));
    zext_ln1171_3_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_2_fu_188_p3),16));
    zext_ln1171_4_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_3_fu_200_p3),16));
    zext_ln1171_fu_106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_98_p3),16));
    zext_ln712_1_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln712_1_reg_480),12));
    zext_ln712_2_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln712_2_reg_485),12));
    zext_ln712_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_475),12));
    zext_ln740_1_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln740_4_reg_500),14));
    zext_ln740_2_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln740_8_reg_520),13));
    zext_ln740_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_reg_490),12));
end behav;
