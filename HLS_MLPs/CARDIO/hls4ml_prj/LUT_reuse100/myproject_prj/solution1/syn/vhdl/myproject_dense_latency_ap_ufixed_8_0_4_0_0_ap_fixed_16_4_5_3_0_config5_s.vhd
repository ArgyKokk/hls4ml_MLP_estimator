-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv15_7A : STD_LOGIC_VECTOR (14 downto 0) := "000000001111010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv12_3A8 : STD_LOGIC_VECTOR (11 downto 0) := "001110101000";
    constant ap_const_lv12_E88 : STD_LOGIC_VECTOR (11 downto 0) := "111010001000";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln_reg_441 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_5_reg_446 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_6_reg_451 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_7_reg_456 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_8_reg_461 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln3_reg_466 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln712_1_reg_471 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln712_2_reg_476 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln4_reg_481 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln740_3_fu_319_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_3_reg_486 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln740_4_fu_325_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_4_reg_491 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_5_fu_331_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_5_reg_496 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_6_fu_337_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_6_reg_501 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_7_fu_343_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_7_reg_506 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_8_fu_349_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln740_8_reg_511 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1171_fu_76_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_fu_76_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_93_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_fu_101_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_0_fu_89_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_7_fu_111_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_1_fu_127_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_1_fu_152_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_2_fu_160_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_2_fu_164_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_143_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_2_fu_190_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1171_3_fu_202_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1171_4_fu_210_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1171_3_fu_198_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_4_fu_214_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_5_fu_230_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_186_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_fu_105_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_3_fu_180_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1171_fu_76_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1171_6_fu_246_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln712_2_fu_301_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_3_fu_310_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_fu_292_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_fu_295_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_4_fu_313_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_1_fu_304_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_1_fu_298_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_2_fu_307_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln740_fu_316_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln740_1_fu_358_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln740_fu_355_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln740_fu_361_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln740_2_fu_378_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln740_1_fu_375_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln740_1_fu_381_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_387_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln740_2_fu_402_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln740_4_fu_399_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln740_2_fu_405_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_411_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1_fu_367_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln740_3_fu_395_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln740_5_fu_419_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal mul_ln1171_fu_76_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_8ns_8ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    mul_8ns_8ns_15_1_1_U7 : component myproject_mul_8ns_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln1171_fu_76_p0,
        din1 => mul_ln1171_fu_76_p1,
        dout => mul_ln1171_fu_76_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln740_3_reg_486 <= add_ln740_3_fu_319_p2;
                add_ln740_4_reg_491 <= add_ln740_4_fu_325_p2;
                add_ln740_5_reg_496 <= add_ln740_5_fu_331_p2;
                add_ln740_6_reg_501 <= add_ln740_6_fu_337_p2;
                    add_ln740_7_reg_506(11 downto 2) <= add_ln740_7_fu_343_p2(11 downto 2);
                add_ln740_8_reg_511 <= add_ln740_8_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln3_reg_466 <= sub_ln1171_fu_105_p2(15 downto 5);
                trunc_ln4_reg_481 <= sub_ln1171_6_fu_246_p2(15 downto 5);
                trunc_ln712_1_reg_471 <= sub_ln1171_3_fu_180_p2(15 downto 5);
                trunc_ln712_2_reg_476 <= mul_ln1171_fu_76_p2(14 downto 5);
                trunc_ln717_5_reg_446 <= sub_ln1171_1_fu_127_p2(15 downto 5);
                trunc_ln717_6_reg_451 <= sub_ln1171_2_fu_164_p2(15 downto 5);
                trunc_ln717_7_reg_456 <= sub_ln1171_4_fu_214_p2(15 downto 5);
                trunc_ln717_8_reg_461 <= sub_ln1171_5_fu_230_p2(15 downto 5);
                trunc_ln_reg_441 <= sub_ln1171_7_fu_111_p2(15 downto 5);
            end if;
        end if;
    end process;
    add_ln740_7_reg_506(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln740_1_fu_381_p2 <= std_logic_vector(signed(sext_ln740_2_fu_378_p1) + signed(sext_ln740_1_fu_375_p1));
    add_ln740_2_fu_405_p2 <= std_logic_vector(unsigned(zext_ln740_2_fu_402_p1) + unsigned(sext_ln740_4_fu_399_p1));
    add_ln740_3_fu_319_p2 <= std_logic_vector(signed(sext_ln712_2_fu_301_p1) + signed(sext_ln712_3_fu_310_p1));
    add_ln740_4_fu_325_p2 <= std_logic_vector(unsigned(zext_ln712_fu_292_p1) + unsigned(ap_const_lv12_3A8));
    add_ln740_5_fu_331_p2 <= std_logic_vector(signed(sext_ln712_fu_295_p1) + signed(sext_ln712_4_fu_313_p1));
    add_ln740_6_fu_337_p2 <= std_logic_vector(unsigned(zext_ln712_1_fu_304_p1) + unsigned(ap_const_lv12_E88));
    add_ln740_7_fu_343_p2 <= std_logic_vector(signed(sext_ln712_1_fu_298_p1) + signed(ap_const_lv12_C00));
    add_ln740_8_fu_349_p2 <= std_logic_vector(unsigned(zext_ln712_2_fu_307_p1) + unsigned(zext_ln740_fu_316_p1));
    add_ln740_fu_361_p2 <= std_logic_vector(unsigned(zext_ln740_1_fu_358_p1) + unsigned(sext_ln740_fu_355_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= shl_ln1_fu_367_p3;
    ap_return_1 <= sext_ln740_3_fu_395_p1;
    ap_return_2 <= sext_ln740_5_fu_419_p1;
    mul_ln1171_fu_76_p0 <= mul_ln1171_fu_76_p00(8 - 1 downto 0);
    mul_ln1171_fu_76_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),15));
    mul_ln1171_fu_76_p1 <= ap_const_lv15_7A(8 - 1 downto 0);
    r_V_0_fu_89_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),16));
    r_V_1_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),16));
    r_V_2_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read2),16));
        sext_ln712_1_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_5_reg_446),12));

        sext_ln712_2_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_6_reg_451),12));

        sext_ln712_3_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_7_reg_456),12));

        sext_ln712_4_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_8_reg_461),12));

        sext_ln712_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_441),12));

        sext_ln740_1_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_5_reg_496),13));

        sext_ln740_2_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_6_reg_501),13));

        sext_ln740_3_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_387_p3),16));

        sext_ln740_4_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_7_reg_506),13));

        sext_ln740_5_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_411_p3),16));

        sext_ln740_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln740_3_reg_486),14));

    shl_ln1171_1_fu_152_p3 <= (p_read1 & ap_const_lv7_0);
    shl_ln1171_2_fu_190_p3 <= (p_read2 & ap_const_lv7_0);
    shl_ln1171_3_fu_202_p3 <= (p_read2 & ap_const_lv1_0);
    shl_ln1_fu_367_p3 <= (add_ln740_fu_361_p2 & ap_const_lv2_0);
    shl_ln_fu_93_p3 <= (p_read & ap_const_lv7_0);
    sub_ln1171_1_fu_127_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_fu_101_p1));
    sub_ln1171_2_fu_164_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_2_fu_160_p1));
    sub_ln1171_3_fu_180_p2 <= std_logic_vector(unsigned(zext_ln1171_2_fu_160_p1) - unsigned(r_V_1_fu_143_p1));
    sub_ln1171_4_fu_214_p2 <= std_logic_vector(unsigned(zext_ln1171_4_fu_210_p1) - unsigned(zext_ln1171_3_fu_198_p1));
    sub_ln1171_5_fu_230_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_3_fu_198_p1));
    sub_ln1171_6_fu_246_p2 <= std_logic_vector(unsigned(zext_ln1171_3_fu_198_p1) - unsigned(r_V_2_fu_186_p1));
    sub_ln1171_7_fu_111_p2 <= std_logic_vector(unsigned(r_V_0_fu_89_p1) - unsigned(zext_ln1171_fu_101_p1));
    sub_ln1171_fu_105_p2 <= std_logic_vector(unsigned(zext_ln1171_fu_101_p1) - unsigned(r_V_0_fu_89_p1));
    tmp_1_fu_387_p3 <= (add_ln740_1_fu_381_p2 & ap_const_lv2_0);
    tmp_2_fu_411_p3 <= (add_ln740_2_fu_405_p2 & ap_const_lv2_0);
    zext_ln1171_2_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_1_fu_152_p3),16));
    zext_ln1171_3_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_2_fu_190_p3),16));
    zext_ln1171_4_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_3_fu_202_p3),16));
    zext_ln1171_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_93_p3),16));
    zext_ln712_1_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln712_1_reg_471),12));
    zext_ln712_2_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln712_2_reg_476),12));
    zext_ln712_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_466),12));
    zext_ln740_1_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln740_4_reg_491),14));
    zext_ln740_2_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln740_8_reg_511),13));
    zext_ln740_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_reg_481),12));
end behav;
