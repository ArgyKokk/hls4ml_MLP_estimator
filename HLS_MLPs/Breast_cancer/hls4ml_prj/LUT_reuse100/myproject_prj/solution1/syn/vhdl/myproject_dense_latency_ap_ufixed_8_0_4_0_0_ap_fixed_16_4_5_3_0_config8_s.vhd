-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv14_31 : STD_LOGIC_VECTOR (13 downto 0) := "00000000110001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_read_9_reg_238 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln717_5_reg_243 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_port_reg_p_read1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln1171_fu_64_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_fu_64_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1171_fu_64_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_fu_92_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_1_fu_99_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_fu_103_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_109_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1171_3_fu_130_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1171_4_fu_142_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1171_2_fu_138_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_3_fu_150_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1171_fu_154_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln5_fu_160_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_174_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_2_fu_126_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1171_5_fu_182_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1171_1_fu_186_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln717_9_fu_192_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1171_4_fu_170_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1171_fu_119_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln712_fu_206_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln712_fu_202_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln717_fu_123_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln712_1_fu_216_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln712_1_fu_212_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln68_fu_222_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal mul_ln1171_fu_64_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_8ns_7ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    mul_8ns_7ns_14_1_1_U20 : component myproject_mul_8ns_7ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => mul_ln1171_fu_64_p0,
        din1 => mul_ln1171_fu_64_p1,
        dout => mul_ln1171_fu_64_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ap_port_reg_p_read1 <= p_read1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                lshr_ln717_5_reg_243 <= mul_ln1171_fu_64_p2(13 downto 3);
                p_read_9_reg_238 <= p_read;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1171_fu_154_p2 <= std_logic_vector(unsigned(zext_ln1171_2_fu_138_p1) + unsigned(zext_ln1171_3_fu_150_p1));
    add_ln712_1_fu_216_p2 <= std_logic_vector(signed(sext_ln712_fu_202_p1) + signed(zext_ln717_fu_123_p1));
    add_ln712_fu_206_p2 <= std_logic_vector(unsigned(zext_ln1171_4_fu_170_p1) + unsigned(sext_ln1171_fu_119_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= sext_ln712_1_fu_212_p1;
    ap_return_1 <= sext_ln68_fu_222_p1;
    mul_ln1171_fu_64_p0 <= mul_ln1171_fu_64_p00(8 - 1 downto 0);
    mul_ln1171_fu_64_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),14));
    mul_ln1171_fu_64_p1 <= ap_const_lv14_31(7 - 1 downto 0);
    r_V_2_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_p_read1),16));
        sext_ln1171_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_109_p4),14));

        sext_ln68_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_1_fu_216_p2),16));

        sext_ln712_1_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_fu_206_p2),16));

        sext_ln712_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_9_fu_192_p4),14));

    shl_ln1171_3_fu_130_p3 <= (ap_port_reg_p_read1 & ap_const_lv6_0);
    shl_ln1171_4_fu_142_p3 <= (ap_port_reg_p_read1 & ap_const_lv4_0);
    shl_ln_fu_92_p3 <= (p_read_9_reg_238 & ap_const_lv7_0);
    sub_ln1171_1_fu_186_p2 <= std_logic_vector(unsigned(r_V_2_fu_126_p1) - unsigned(zext_ln1171_5_fu_182_p1));
    sub_ln1171_fu_103_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln1171_1_fu_99_p1));
    tmp_fu_174_p3 <= (ap_port_reg_p_read1 & ap_const_lv7_0);
    trunc_ln5_fu_160_p4 <= add_ln1171_fu_154_p2(14 downto 3);
    trunc_ln717_9_fu_192_p4 <= sub_ln1171_1_fu_186_p2(15 downto 3);
    trunc_ln_fu_109_p4 <= sub_ln1171_fu_103_p2(15 downto 3);
    zext_ln1171_1_fu_99_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_92_p3),16));
    zext_ln1171_2_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_3_fu_130_p3),15));
    zext_ln1171_3_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_4_fu_142_p3),15));
    zext_ln1171_4_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln5_fu_160_p4),14));
    zext_ln1171_5_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_174_p3),16));
    zext_ln717_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln717_5_reg_243),14));
end behav;
