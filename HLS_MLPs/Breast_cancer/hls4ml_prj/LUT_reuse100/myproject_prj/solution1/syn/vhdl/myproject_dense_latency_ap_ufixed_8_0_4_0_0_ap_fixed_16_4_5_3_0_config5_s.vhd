-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv12_B : STD_LOGIC_VECTOR (11 downto 0) := "000000001011";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_lv14_2C : STD_LOGIC_VECTOR (13 downto 0) := "00000000101100";
    constant ap_const_lv14_3B : STD_LOGIC_VECTOR (13 downto 0) := "00000000111011";
    constant ap_const_lv15_7FD2 : STD_LOGIC_VECTOR (14 downto 0) := "111111111010010";
    constant ap_const_lv16_FF9D : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011101";
    constant ap_const_lv16_FFBD : STD_LOGIC_VECTOR (15 downto 0) := "1111111110111101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_181 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_read_13_reg_465 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_reg_470 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_read_12_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_11_reg_481 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal lshr_ln717_s_reg_486 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln712_2_fu_213_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln712_2_reg_491 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_read_10_reg_496 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal lshr_ln717_8_reg_501 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_3_reg_506 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln712_3_fu_365_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_3_reg_511 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_7_fu_381_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln712_7_reg_516 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln717_1_reg_521 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln712_8_fu_411_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln712_8_reg_526 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln717_2_reg_531 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_port_reg_p_read1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_p_read4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_108_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln717_fu_185_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1171_10_fu_200_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_13_fu_208_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1171_fu_219_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1171_6_fu_265_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_3_fu_394_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_fu_417_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_108_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_151_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_161_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_fu_190_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln717_1_fu_205_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1171_8_fu_227_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1171_15_fu_235_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1171_1_fu_239_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1171_4_fu_245_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_14_fu_223_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1171_2_fu_249_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_270_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1171_5_fu_282_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1171_7_fu_278_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_8_fu_290_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1171_fu_294_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_fu_300_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1171_6_fu_314_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1171_7_fu_325_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1171_12_fu_332_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1171_11_fu_321_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1171_fu_336_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln717_s_fu_342_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln712_fu_362_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1171_9_fu_310_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln712_fu_359_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln717_cast_fu_356_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_6_fu_371_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln712_5_fu_377_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln717_cast_fu_352_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1171_5_fu_390_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1171_16_fu_387_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_5_fu_398_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln712_6_fu_408_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln712_4_fu_404_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sext_ln1171_fu_421_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1171_3_fu_424_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln712_fu_427_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln712_1_fu_437_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln712_2_fu_433_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln712_4_fu_440_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln712_3_fu_446_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln712_8_cast_fu_450_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_8ns_9s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_8ns_9s_16_1_1_U9 : component myproject_mul_8ns_9s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_108_p0,
        din1 => grp_fu_108_p1,
        dout => grp_fu_108_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln712_2_reg_491 <= add_ln712_2_fu_213_p2;
                lshr_ln717_s_reg_486 <= grp_fu_161_p1(13 downto 3);
                p_read_11_reg_481 <= ap_port_reg_p_read3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln712_3_reg_511 <= add_ln712_3_fu_365_p2;
                add_ln712_7_reg_516 <= add_ln712_7_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln712_8_reg_526 <= add_ln712_8_fu_411_p2;
                trunc_ln717_1_reg_521 <= grp_fu_108_p2(15 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ap_port_reg_p_read1 <= p_read1;
                ap_port_reg_p_read2 <= p_read2;
                ap_port_reg_p_read3 <= p_read3;
                ap_port_reg_p_read4 <= p_read4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                lshr_ln717_8_reg_501 <= grp_fu_161_p1(13 downto 3);
                p_read_10_reg_496 <= ap_port_reg_p_read4;
                trunc_ln717_3_reg_506 <= sub_ln1171_2_fu_249_p2(14 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                lshr_ln_reg_470 <= lshr_ln_fu_190_p1(11 downto 3);
                p_read_13_reg_465 <= p_read;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_read_12_reg_475 <= ap_port_reg_p_read2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_181 <= grp_fu_151_p1(14 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln717_2_reg_531 <= grp_fu_108_p2(15 downto 3);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln1171_fu_294_p2 <= std_logic_vector(unsigned(zext_ln1171_7_fu_278_p1) + unsigned(zext_ln1171_8_fu_290_p1));
    add_ln712_2_fu_213_p2 <= std_logic_vector(unsigned(zext_ln717_1_fu_205_p1) + unsigned(reg_181));
    add_ln712_3_fu_365_p2 <= std_logic_vector(unsigned(zext_ln712_fu_362_p1) + unsigned(zext_ln1171_9_fu_310_p1));
    add_ln712_4_fu_440_p2 <= std_logic_vector(unsigned(zext_ln712_1_fu_437_p1) + unsigned(sext_ln712_2_fu_433_p1));
    add_ln712_5_fu_398_p2 <= std_logic_vector(signed(sext_ln1171_5_fu_390_p1) + signed(zext_ln1171_16_fu_387_p1));
    add_ln712_6_fu_371_p2 <= std_logic_vector(signed(sext_ln712_fu_359_p1) + signed(lshr_ln717_cast_fu_356_p1));
    add_ln712_7_fu_381_p2 <= std_logic_vector(signed(sext_ln712_5_fu_377_p1) + signed(trunc_ln717_cast_fu_352_p1));
        add_ln712_8_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_8_reg_526),16));

    add_ln712_8_fu_411_p2 <= std_logic_vector(signed(sext_ln712_6_fu_408_p1) + signed(sext_ln712_4_fu_404_p1));
    add_ln712_fu_427_p2 <= std_logic_vector(signed(sext_ln1171_fu_421_p1) + signed(sext_ln1171_3_fu_424_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= sext_ln712_3_fu_446_p1;
    ap_return_1 <= add_ln712_8_cast_fu_450_p1;

    grp_fu_108_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln717_fu_185_p1, zext_ln1171_10_fu_200_p1, zext_ln1171_13_fu_208_p1, zext_ln1171_fu_219_p1, zext_ln1171_6_fu_265_p1, r_V_3_fu_394_p1, r_V_4_fu_417_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_108_p0 <= r_V_4_fu_417_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_108_p0 <= r_V_3_fu_394_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_108_p0 <= zext_ln1171_6_fu_265_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_108_p0 <= zext_ln1171_fu_219_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_108_p0 <= zext_ln1171_13_fu_208_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_108_p0 <= zext_ln1171_10_fu_200_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_108_p0 <= zext_ln717_fu_185_p1(8 - 1 downto 0);
        else 
            grp_fu_108_p0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_fu_108_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_108_p1 <= ap_const_lv16_FFBD(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_108_p1 <= ap_const_lv16_FF9D(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_108_p1 <= ap_const_lv15_7FD2(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_108_p1 <= ap_const_lv14_3B(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_108_p1 <= ap_const_lv14_2C(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_108_p1 <= ap_const_lv15_64(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_108_p1 <= ap_const_lv12_B(9 - 1 downto 0);
        else 
            grp_fu_108_p1 <= "XXXXXXXXX";
        end if; 
    end process;

    grp_fu_151_p1 <= grp_fu_108_p2(15 - 1 downto 0);
    grp_fu_161_p1 <= grp_fu_108_p2(14 - 1 downto 0);
    lshr_ln717_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln717_s_reg_486),13));
    lshr_ln_fu_190_p1 <= grp_fu_108_p2(12 - 1 downto 0);
    r_V_3_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_11_reg_481),16));
    r_V_4_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_10_reg_496),16));
        sext_ln1171_3_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_2_reg_531),14));

        sext_ln1171_4_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1171_1_fu_239_p2),15));

        sext_ln1171_5_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_181),13));

        sext_ln1171_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_1_reg_521),14));

        sext_ln712_2_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_fu_427_p2),15));

        sext_ln712_3_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_4_fu_440_p2),16));

        sext_ln712_4_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_5_fu_398_p2),15));

        sext_ln712_5_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_6_fu_371_p2),14));

        sext_ln712_6_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_7_reg_516),15));

        sext_ln712_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_3_reg_506),13));

    shl_ln1171_5_fu_282_p3 <= (ap_port_reg_p_read1 & ap_const_lv2_0);
    shl_ln1171_6_fu_314_p3 <= (p_read_12_reg_475 & ap_const_lv5_0);
    shl_ln1171_7_fu_325_p3 <= (p_read_12_reg_475 & ap_const_lv3_0);
    shl_ln1171_8_fu_227_p3 <= (ap_port_reg_p_read4 & ap_const_lv5_0);
    shl_ln_fu_270_p3 <= (ap_port_reg_p_read1 & ap_const_lv6_0);
    sub_ln1171_1_fu_239_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(zext_ln1171_15_fu_235_p1));
    sub_ln1171_2_fu_249_p2 <= std_logic_vector(signed(sext_ln1171_4_fu_245_p1) - signed(zext_ln1171_14_fu_223_p1));
    sub_ln1171_fu_336_p2 <= std_logic_vector(unsigned(zext_ln1171_12_fu_332_p1) - unsigned(zext_ln1171_11_fu_321_p1));
        trunc_ln717_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_s_fu_342_p4),14));

    trunc_ln717_s_fu_342_p4 <= sub_ln1171_fu_336_p2(13 downto 3);
    trunc_ln_fu_300_p4 <= add_ln1171_fu_294_p2(14 downto 3);
    zext_ln1171_10_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_p_read2),15));
    zext_ln1171_11_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_6_fu_314_p3),14));
    zext_ln1171_12_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_7_fu_325_p3),14));
    zext_ln1171_13_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_p_read3),14));
    zext_ln1171_14_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_p_read4),15));
    zext_ln1171_15_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_8_fu_227_p3),14));
    zext_ln1171_16_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln717_8_reg_501),13));
    zext_ln1171_6_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_p_read1),15));
    zext_ln1171_7_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_270_p3),15));
    zext_ln1171_8_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_5_fu_282_p3),15));
    zext_ln1171_9_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_300_p4),13));
    zext_ln1171_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_13_reg_465),14));
    zext_ln712_1_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_3_reg_511),15));
    zext_ln712_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_2_reg_491),13));
    zext_ln717_1_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_470),12));
    zext_ln717_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),12));
end behav;
