// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config10_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_read;
input  [15:0] p_read1;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_subdone;
wire   [9:0] exp_table_address0;
reg    exp_table_ce0;
wire   [17:0] exp_table_q0;
wire   [9:0] exp_table_address1;
reg    exp_table_ce1;
wire   [17:0] exp_table_q1;
wire   [9:0] invert_table_address0;
reg    invert_table_ce0;
wire   [17:0] invert_table_q0;
reg  signed [15:0] p_read_1_reg_339;
wire    ap_block_pp0_stage0_11001;
reg  signed [15:0] p_read_2_reg_345;
wire   [0:0] icmp_ln1549_fu_100_p2;
reg   [0:0] icmp_ln1549_reg_351;
wire   [9:0] y_fu_225_p3;
reg   [9:0] y_reg_356;
wire   [9:0] y_1_fu_251_p3;
reg   [9:0] y_1_reg_361;
reg  signed [17:0] r_V_reg_376;
reg  signed [17:0] r_V_reg_376_pp0_iter4_reg;
reg  signed [17:0] r_V_reg_376_pp0_iter5_reg;
reg  signed [17:0] r_V_1_reg_382;
reg  signed [17:0] r_V_1_reg_382_pp0_iter4_reg;
reg  signed [17:0] r_V_1_reg_382_pp0_iter5_reg;
reg   [17:0] inv_exp_sum_V_reg_393;
wire   [63:0] zext_ln255_fu_259_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln255_1_fu_263_p1;
wire   [63:0] zext_ln265_fu_281_p1;
wire  signed [15:0] icmp_ln1549_fu_100_p0;
wire  signed [15:0] icmp_ln1549_fu_100_p1;
wire   [0:0] xor_ln1549_fu_106_p2;
wire   [15:0] x_max_V_fu_111_p3;
wire  signed [16:0] sext_ln1246_fu_117_p1;
wire  signed [16:0] sext_ln1246_1_fu_120_p1;
wire   [16:0] ret_V_fu_124_p2;
wire   [0:0] p_Result_3_fu_130_p3;
wire   [0:0] p_Result_4_fu_138_p3;
wire   [0:0] xor_ln794_fu_146_p2;
wire  signed [16:0] sext_ln1246_2_fu_164_p1;
wire   [16:0] ret_V_1_fu_167_p2;
wire   [0:0] p_Result_5_fu_173_p3;
wire   [0:0] p_Result_6_fu_181_p3;
wire   [0:0] xor_ln794_1_fu_189_p2;
wire   [0:0] overflow_fu_152_p2;
wire   [0:0] xor_ln340_fu_158_p2;
wire   [9:0] select_ln384_fu_207_p3;
wire   [9:0] tmp_fu_215_p4;
wire   [0:0] overflow_1_fu_195_p2;
wire   [0:0] xor_ln340_1_fu_201_p2;
wire   [9:0] select_ln384_1_fu_233_p3;
wire   [9:0] tmp_1_fu_241_p4;
wire   [17:0] exp_sum_V_fu_267_p2;
wire   [9:0] y_2_fu_271_p4;
wire  signed [17:0] mul_ln1168_fu_292_p0;
wire  signed [27:0] sext_ln1171_fu_286_p1;
wire   [27:0] mul_ln1168_fu_292_p2;
wire  signed [17:0] mul_ln1168_1_fu_311_p0;
wire   [27:0] mul_ln1168_1_fu_311_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to5;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config10_s_exp_table #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .q0(exp_table_q0),
    .address1(exp_table_address1),
    .ce1(exp_table_ce1),
    .q1(exp_table_q1)
);

myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config10_s_invert_table #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table_address0),
    .ce0(invert_table_ce0),
    .q0(invert_table_q0)
);

myproject_mul_18s_18s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 28 ))
mul_18s_18s_28_1_1_U63(
    .din0(mul_ln1168_fu_292_p0),
    .din1(r_V_reg_376_pp0_iter5_reg),
    .dout(mul_ln1168_fu_292_p2)
);

myproject_mul_18s_18s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 28 ))
mul_18s_18s_28_1_1_U64(
    .din0(mul_ln1168_1_fu_311_p0),
    .din1(r_V_1_reg_382_pp0_iter5_reg),
    .dout(mul_ln1168_1_fu_311_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1549_reg_351 <= icmp_ln1549_fu_100_p2;
        p_read_1_reg_339 <= p_read1;
        p_read_2_reg_345 <= p_read;
        y_1_reg_361 <= y_1_fu_251_p3;
        y_reg_356 <= y_fu_225_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        inv_exp_sum_V_reg_393 <= invert_table_q0;
        r_V_1_reg_382_pp0_iter4_reg <= r_V_1_reg_382;
        r_V_1_reg_382_pp0_iter5_reg <= r_V_1_reg_382_pp0_iter4_reg;
        r_V_reg_376_pp0_iter4_reg <= r_V_reg_376;
        r_V_reg_376_pp0_iter5_reg <= r_V_reg_376_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        r_V_1_reg_382 <= exp_table_q0;
        r_V_reg_376 <= exp_table_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table_ce0 = 1'b1;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table_ce1 = 1'b1;
    end else begin
        exp_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        invert_table_ce0 = 1'b1;
    end else begin
        invert_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{mul_ln1168_fu_292_p2[27:12]}};

assign ap_return_1 = {{mul_ln1168_1_fu_311_p2[27:12]}};

assign exp_sum_V_fu_267_p2 = ($signed(r_V_1_reg_382) + $signed(r_V_reg_376));

assign exp_table_address0 = zext_ln255_1_fu_263_p1;

assign exp_table_address1 = zext_ln255_fu_259_p1;

assign icmp_ln1549_fu_100_p0 = p_read;

assign icmp_ln1549_fu_100_p1 = p_read1;

assign icmp_ln1549_fu_100_p2 = (($signed(icmp_ln1549_fu_100_p0) < $signed(icmp_ln1549_fu_100_p1)) ? 1'b1 : 1'b0);

assign invert_table_address0 = zext_ln265_fu_281_p1;

assign mul_ln1168_1_fu_311_p0 = sext_ln1171_fu_286_p1;

assign mul_ln1168_fu_292_p0 = sext_ln1171_fu_286_p1;

assign overflow_1_fu_195_p2 = (xor_ln794_1_fu_189_p2 & p_Result_6_fu_181_p3);

assign overflow_fu_152_p2 = (xor_ln794_fu_146_p2 & p_Result_4_fu_138_p3);

assign p_Result_3_fu_130_p3 = ret_V_fu_124_p2[32'd16];

assign p_Result_4_fu_138_p3 = ret_V_fu_124_p2[32'd15];

assign p_Result_5_fu_173_p3 = ret_V_1_fu_167_p2[32'd16];

assign p_Result_6_fu_181_p3 = ret_V_1_fu_167_p2[32'd15];

assign ret_V_1_fu_167_p2 = ($signed(sext_ln1246_2_fu_164_p1) - $signed(sext_ln1246_1_fu_120_p1));

assign ret_V_fu_124_p2 = ($signed(sext_ln1246_fu_117_p1) - $signed(sext_ln1246_1_fu_120_p1));

assign select_ln384_1_fu_233_p3 = ((overflow_1_fu_195_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign select_ln384_fu_207_p3 = ((overflow_fu_152_p2[0:0] == 1'b1) ? 10'd511 : 10'd512);

assign sext_ln1171_fu_286_p1 = $signed(inv_exp_sum_V_reg_393);

assign sext_ln1246_1_fu_120_p1 = $signed(x_max_V_fu_111_p3);

assign sext_ln1246_2_fu_164_p1 = p_read_1_reg_339;

assign sext_ln1246_fu_117_p1 = p_read_2_reg_345;

assign tmp_1_fu_241_p4 = {{ret_V_1_fu_167_p2[15:6]}};

assign tmp_fu_215_p4 = {{ret_V_fu_124_p2[15:6]}};

assign x_max_V_fu_111_p3 = ((xor_ln1549_fu_106_p2[0:0] == 1'b1) ? p_read_2_reg_345 : p_read_1_reg_339);

assign xor_ln1549_fu_106_p2 = (icmp_ln1549_reg_351 ^ 1'd1);

assign xor_ln340_1_fu_201_p2 = (p_Result_6_fu_181_p3 ^ p_Result_5_fu_173_p3);

assign xor_ln340_fu_158_p2 = (p_Result_4_fu_138_p3 ^ p_Result_3_fu_130_p3);

assign xor_ln794_1_fu_189_p2 = (p_Result_5_fu_173_p3 ^ 1'd1);

assign xor_ln794_fu_146_p2 = (p_Result_3_fu_130_p3 ^ 1'd1);

assign y_1_fu_251_p3 = ((xor_ln340_1_fu_201_p2[0:0] == 1'b1) ? select_ln384_1_fu_233_p3 : tmp_1_fu_241_p4);

assign y_2_fu_271_p4 = {{exp_sum_V_fu_267_p2[17:8]}};

assign y_fu_225_p3 = ((xor_ln340_fu_158_p2[0:0] == 1'b1) ? select_ln384_fu_207_p3 : tmp_fu_215_p4);

assign zext_ln255_1_fu_263_p1 = y_1_reg_361;

assign zext_ln255_fu_259_p1 = y_reg_356;

assign zext_ln265_fu_281_p1 = y_2_fu_271_p4;

endmodule //myproject_softmax_stable_ap_fixed_ap_fixed_16_4_5_3_0_softmax_config10_s
