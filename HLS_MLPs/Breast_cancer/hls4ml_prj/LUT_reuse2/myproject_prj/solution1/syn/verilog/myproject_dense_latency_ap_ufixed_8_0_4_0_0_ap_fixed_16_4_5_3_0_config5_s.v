// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [7:0] p_read_10_reg_650;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] p_read_12_reg_655;
reg   [7:0] p_read111_reg_661;
reg   [8:0] lshr_ln_reg_667;
reg   [10:0] lshr_ln717_8_reg_672;
reg   [11:0] trunc_ln6_reg_677;
reg   [11:0] trunc_ln1171_1_reg_682;
reg   [12:0] trunc_ln717_1_reg_687;
reg   [10:0] lshr_ln717_s_reg_692;
reg   [11:0] trunc_ln717_3_reg_697;
reg   [12:0] trunc_ln717_2_reg_702;
wire    ap_block_pp0_stage1_11001;
wire   [12:0] add_ln712_3_fu_565_p2;
reg   [12:0] add_ln712_3_reg_707;
wire   [12:0] add_ln712_5_fu_571_p2;
reg   [12:0] add_ln712_5_reg_712;
wire   [13:0] add_ln712_7_fu_587_p2;
reg   [13:0] add_ln712_7_reg_717;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [7:0] mul_ln1171_2_fu_108_p0;
wire   [7:0] mul_ln1171_2_fu_108_p1;
wire    ap_block_pp0_stage0;
wire   [7:0] mul_ln1171_1_fu_109_p0;
wire  signed [6:0] mul_ln1171_1_fu_109_p1;
wire   [7:0] mul_ln1171_4_fu_110_p0;
wire   [6:0] mul_ln1171_4_fu_110_p1;
reg   [7:0] grp_fu_111_p0;
wire   [11:0] zext_ln717_fu_316_p1;
wire   [15:0] r_V_4_fu_539_p1;
reg  signed [7:0] grp_fu_111_p1;
wire    ap_block_pp0_stage1;
wire   [7:0] mul_ln1171_fu_112_p0;
wire   [6:0] mul_ln1171_fu_112_p1;
wire   [7:0] mul_ln1171_3_fu_113_p0;
wire  signed [7:0] mul_ln1171_3_fu_113_p1;
wire   [11:0] lshr_ln_fu_321_p1;
wire   [15:0] grp_fu_111_p2;
wire   [13:0] mul_ln1171_fu_112_p2;
wire   [14:0] mul_ln1171_1_fu_109_p2;
wire   [14:0] mul_ln1171_2_fu_108_p2;
wire   [15:0] mul_ln1171_3_fu_113_p2;
wire   [13:0] mul_ln1171_4_fu_110_p2;
wire   [12:0] shl_ln1171_8_fu_405_p3;
wire   [13:0] zext_ln1171_15_fu_413_p1;
wire   [13:0] sub_ln1171_1_fu_417_p2;
wire  signed [14:0] sext_ln1171_4_fu_423_p1;
wire   [14:0] zext_ln1171_14_fu_401_p1;
wire   [14:0] sub_ln1171_2_fu_427_p2;
wire   [13:0] shl_ln_fu_449_p3;
wire   [9:0] shl_ln1171_5_fu_460_p3;
wire   [14:0] zext_ln1171_7_fu_456_p1;
wire   [14:0] zext_ln1171_8_fu_467_p1;
wire   [14:0] add_ln1171_fu_471_p2;
wire   [11:0] trunc_ln_fu_477_p4;
wire   [12:0] shl_ln1171_6_fu_494_p3;
wire   [10:0] shl_ln1171_7_fu_505_p3;
wire   [13:0] zext_ln1171_12_fu_512_p1;
wire   [13:0] zext_ln1171_11_fu_501_p1;
wire   [13:0] sub_ln1171_fu_516_p2;
wire   [10:0] trunc_ln717_s_fu_522_p4;
wire   [11:0] zext_ln717_1_fu_443_p1;
wire   [11:0] add_ln712_2_fu_556_p2;
wire   [12:0] zext_ln712_fu_561_p1;
wire   [12:0] zext_ln1171_9_fu_487_p1;
wire  signed [12:0] sext_ln1171_5_fu_491_p1;
wire   [12:0] zext_ln1171_16_fu_446_p1;
wire  signed [12:0] sext_ln712_fu_553_p1;
wire   [12:0] lshr_ln717_cast_fu_536_p1;
wire   [12:0] add_ln712_6_fu_577_p2;
wire  signed [13:0] sext_ln712_5_fu_583_p1;
wire  signed [13:0] trunc_ln717_cast_fu_532_p1;
wire  signed [13:0] sext_ln1171_fu_593_p1;
wire  signed [13:0] sext_ln1171_3_fu_596_p1;
wire   [13:0] add_ln712_fu_599_p2;
wire   [14:0] zext_ln712_1_fu_609_p1;
wire  signed [14:0] sext_ln712_2_fu_605_p1;
wire   [14:0] add_ln712_4_fu_612_p2;
wire  signed [14:0] sext_ln712_6_fu_625_p1;
wire  signed [14:0] sext_ln712_4_fu_622_p1;
wire   [14:0] add_ln712_8_fu_628_p2;
wire  signed [15:0] sext_ln712_3_fu_618_p1;
wire  signed [15:0] add_ln712_8_cast_fu_634_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire   [14:0] mul_ln1171_1_fu_109_p00;
wire   [14:0] mul_ln1171_2_fu_108_p00;
wire   [15:0] mul_ln1171_3_fu_113_p00;
wire   [13:0] mul_ln1171_4_fu_110_p00;
wire   [13:0] mul_ln1171_fu_112_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

myproject_mul_8ns_8ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_8ns_8ns_15_1_1_U39(
    .din0(mul_ln1171_2_fu_108_p0),
    .din1(mul_ln1171_2_fu_108_p1),
    .dout(mul_ln1171_2_fu_108_p2)
);

myproject_mul_8ns_7s_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 15 ))
mul_8ns_7s_15_1_1_U40(
    .din0(mul_ln1171_1_fu_109_p0),
    .din1(mul_ln1171_1_fu_109_p1),
    .dout(mul_ln1171_1_fu_109_p2)
);

myproject_mul_8ns_7ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
mul_8ns_7ns_14_1_1_U41(
    .din0(mul_ln1171_4_fu_110_p0),
    .din1(mul_ln1171_4_fu_110_p1),
    .dout(mul_ln1171_4_fu_110_p2)
);

myproject_mul_8ns_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8s_16_1_1_U42(
    .din0(grp_fu_111_p0),
    .din1(grp_fu_111_p1),
    .dout(grp_fu_111_p2)
);

myproject_mul_8ns_7ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
mul_8ns_7ns_14_1_1_U43(
    .din0(mul_ln1171_fu_112_p0),
    .din1(mul_ln1171_fu_112_p1),
    .dout(mul_ln1171_fu_112_p2)
);

myproject_mul_8ns_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8s_16_1_1_U44(
    .din0(mul_ln1171_3_fu_113_p0),
    .din1(mul_ln1171_3_fu_113_p1),
    .dout(mul_ln1171_3_fu_113_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln712_3_reg_707 <= add_ln712_3_fu_565_p2;
        add_ln712_5_reg_712 <= add_ln712_5_fu_571_p2;
        add_ln712_7_reg_717 <= add_ln712_7_fu_587_p2;
        trunc_ln717_2_reg_702 <= {{grp_fu_111_p2[15:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln717_8_reg_672 <= {{mul_ln1171_fu_112_p2[13:3]}};
        lshr_ln717_s_reg_692 <= {{mul_ln1171_4_fu_110_p2[13:3]}};
        lshr_ln_reg_667 <= {{lshr_ln_fu_321_p1[11:3]}};
        p_read111_reg_661 <= p_read1;
        p_read_10_reg_650 <= p_read4;
        p_read_12_reg_655 <= p_read2;
        trunc_ln1171_1_reg_682 <= {{mul_ln1171_2_fu_108_p2[14:3]}};
        trunc_ln6_reg_677 <= {{mul_ln1171_1_fu_109_p2[14:3]}};
        trunc_ln717_1_reg_687 <= {{mul_ln1171_3_fu_113_p2[15:3]}};
        trunc_ln717_3_reg_697 <= {{sub_ln1171_2_fu_427_p2[14:3]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_111_p0 = r_V_4_fu_539_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_111_p0 = zext_ln717_fu_316_p1;
        end else begin
            grp_fu_111_p0 = 'bx;
        end
    end else begin
        grp_fu_111_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_111_p1 = 16'd65469;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_111_p1 = 12'd11;
        end else begin
            grp_fu_111_p1 = 'bx;
        end
    end else begin
        grp_fu_111_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1171_fu_471_p2 = (zext_ln1171_7_fu_456_p1 + zext_ln1171_8_fu_467_p1);

assign add_ln712_2_fu_556_p2 = (zext_ln717_1_fu_443_p1 + trunc_ln1171_1_reg_682);

assign add_ln712_3_fu_565_p2 = (zext_ln712_fu_561_p1 + zext_ln1171_9_fu_487_p1);

assign add_ln712_4_fu_612_p2 = ($signed(zext_ln712_1_fu_609_p1) + $signed(sext_ln712_2_fu_605_p1));

assign add_ln712_5_fu_571_p2 = ($signed(sext_ln1171_5_fu_491_p1) + $signed(zext_ln1171_16_fu_446_p1));

assign add_ln712_6_fu_577_p2 = ($signed(sext_ln712_fu_553_p1) + $signed(lshr_ln717_cast_fu_536_p1));

assign add_ln712_7_fu_587_p2 = ($signed(sext_ln712_5_fu_583_p1) + $signed(trunc_ln717_cast_fu_532_p1));

assign add_ln712_8_cast_fu_634_p1 = $signed(add_ln712_8_fu_628_p2);

assign add_ln712_8_fu_628_p2 = ($signed(sext_ln712_6_fu_625_p1) + $signed(sext_ln712_4_fu_622_p1));

assign add_ln712_fu_599_p2 = ($signed(sext_ln1171_fu_593_p1) + $signed(sext_ln1171_3_fu_596_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = sext_ln712_3_fu_618_p1;

assign ap_return_1 = add_ln712_8_cast_fu_634_p1;

assign lshr_ln717_cast_fu_536_p1 = lshr_ln717_s_reg_692;

assign lshr_ln_fu_321_p1 = grp_fu_111_p2;

assign mul_ln1171_1_fu_109_p0 = mul_ln1171_1_fu_109_p00;

assign mul_ln1171_1_fu_109_p00 = p_read1;

assign mul_ln1171_1_fu_109_p1 = 15'd32722;

assign mul_ln1171_2_fu_108_p0 = mul_ln1171_2_fu_108_p00;

assign mul_ln1171_2_fu_108_p00 = p_read2;

assign mul_ln1171_2_fu_108_p1 = 15'd100;

assign mul_ln1171_3_fu_113_p0 = mul_ln1171_3_fu_113_p00;

assign mul_ln1171_3_fu_113_p00 = p_read3;

assign mul_ln1171_3_fu_113_p1 = 16'd65437;

assign mul_ln1171_4_fu_110_p0 = mul_ln1171_4_fu_110_p00;

assign mul_ln1171_4_fu_110_p00 = p_read3;

assign mul_ln1171_4_fu_110_p1 = 14'd44;

assign mul_ln1171_fu_112_p0 = mul_ln1171_fu_112_p00;

assign mul_ln1171_fu_112_p00 = p_read;

assign mul_ln1171_fu_112_p1 = 14'd59;

assign r_V_4_fu_539_p1 = p_read_10_reg_650;

assign sext_ln1171_3_fu_596_p1 = $signed(trunc_ln717_2_reg_702);

assign sext_ln1171_4_fu_423_p1 = $signed(sub_ln1171_1_fu_417_p2);

assign sext_ln1171_5_fu_491_p1 = $signed(trunc_ln6_reg_677);

assign sext_ln1171_fu_593_p1 = $signed(trunc_ln717_1_reg_687);

assign sext_ln712_2_fu_605_p1 = $signed(add_ln712_fu_599_p2);

assign sext_ln712_3_fu_618_p1 = $signed(add_ln712_4_fu_612_p2);

assign sext_ln712_4_fu_622_p1 = $signed(add_ln712_5_reg_712);

assign sext_ln712_5_fu_583_p1 = $signed(add_ln712_6_fu_577_p2);

assign sext_ln712_6_fu_625_p1 = $signed(add_ln712_7_reg_717);

assign sext_ln712_fu_553_p1 = $signed(trunc_ln717_3_reg_697);

assign shl_ln1171_5_fu_460_p3 = {{p_read111_reg_661}, {2'd0}};

assign shl_ln1171_6_fu_494_p3 = {{p_read_12_reg_655}, {5'd0}};

assign shl_ln1171_7_fu_505_p3 = {{p_read_12_reg_655}, {3'd0}};

assign shl_ln1171_8_fu_405_p3 = {{p_read4}, {5'd0}};

assign shl_ln_fu_449_p3 = {{p_read111_reg_661}, {6'd0}};

assign sub_ln1171_1_fu_417_p2 = (14'd0 - zext_ln1171_15_fu_413_p1);

assign sub_ln1171_2_fu_427_p2 = ($signed(sext_ln1171_4_fu_423_p1) - $signed(zext_ln1171_14_fu_401_p1));

assign sub_ln1171_fu_516_p2 = (zext_ln1171_12_fu_512_p1 - zext_ln1171_11_fu_501_p1);

assign trunc_ln717_cast_fu_532_p1 = $signed(trunc_ln717_s_fu_522_p4);

assign trunc_ln717_s_fu_522_p4 = {{sub_ln1171_fu_516_p2[13:3]}};

assign trunc_ln_fu_477_p4 = {{add_ln1171_fu_471_p2[14:3]}};

assign zext_ln1171_11_fu_501_p1 = shl_ln1171_6_fu_494_p3;

assign zext_ln1171_12_fu_512_p1 = shl_ln1171_7_fu_505_p3;

assign zext_ln1171_14_fu_401_p1 = p_read4;

assign zext_ln1171_15_fu_413_p1 = shl_ln1171_8_fu_405_p3;

assign zext_ln1171_16_fu_446_p1 = lshr_ln717_8_reg_672;

assign zext_ln1171_7_fu_456_p1 = shl_ln_fu_449_p3;

assign zext_ln1171_8_fu_467_p1 = shl_ln1171_5_fu_460_p3;

assign zext_ln1171_9_fu_487_p1 = trunc_ln_fu_477_p4;

assign zext_ln712_1_fu_609_p1 = add_ln712_3_reg_707;

assign zext_ln712_fu_561_p1 = add_ln712_2_fu_556_p2;

assign zext_ln717_1_fu_443_p1 = lshr_ln_reg_667;

assign zext_ln717_fu_316_p1 = p_read;

endmodule //myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s
