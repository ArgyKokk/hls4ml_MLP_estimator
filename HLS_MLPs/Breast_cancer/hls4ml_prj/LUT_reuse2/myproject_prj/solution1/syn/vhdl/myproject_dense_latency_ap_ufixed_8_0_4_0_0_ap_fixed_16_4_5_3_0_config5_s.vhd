-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_lv15_7FD2 : STD_LOGIC_VECTOR (14 downto 0) := "111111111010010";
    constant ap_const_lv14_2C : STD_LOGIC_VECTOR (13 downto 0) := "00000000101100";
    constant ap_const_lv12_B : STD_LOGIC_VECTOR (11 downto 0) := "000000001011";
    constant ap_const_lv16_FFBD : STD_LOGIC_VECTOR (15 downto 0) := "1111111110111101";
    constant ap_const_lv14_3B : STD_LOGIC_VECTOR (13 downto 0) := "00000000111011";
    constant ap_const_lv16_FF9D : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal p_read_10_reg_650 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_12_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read111_reg_661 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_reg_667 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln717_8_reg_672 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln6_reg_677 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1171_1_reg_682 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln717_1_reg_687 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln717_s_reg_692 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_3_reg_697 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln717_2_reg_702 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln712_3_fu_565_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_3_reg_707 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_5_fu_571_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_5_reg_712 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_7_fu_587_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln712_7_reg_717 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal mul_ln1171_2_fu_108_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_2_fu_108_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln1171_1_fu_109_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_1_fu_109_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1171_4_fu_110_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_4_fu_110_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_111_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln717_fu_316_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_4_fu_539_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_111_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal mul_ln1171_fu_112_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_fu_112_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1171_3_fu_113_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_3_fu_113_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_321_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_111_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1171_fu_112_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1171_1_fu_109_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1171_2_fu_108_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1171_3_fu_113_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1171_4_fu_110_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1171_8_fu_405_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1171_15_fu_413_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1171_1_fu_417_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1171_4_fu_423_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_14_fu_401_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1171_2_fu_427_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_449_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1171_5_fu_460_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1171_7_fu_456_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_8_fu_467_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1171_fu_471_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_fu_477_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1171_6_fu_494_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1171_7_fu_505_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1171_12_fu_512_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1171_11_fu_501_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1171_fu_516_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln717_s_fu_522_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln717_1_fu_443_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln712_2_fu_556_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_fu_561_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1171_9_fu_487_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1171_5_fu_491_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1171_16_fu_446_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln712_fu_553_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln717_cast_fu_536_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_6_fu_577_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln712_5_fu_583_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln717_cast_fu_532_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1171_fu_593_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1171_3_fu_596_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln712_fu_599_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln712_1_fu_609_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln712_2_fu_605_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln712_4_fu_612_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln712_6_fu_625_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln712_4_fu_622_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln712_8_fu_628_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln712_3_fu_618_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln712_8_cast_fu_634_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1171_1_fu_109_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1171_2_fu_108_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1171_3_fu_113_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1171_4_fu_110_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1171_fu_112_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_mul_8ns_8ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component myproject_mul_8ns_7s_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component myproject_mul_8ns_7ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component myproject_mul_8ns_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_8ns_8ns_15_1_1_U39 : component myproject_mul_8ns_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln1171_2_fu_108_p0,
        din1 => mul_ln1171_2_fu_108_p1,
        dout => mul_ln1171_2_fu_108_p2);

    mul_8ns_7s_15_1_1_U40 : component myproject_mul_8ns_7s_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln1171_1_fu_109_p0,
        din1 => mul_ln1171_1_fu_109_p1,
        dout => mul_ln1171_1_fu_109_p2);

    mul_8ns_7ns_14_1_1_U41 : component myproject_mul_8ns_7ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => mul_ln1171_4_fu_110_p0,
        din1 => mul_ln1171_4_fu_110_p1,
        dout => mul_ln1171_4_fu_110_p2);

    mul_8ns_8s_16_1_1_U42 : component myproject_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_111_p0,
        din1 => grp_fu_111_p1,
        dout => grp_fu_111_p2);

    mul_8ns_7ns_14_1_1_U43 : component myproject_mul_8ns_7ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => mul_ln1171_fu_112_p0,
        din1 => mul_ln1171_fu_112_p1,
        dout => mul_ln1171_fu_112_p2);

    mul_8ns_8s_16_1_1_U44 : component myproject_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1171_3_fu_113_p0,
        din1 => mul_ln1171_3_fu_113_p1,
        dout => mul_ln1171_3_fu_113_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln712_3_reg_707 <= add_ln712_3_fu_565_p2;
                add_ln712_5_reg_712 <= add_ln712_5_fu_571_p2;
                add_ln712_7_reg_717 <= add_ln712_7_fu_587_p2;
                trunc_ln717_2_reg_702 <= grp_fu_111_p2(15 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln717_8_reg_672 <= mul_ln1171_fu_112_p2(13 downto 3);
                lshr_ln717_s_reg_692 <= mul_ln1171_4_fu_110_p2(13 downto 3);
                lshr_ln_reg_667 <= lshr_ln_fu_321_p1(11 downto 3);
                p_read111_reg_661 <= p_read1;
                p_read_10_reg_650 <= p_read4;
                p_read_12_reg_655 <= p_read2;
                trunc_ln1171_1_reg_682 <= mul_ln1171_2_fu_108_p2(14 downto 3);
                trunc_ln6_reg_677 <= mul_ln1171_1_fu_109_p2(14 downto 3);
                trunc_ln717_1_reg_687 <= mul_ln1171_3_fu_113_p2(15 downto 3);
                trunc_ln717_3_reg_697 <= sub_ln1171_2_fu_427_p2(14 downto 3);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1171_fu_471_p2 <= std_logic_vector(unsigned(zext_ln1171_7_fu_456_p1) + unsigned(zext_ln1171_8_fu_467_p1));
    add_ln712_2_fu_556_p2 <= std_logic_vector(unsigned(zext_ln717_1_fu_443_p1) + unsigned(trunc_ln1171_1_reg_682));
    add_ln712_3_fu_565_p2 <= std_logic_vector(unsigned(zext_ln712_fu_561_p1) + unsigned(zext_ln1171_9_fu_487_p1));
    add_ln712_4_fu_612_p2 <= std_logic_vector(unsigned(zext_ln712_1_fu_609_p1) + unsigned(sext_ln712_2_fu_605_p1));
    add_ln712_5_fu_571_p2 <= std_logic_vector(signed(sext_ln1171_5_fu_491_p1) + signed(zext_ln1171_16_fu_446_p1));
    add_ln712_6_fu_577_p2 <= std_logic_vector(signed(sext_ln712_fu_553_p1) + signed(lshr_ln717_cast_fu_536_p1));
    add_ln712_7_fu_587_p2 <= std_logic_vector(signed(sext_ln712_5_fu_583_p1) + signed(trunc_ln717_cast_fu_532_p1));
        add_ln712_8_cast_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_8_fu_628_p2),16));

    add_ln712_8_fu_628_p2 <= std_logic_vector(signed(sext_ln712_6_fu_625_p1) + signed(sext_ln712_4_fu_622_p1));
    add_ln712_fu_599_p2 <= std_logic_vector(signed(sext_ln1171_fu_593_p1) + signed(sext_ln1171_3_fu_596_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= sext_ln712_3_fu_618_p1;
    ap_return_1 <= add_ln712_8_cast_fu_634_p1;

    grp_fu_111_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln717_fu_316_p1, r_V_4_fu_539_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_111_p0 <= r_V_4_fu_539_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_111_p0 <= zext_ln717_fu_316_p1(8 - 1 downto 0);
            else 
                grp_fu_111_p0 <= "XXXXXXXX";
            end if;
        else 
            grp_fu_111_p0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_fu_111_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_111_p1 <= ap_const_lv16_FFBD(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_111_p1 <= ap_const_lv12_B(8 - 1 downto 0);
            else 
                grp_fu_111_p1 <= "XXXXXXXX";
            end if;
        else 
            grp_fu_111_p1 <= "XXXXXXXX";
        end if; 
    end process;

    lshr_ln717_cast_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln717_s_reg_692),13));
    lshr_ln_fu_321_p1 <= grp_fu_111_p2(12 - 1 downto 0);
    mul_ln1171_1_fu_109_p0 <= mul_ln1171_1_fu_109_p00(8 - 1 downto 0);
    mul_ln1171_1_fu_109_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),15));
    mul_ln1171_1_fu_109_p1 <= ap_const_lv15_7FD2(7 - 1 downto 0);
    mul_ln1171_2_fu_108_p0 <= mul_ln1171_2_fu_108_p00(8 - 1 downto 0);
    mul_ln1171_2_fu_108_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read2),15));
    mul_ln1171_2_fu_108_p1 <= ap_const_lv15_64(8 - 1 downto 0);
    mul_ln1171_3_fu_113_p0 <= mul_ln1171_3_fu_113_p00(8 - 1 downto 0);
    mul_ln1171_3_fu_113_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read3),16));
    mul_ln1171_3_fu_113_p1 <= ap_const_lv16_FF9D(8 - 1 downto 0);
    mul_ln1171_4_fu_110_p0 <= mul_ln1171_4_fu_110_p00(8 - 1 downto 0);
    mul_ln1171_4_fu_110_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read3),14));
    mul_ln1171_4_fu_110_p1 <= ap_const_lv14_2C(7 - 1 downto 0);
    mul_ln1171_fu_112_p0 <= mul_ln1171_fu_112_p00(8 - 1 downto 0);
    mul_ln1171_fu_112_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),14));
    mul_ln1171_fu_112_p1 <= ap_const_lv14_3B(7 - 1 downto 0);
    r_V_4_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_10_reg_650),16));
        sext_ln1171_3_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_2_reg_702),14));

        sext_ln1171_4_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1171_1_fu_417_p2),15));

        sext_ln1171_5_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_reg_677),13));

        sext_ln1171_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_1_reg_687),14));

        sext_ln712_2_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_fu_599_p2),15));

        sext_ln712_3_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_4_fu_612_p2),16));

        sext_ln712_4_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_5_reg_712),15));

        sext_ln712_5_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_6_fu_577_p2),14));

        sext_ln712_6_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_7_reg_717),15));

        sext_ln712_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_3_reg_697),13));

    shl_ln1171_5_fu_460_p3 <= (p_read111_reg_661 & ap_const_lv2_0);
    shl_ln1171_6_fu_494_p3 <= (p_read_12_reg_655 & ap_const_lv5_0);
    shl_ln1171_7_fu_505_p3 <= (p_read_12_reg_655 & ap_const_lv3_0);
    shl_ln1171_8_fu_405_p3 <= (p_read4 & ap_const_lv5_0);
    shl_ln_fu_449_p3 <= (p_read111_reg_661 & ap_const_lv6_0);
    sub_ln1171_1_fu_417_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(zext_ln1171_15_fu_413_p1));
    sub_ln1171_2_fu_427_p2 <= std_logic_vector(signed(sext_ln1171_4_fu_423_p1) - signed(zext_ln1171_14_fu_401_p1));
    sub_ln1171_fu_516_p2 <= std_logic_vector(unsigned(zext_ln1171_12_fu_512_p1) - unsigned(zext_ln1171_11_fu_501_p1));
        trunc_ln717_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_s_fu_522_p4),14));

    trunc_ln717_s_fu_522_p4 <= sub_ln1171_fu_516_p2(13 downto 3);
    trunc_ln_fu_477_p4 <= add_ln1171_fu_471_p2(14 downto 3);
    zext_ln1171_11_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_6_fu_494_p3),14));
    zext_ln1171_12_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_7_fu_505_p3),14));
    zext_ln1171_14_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read4),15));
    zext_ln1171_15_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_8_fu_405_p3),14));
    zext_ln1171_16_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln717_8_reg_672),13));
    zext_ln1171_7_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_449_p3),15));
    zext_ln1171_8_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_5_fu_460_p3),15));
    zext_ln1171_9_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_477_p4),13));
    zext_ln712_1_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_3_reg_707),15));
    zext_ln712_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_2_fu_556_p2),13));
    zext_ln717_1_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_667),12));
    zext_ln717_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),12));
end behav;
