-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv12_B : STD_LOGIC_VECTOR (11 downto 0) := "000000001011";
    constant ap_const_lv14_2C : STD_LOGIC_VECTOR (13 downto 0) := "00000000101100";
    constant ap_const_lv14_3B : STD_LOGIC_VECTOR (13 downto 0) := "00000000111011";
    constant ap_const_lv15_7FD2 : STD_LOGIC_VECTOR (14 downto 0) := "111111111010010";
    constant ap_const_lv16_FF9D : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011101";
    constant ap_const_lv16_FFBD : STD_LOGIC_VECTOR (15 downto 0) := "1111111110111101";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal p_read_12_reg_746 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read111_reg_752 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_13_reg_759 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_reg_764 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1171_1_reg_769 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln717_1_reg_774 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln717_s_reg_779 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln717_2_reg_784 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln717_3_reg_789 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln717_8_reg_794 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln6_reg_799 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln712_fu_652_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln712_reg_804 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln712_3_fu_667_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_3_reg_809 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_7_fu_683_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln712_7_reg_814 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln717_fu_108_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln717_fu_108_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln1171_4_fu_110_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_4_fu_110_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1171_fu_111_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_fu_111_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1171_1_fu_112_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_1_fu_112_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1171_3_fu_113_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_3_fu_113_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_5_fu_114_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_5_fu_114_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_2_fu_117_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1171_2_fu_117_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln717_fu_108_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1171_2_fu_117_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1171_3_fu_113_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1171_4_fu_110_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1171_5_fu_114_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1171_8_fu_487_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1171_15_fu_495_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1171_1_fu_499_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1171_4_fu_505_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_14_fu_473_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1171_2_fu_509_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1171_fu_111_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_fu_546_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln1171_5_fu_557_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1171_7_fu_553_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1171_8_fu_564_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1171_fu_568_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_fu_574_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1171_1_fu_112_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1171_6_fu_598_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1171_7_fu_609_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1171_12_fu_616_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1171_11_fu_605_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1171_fu_620_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln717_s_fu_626_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1171_fu_640_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1171_3_fu_646_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln717_1_fu_529_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln712_2_fu_658_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln712_fu_663_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1171_9_fu_584_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln712_fu_649_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln717_cast_fu_643_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_6_fu_673_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln712_5_fu_679_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln717_cast_fu_636_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln712_1_fu_698_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln712_2_fu_695_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln712_4_fu_701_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1171_5_fu_692_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1171_16_fu_689_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln712_5_fu_711_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln712_6_fu_721_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln712_4_fu_717_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln712_8_fu_724_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln712_3_fu_707_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln712_8_cast_fu_730_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read1_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1171_1_fu_112_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1171_2_fu_117_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1171_3_fu_113_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1171_4_fu_110_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1171_5_fu_114_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1171_fu_111_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln717_fu_108_p00 : STD_LOGIC_VECTOR (11 downto 0);

    component myproject_mul_8ns_5ns_12_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component myproject_mul_8ns_7ns_14_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component myproject_mul_8ns_7s_15_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component myproject_mul_8ns_8s_16_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_mul_8ns_8ns_15_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    mul_8ns_5ns_12_1_0_U39 : component myproject_mul_8ns_5ns_12_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln717_fu_108_p0,
        din1 => mul_ln717_fu_108_p1,
        dout => mul_ln717_fu_108_p2);

    mul_8ns_7ns_14_1_0_U40 : component myproject_mul_8ns_7ns_14_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => mul_ln1171_4_fu_110_p0,
        din1 => mul_ln1171_4_fu_110_p1,
        dout => mul_ln1171_4_fu_110_p2);

    mul_8ns_7ns_14_1_0_U41 : component myproject_mul_8ns_7ns_14_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => mul_ln1171_fu_111_p0,
        din1 => mul_ln1171_fu_111_p1,
        dout => mul_ln1171_fu_111_p2);

    mul_8ns_7s_15_1_0_U42 : component myproject_mul_8ns_7s_15_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln1171_1_fu_112_p0,
        din1 => mul_ln1171_1_fu_112_p1,
        dout => mul_ln1171_1_fu_112_p2);

    mul_8ns_8s_16_1_0_U43 : component myproject_mul_8ns_8s_16_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1171_3_fu_113_p0,
        din1 => mul_ln1171_3_fu_113_p1,
        dout => mul_ln1171_3_fu_113_p2);

    mul_8ns_8s_16_1_0_U44 : component myproject_mul_8ns_8s_16_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1171_5_fu_114_p0,
        din1 => mul_ln1171_5_fu_114_p1,
        dout => mul_ln1171_5_fu_114_p2);

    mul_8ns_8ns_15_1_0_U45 : component myproject_mul_8ns_8ns_15_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln1171_2_fu_117_p0,
        din1 => mul_ln1171_2_fu_117_p1,
        dout => mul_ln1171_2_fu_117_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                add_ln712_3_reg_809 <= add_ln712_3_fu_667_p2;
                add_ln712_7_reg_814 <= add_ln712_7_fu_683_p2;
                add_ln712_reg_804 <= add_ln712_fu_652_p2;
                lshr_ln717_8_reg_794 <= mul_ln1171_fu_111_p2(13 downto 3);
                lshr_ln717_s_reg_779 <= mul_ln1171_4_fu_110_p2(13 downto 3);
                lshr_ln_reg_764 <= mul_ln717_fu_108_p2(11 downto 3);
                p_read111_reg_752 <= p_read1_int_reg;
                p_read_12_reg_746 <= p_read2_int_reg;
                p_read_13_reg_759 <= p_read_int_reg;
                trunc_ln1171_1_reg_769 <= mul_ln1171_2_fu_117_p2(14 downto 3);
                trunc_ln6_reg_799 <= mul_ln1171_1_fu_112_p2(14 downto 3);
                trunc_ln717_1_reg_774 <= mul_ln1171_3_fu_113_p2(15 downto 3);
                trunc_ln717_2_reg_784 <= mul_ln1171_5_fu_114_p2(15 downto 3);
                trunc_ln717_3_reg_789 <= sub_ln1171_2_fu_509_p2(14 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_0_int_reg <= sext_ln712_3_fu_707_p1;
                ap_return_1_int_reg <= add_ln712_8_cast_fu_730_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read_int_reg <= p_read;
            end if;
        end if;
    end process;
    add_ln1171_fu_568_p2 <= std_logic_vector(unsigned(zext_ln1171_7_fu_553_p1) + unsigned(zext_ln1171_8_fu_564_p1));
    add_ln712_2_fu_658_p2 <= std_logic_vector(unsigned(zext_ln717_1_fu_529_p1) + unsigned(trunc_ln1171_1_reg_769));
    add_ln712_3_fu_667_p2 <= std_logic_vector(unsigned(zext_ln712_fu_663_p1) + unsigned(zext_ln1171_9_fu_584_p1));
    add_ln712_4_fu_701_p2 <= std_logic_vector(unsigned(zext_ln712_1_fu_698_p1) + unsigned(sext_ln712_2_fu_695_p1));
    add_ln712_5_fu_711_p2 <= std_logic_vector(signed(sext_ln1171_5_fu_692_p1) + signed(zext_ln1171_16_fu_689_p1));
    add_ln712_6_fu_673_p2 <= std_logic_vector(signed(sext_ln712_fu_649_p1) + signed(lshr_ln717_cast_fu_643_p1));
    add_ln712_7_fu_683_p2 <= std_logic_vector(signed(sext_ln712_5_fu_679_p1) + signed(trunc_ln717_cast_fu_636_p1));
        add_ln712_8_cast_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_8_fu_724_p2),16));

    add_ln712_8_fu_724_p2 <= std_logic_vector(signed(sext_ln712_6_fu_721_p1) + signed(sext_ln712_4_fu_717_p1));
    add_ln712_fu_652_p2 <= std_logic_vector(signed(sext_ln1171_fu_640_p1) + signed(sext_ln1171_3_fu_646_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(sext_ln712_3_fu_707_p1, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= sext_ln712_3_fu_707_p1;
        else 
            ap_return_0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_1_assign_proc : process(add_ln712_8_cast_fu_730_p1, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= add_ln712_8_cast_fu_730_p1;
        else 
            ap_return_1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    lshr_ln717_cast_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln717_s_reg_779),13));
    mul_ln1171_1_fu_112_p0 <= mul_ln1171_1_fu_112_p00(8 - 1 downto 0);
    mul_ln1171_1_fu_112_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read111_reg_752),15));
    mul_ln1171_1_fu_112_p1 <= ap_const_lv15_7FD2(7 - 1 downto 0);
    mul_ln1171_2_fu_117_p0 <= mul_ln1171_2_fu_117_p00(8 - 1 downto 0);
    mul_ln1171_2_fu_117_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read2_int_reg),15));
    mul_ln1171_2_fu_117_p1 <= ap_const_lv15_64(8 - 1 downto 0);
    mul_ln1171_3_fu_113_p0 <= mul_ln1171_3_fu_113_p00(8 - 1 downto 0);
    mul_ln1171_3_fu_113_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read3_int_reg),16));
    mul_ln1171_3_fu_113_p1 <= ap_const_lv16_FF9D(8 - 1 downto 0);
    mul_ln1171_4_fu_110_p0 <= mul_ln1171_4_fu_110_p00(8 - 1 downto 0);
    mul_ln1171_4_fu_110_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read3_int_reg),14));
    mul_ln1171_4_fu_110_p1 <= ap_const_lv14_2C(7 - 1 downto 0);
    mul_ln1171_5_fu_114_p0 <= mul_ln1171_5_fu_114_p00(8 - 1 downto 0);
    mul_ln1171_5_fu_114_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read4_int_reg),16));
    mul_ln1171_5_fu_114_p1 <= ap_const_lv16_FFBD(8 - 1 downto 0);
    mul_ln1171_fu_111_p0 <= mul_ln1171_fu_111_p00(8 - 1 downto 0);
    mul_ln1171_fu_111_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_13_reg_759),14));
    mul_ln1171_fu_111_p1 <= ap_const_lv14_3B(7 - 1 downto 0);
    mul_ln717_fu_108_p0 <= mul_ln717_fu_108_p00(8 - 1 downto 0);
    mul_ln717_fu_108_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read_int_reg),12));
    mul_ln717_fu_108_p1 <= ap_const_lv12_B(5 - 1 downto 0);
        sext_ln1171_3_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_2_reg_784),14));

        sext_ln1171_4_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1171_1_fu_499_p2),15));

        sext_ln1171_5_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_reg_799),13));

        sext_ln1171_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_1_reg_774),14));

        sext_ln712_2_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_reg_804),15));

        sext_ln712_3_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_4_fu_701_p2),16));

        sext_ln712_4_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_5_fu_711_p2),15));

        sext_ln712_5_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_6_fu_673_p2),14));

        sext_ln712_6_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln712_7_reg_814),15));

        sext_ln712_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_3_reg_789),13));

    shl_ln1171_5_fu_557_p3 <= (p_read111_reg_752 & ap_const_lv2_0);
    shl_ln1171_6_fu_598_p3 <= (p_read_12_reg_746 & ap_const_lv5_0);
    shl_ln1171_7_fu_609_p3 <= (p_read_12_reg_746 & ap_const_lv3_0);
    shl_ln1171_8_fu_487_p3 <= (p_read4_int_reg & ap_const_lv5_0);
    shl_ln_fu_546_p3 <= (p_read111_reg_752 & ap_const_lv6_0);
    sub_ln1171_1_fu_499_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(zext_ln1171_15_fu_495_p1));
    sub_ln1171_2_fu_509_p2 <= std_logic_vector(signed(sext_ln1171_4_fu_505_p1) - signed(zext_ln1171_14_fu_473_p1));
    sub_ln1171_fu_620_p2 <= std_logic_vector(unsigned(zext_ln1171_12_fu_616_p1) - unsigned(zext_ln1171_11_fu_605_p1));
        trunc_ln717_cast_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_s_fu_626_p4),14));

    trunc_ln717_s_fu_626_p4 <= sub_ln1171_fu_620_p2(13 downto 3);
    trunc_ln_fu_574_p4 <= add_ln1171_fu_568_p2(14 downto 3);
    zext_ln1171_11_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_6_fu_598_p3),14));
    zext_ln1171_12_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_7_fu_609_p3),14));
    zext_ln1171_14_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read4_int_reg),15));
    zext_ln1171_15_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_8_fu_487_p3),14));
    zext_ln1171_16_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln717_8_reg_794),13));
    zext_ln1171_7_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_546_p3),15));
    zext_ln1171_8_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1171_5_fu_557_p3),15));
    zext_ln1171_9_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_574_p4),13));
    zext_ln712_1_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_3_reg_809),15));
    zext_ln712_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_2_fu_658_p2),13));
    zext_ln717_1_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_764),12));
end behav;
