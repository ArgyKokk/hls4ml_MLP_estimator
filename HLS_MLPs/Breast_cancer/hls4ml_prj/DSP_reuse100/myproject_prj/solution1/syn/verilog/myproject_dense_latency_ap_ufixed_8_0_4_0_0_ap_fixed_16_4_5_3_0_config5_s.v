// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] reg_181;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
reg   [10:0] reg_185;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [7:0] p_read_13_reg_471;
wire   [11:0] zext_ln717_fu_189_p1;
reg   [7:0] p_read_12_reg_481;
wire    ap_CS_fsm_state2;
wire   [14:0] zext_ln1171_10_fu_194_p1;
reg   [7:0] p_read_11_reg_492;
wire    ap_CS_fsm_state3;
wire   [13:0] zext_ln1171_13_fu_199_p1;
wire   [13:0] zext_ln1171_fu_204_p1;
wire    ap_CS_fsm_state4;
reg   [7:0] p_read111_reg_507;
wire    ap_CS_fsm_state5;
reg   [8:0] lshr_ln_reg_513;
wire   [14:0] zext_ln1171_6_fu_218_p1;
wire   [15:0] r_V_3_fu_223_p1;
wire   [15:0] r_V_4_fu_272_p1;
reg   [11:0] trunc_ln717_3_reg_533;
wire   [12:0] add_ln712_3_fu_329_p2;
reg   [12:0] add_ln712_3_reg_538;
wire   [13:0] add_ln712_7_fu_394_p2;
reg   [13:0] add_ln712_7_reg_543;
reg   [12:0] trunc_ln717_1_reg_548;
wire    ap_CS_fsm_state10;
wire   [14:0] add_ln712_8_fu_421_p2;
reg   [14:0] add_ln712_8_reg_553;
reg   [12:0] trunc_ln717_2_reg_558;
wire    ap_CS_fsm_state11;
reg   [7:0] ap_port_reg_p_read1;
reg   [7:0] ap_port_reg_p_read2;
reg   [7:0] ap_port_reg_p_read3;
reg   [7:0] ap_port_reg_p_read4;
reg   [7:0] grp_fu_108_p0;
reg  signed [8:0] grp_fu_108_p1;
wire   [14:0] grp_fu_151_p1;
wire   [15:0] grp_fu_108_p2;
wire   [13:0] grp_fu_161_p1;
wire   [11:0] lshr_ln_fu_208_p1;
wire   [13:0] shl_ln_fu_230_p3;
wire   [9:0] shl_ln1171_5_fu_241_p3;
wire   [14:0] zext_ln1171_7_fu_237_p1;
wire   [14:0] zext_ln1171_8_fu_248_p1;
wire   [14:0] add_ln1171_fu_252_p2;
wire   [11:0] trunc_ln_fu_258_p4;
wire   [12:0] shl_ln1171_8_fu_281_p3;
wire   [13:0] zext_ln1171_15_fu_289_p1;
wire   [13:0] sub_ln1171_1_fu_293_p2;
wire  signed [14:0] sext_ln1171_4_fu_299_p1;
wire   [14:0] zext_ln1171_14_fu_277_p1;
wire   [14:0] sub_ln1171_2_fu_303_p2;
wire   [11:0] zext_ln717_1_fu_227_p1;
wire   [11:0] add_ln712_2_fu_319_p2;
wire   [12:0] zext_ln712_fu_325_p1;
wire   [12:0] zext_ln1171_9_fu_268_p1;
wire   [12:0] shl_ln1171_6_fu_335_p3;
wire   [10:0] shl_ln1171_7_fu_346_p3;
wire   [13:0] zext_ln1171_12_fu_353_p1;
wire   [13:0] zext_ln1171_11_fu_342_p1;
wire   [13:0] sub_ln1171_fu_357_p2;
wire   [10:0] trunc_ln717_s_fu_363_p4;
wire  signed [12:0] sext_ln712_fu_381_p1;
wire   [12:0] lshr_ln717_cast_fu_377_p1;
wire   [12:0] add_ln712_6_fu_384_p2;
wire  signed [13:0] sext_ln712_5_fu_390_p1;
wire  signed [13:0] trunc_ln717_cast_fu_373_p1;
wire  signed [12:0] sext_ln1171_5_fu_404_p1;
wire   [12:0] zext_ln1171_16_fu_400_p1;
wire   [12:0] add_ln712_5_fu_408_p2;
wire  signed [14:0] sext_ln712_6_fu_418_p1;
wire  signed [14:0] sext_ln712_4_fu_414_p1;
wire    ap_CS_fsm_state12;
wire  signed [13:0] sext_ln1171_fu_427_p1;
wire  signed [13:0] sext_ln1171_3_fu_430_p1;
wire   [13:0] add_ln712_fu_433_p2;
wire   [14:0] zext_ln712_1_fu_443_p1;
wire  signed [14:0] sext_ln712_2_fu_439_p1;
wire   [14:0] add_ln712_4_fu_446_p2;
wire  signed [15:0] sext_ln712_3_fu_452_p1;
wire  signed [15:0] add_ln712_8_cast_fu_456_p1;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

myproject_mul_8ns_9s_16_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
mul_8ns_9s_16_5_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_108_p0),
    .din1(grp_fu_108_p1),
    .ce(1'b1),
    .dout(grp_fu_108_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln712_3_reg_538 <= add_ln712_3_fu_329_p2;
        trunc_ln717_3_reg_533 <= {{sub_ln1171_2_fu_303_p2[14:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln712_7_reg_543 <= add_ln712_7_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln712_8_reg_553 <= add_ln712_8_fu_421_p2;
        trunc_ln717_1_reg_548 <= {{grp_fu_108_p2[15:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ap_port_reg_p_read1 <= p_read1;
        ap_port_reg_p_read2 <= p_read2;
        ap_port_reg_p_read3 <= p_read3;
        ap_port_reg_p_read4 <= p_read4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        lshr_ln_reg_513 <= {{lshr_ln_fu_208_p1[11:3]}};
        p_read111_reg_507 <= ap_port_reg_p_read1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_read_11_reg_492 <= ap_port_reg_p_read3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_read_12_reg_481 <= ap_port_reg_p_read2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        p_read_13_reg_471 <= p_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_181 <= {{grp_fu_151_p1[14:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_185 <= {{grp_fu_161_p1[13:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        trunc_ln717_2_reg_558 <= {{grp_fu_108_p2[15:3]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_108_p0 = r_V_4_fu_272_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_108_p0 = r_V_3_fu_223_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_108_p0 = zext_ln1171_6_fu_218_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_108_p0 = zext_ln1171_fu_204_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_108_p0 = zext_ln1171_13_fu_199_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_108_p0 = zext_ln1171_10_fu_194_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_108_p0 = zext_ln717_fu_189_p1;
    end else begin
        grp_fu_108_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_108_p1 = 16'd65469;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_108_p1 = 16'd65437;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_108_p1 = 15'd32722;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_108_p1 = 14'd59;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_108_p1 = 14'd44;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_108_p1 = 15'd100;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_108_p1 = 12'd11;
    end else begin
        grp_fu_108_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1171_fu_252_p2 = (zext_ln1171_7_fu_237_p1 + zext_ln1171_8_fu_248_p1);

assign add_ln712_2_fu_319_p2 = (zext_ln717_1_fu_227_p1 + reg_181);

assign add_ln712_3_fu_329_p2 = (zext_ln712_fu_325_p1 + zext_ln1171_9_fu_268_p1);

assign add_ln712_4_fu_446_p2 = ($signed(zext_ln712_1_fu_443_p1) + $signed(sext_ln712_2_fu_439_p1));

assign add_ln712_5_fu_408_p2 = ($signed(sext_ln1171_5_fu_404_p1) + $signed(zext_ln1171_16_fu_400_p1));

assign add_ln712_6_fu_384_p2 = ($signed(sext_ln712_fu_381_p1) + $signed(lshr_ln717_cast_fu_377_p1));

assign add_ln712_7_fu_394_p2 = ($signed(sext_ln712_5_fu_390_p1) + $signed(trunc_ln717_cast_fu_373_p1));

assign add_ln712_8_cast_fu_456_p1 = $signed(add_ln712_8_reg_553);

assign add_ln712_8_fu_421_p2 = ($signed(sext_ln712_6_fu_418_p1) + $signed(sext_ln712_4_fu_414_p1));

assign add_ln712_fu_433_p2 = ($signed(sext_ln1171_fu_427_p1) + $signed(sext_ln1171_3_fu_430_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = sext_ln712_3_fu_452_p1;

assign ap_return_1 = add_ln712_8_cast_fu_456_p1;

assign grp_fu_151_p1 = grp_fu_108_p2;

assign grp_fu_161_p1 = grp_fu_108_p2;

assign lshr_ln717_cast_fu_377_p1 = reg_185;

assign lshr_ln_fu_208_p1 = grp_fu_108_p2;

assign r_V_3_fu_223_p1 = p_read_11_reg_492;

assign r_V_4_fu_272_p1 = ap_port_reg_p_read4;

assign sext_ln1171_3_fu_430_p1 = $signed(trunc_ln717_2_reg_558);

assign sext_ln1171_4_fu_299_p1 = $signed(sub_ln1171_1_fu_293_p2);

assign sext_ln1171_5_fu_404_p1 = $signed(reg_181);

assign sext_ln1171_fu_427_p1 = $signed(trunc_ln717_1_reg_548);

assign sext_ln712_2_fu_439_p1 = $signed(add_ln712_fu_433_p2);

assign sext_ln712_3_fu_452_p1 = $signed(add_ln712_4_fu_446_p2);

assign sext_ln712_4_fu_414_p1 = $signed(add_ln712_5_fu_408_p2);

assign sext_ln712_5_fu_390_p1 = $signed(add_ln712_6_fu_384_p2);

assign sext_ln712_6_fu_418_p1 = $signed(add_ln712_7_reg_543);

assign sext_ln712_fu_381_p1 = $signed(trunc_ln717_3_reg_533);

assign shl_ln1171_5_fu_241_p3 = {{p_read111_reg_507}, {2'd0}};

assign shl_ln1171_6_fu_335_p3 = {{p_read_12_reg_481}, {5'd0}};

assign shl_ln1171_7_fu_346_p3 = {{p_read_12_reg_481}, {3'd0}};

assign shl_ln1171_8_fu_281_p3 = {{ap_port_reg_p_read4}, {5'd0}};

assign shl_ln_fu_230_p3 = {{p_read111_reg_507}, {6'd0}};

assign sub_ln1171_1_fu_293_p2 = (14'd0 - zext_ln1171_15_fu_289_p1);

assign sub_ln1171_2_fu_303_p2 = ($signed(sext_ln1171_4_fu_299_p1) - $signed(zext_ln1171_14_fu_277_p1));

assign sub_ln1171_fu_357_p2 = (zext_ln1171_12_fu_353_p1 - zext_ln1171_11_fu_342_p1);

assign trunc_ln717_cast_fu_373_p1 = $signed(trunc_ln717_s_fu_363_p4);

assign trunc_ln717_s_fu_363_p4 = {{sub_ln1171_fu_357_p2[13:3]}};

assign trunc_ln_fu_258_p4 = {{add_ln1171_fu_252_p2[14:3]}};

assign zext_ln1171_10_fu_194_p1 = ap_port_reg_p_read2;

assign zext_ln1171_11_fu_342_p1 = shl_ln1171_6_fu_335_p3;

assign zext_ln1171_12_fu_353_p1 = shl_ln1171_7_fu_346_p3;

assign zext_ln1171_13_fu_199_p1 = ap_port_reg_p_read3;

assign zext_ln1171_14_fu_277_p1 = ap_port_reg_p_read4;

assign zext_ln1171_15_fu_289_p1 = shl_ln1171_8_fu_281_p3;

assign zext_ln1171_16_fu_400_p1 = reg_185;

assign zext_ln1171_6_fu_218_p1 = ap_port_reg_p_read1;

assign zext_ln1171_7_fu_237_p1 = shl_ln_fu_230_p3;

assign zext_ln1171_8_fu_248_p1 = shl_ln1171_5_fu_241_p3;

assign zext_ln1171_9_fu_268_p1 = trunc_ln_fu_258_p4;

assign zext_ln1171_fu_204_p1 = p_read_13_reg_471;

assign zext_ln712_1_fu_443_p1 = add_ln712_3_reg_538;

assign zext_ln712_fu_325_p1 = add_ln712_2_fu_319_p2;

assign zext_ln717_1_fu_227_p1 = lshr_ln_reg_513;

assign zext_ln717_fu_189_p1 = p_read;

endmodule //myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config5_s
