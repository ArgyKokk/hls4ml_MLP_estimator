// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] p_read_9_reg_238;
reg   [10:0] lshr_ln717_5_reg_243;
reg   [7:0] ap_port_reg_p_read1;
wire    ap_CS_fsm_state2;
wire   [7:0] mul_ln1171_fu_64_p0;
wire   [6:0] mul_ln1171_fu_64_p1;
wire   [13:0] mul_ln1171_fu_64_p2;
wire   [14:0] shl_ln_fu_92_p3;
wire   [15:0] zext_ln1171_1_fu_99_p1;
wire   [15:0] sub_ln1171_fu_103_p2;
wire   [12:0] trunc_ln_fu_109_p4;
wire   [13:0] shl_ln1171_3_fu_130_p3;
wire   [11:0] shl_ln1171_4_fu_142_p3;
wire   [14:0] zext_ln1171_2_fu_138_p1;
wire   [14:0] zext_ln1171_3_fu_150_p1;
wire   [14:0] add_ln1171_fu_154_p2;
wire   [11:0] trunc_ln5_fu_160_p4;
wire   [14:0] tmp_fu_174_p3;
wire   [15:0] r_V_2_fu_126_p1;
wire   [15:0] zext_ln1171_5_fu_182_p1;
wire   [15:0] sub_ln1171_1_fu_186_p2;
wire   [12:0] trunc_ln717_9_fu_192_p4;
wire   [13:0] zext_ln1171_4_fu_170_p1;
wire  signed [13:0] sext_ln1171_fu_119_p1;
wire   [13:0] add_ln712_fu_206_p2;
wire  signed [13:0] sext_ln712_fu_202_p1;
wire   [13:0] zext_ln717_fu_123_p1;
wire   [13:0] add_ln712_1_fu_216_p2;
wire  signed [15:0] sext_ln712_1_fu_212_p1;
wire  signed [15:0] sext_ln68_fu_222_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire   [13:0] mul_ln1171_fu_64_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

myproject_mul_8ns_7ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
mul_8ns_7ns_14_1_1_U20(
    .din0(mul_ln1171_fu_64_p0),
    .din1(mul_ln1171_fu_64_p1),
    .dout(mul_ln1171_fu_64_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_port_reg_p_read1 <= p_read1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        lshr_ln717_5_reg_243 <= {{mul_ln1171_fu_64_p2[13:3]}};
        p_read_9_reg_238 <= p_read;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1171_fu_154_p2 = (zext_ln1171_2_fu_138_p1 + zext_ln1171_3_fu_150_p1);

assign add_ln712_1_fu_216_p2 = ($signed(sext_ln712_fu_202_p1) + $signed(zext_ln717_fu_123_p1));

assign add_ln712_fu_206_p2 = ($signed(zext_ln1171_4_fu_170_p1) + $signed(sext_ln1171_fu_119_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return_0 = sext_ln712_1_fu_212_p1;

assign ap_return_1 = sext_ln68_fu_222_p1;

assign mul_ln1171_fu_64_p0 = mul_ln1171_fu_64_p00;

assign mul_ln1171_fu_64_p00 = p_read;

assign mul_ln1171_fu_64_p1 = 14'd49;

assign r_V_2_fu_126_p1 = ap_port_reg_p_read1;

assign sext_ln1171_fu_119_p1 = $signed(trunc_ln_fu_109_p4);

assign sext_ln68_fu_222_p1 = $signed(add_ln712_1_fu_216_p2);

assign sext_ln712_1_fu_212_p1 = $signed(add_ln712_fu_206_p2);

assign sext_ln712_fu_202_p1 = $signed(trunc_ln717_9_fu_192_p4);

assign shl_ln1171_3_fu_130_p3 = {{ap_port_reg_p_read1}, {6'd0}};

assign shl_ln1171_4_fu_142_p3 = {{ap_port_reg_p_read1}, {4'd0}};

assign shl_ln_fu_92_p3 = {{p_read_9_reg_238}, {7'd0}};

assign sub_ln1171_1_fu_186_p2 = (r_V_2_fu_126_p1 - zext_ln1171_5_fu_182_p1);

assign sub_ln1171_fu_103_p2 = (16'd0 - zext_ln1171_1_fu_99_p1);

assign tmp_fu_174_p3 = {{ap_port_reg_p_read1}, {7'd0}};

assign trunc_ln5_fu_160_p4 = {{add_ln1171_fu_154_p2[14:3]}};

assign trunc_ln717_9_fu_192_p4 = {{sub_ln1171_1_fu_186_p2[15:3]}};

assign trunc_ln_fu_109_p4 = {{sub_ln1171_fu_103_p2[15:3]}};

assign zext_ln1171_1_fu_99_p1 = shl_ln_fu_92_p3;

assign zext_ln1171_2_fu_138_p1 = shl_ln1171_3_fu_130_p3;

assign zext_ln1171_3_fu_150_p1 = shl_ln1171_4_fu_142_p3;

assign zext_ln1171_4_fu_170_p1 = trunc_ln5_fu_160_p4;

assign zext_ln1171_5_fu_182_p1 = tmp_fu_174_p3;

assign zext_ln717_fu_123_p1 = lshr_ln717_5_reg_243;

endmodule //myproject_dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_4_5_3_0_config8_s
